(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    312870,       6654]
NotebookOptionsPosition[    298361,       6227]
NotebookOutlinePosition[    301700,       6305]
CellTagsIndexPosition[    301613,       6300]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["Notes on \"A Framework for the Automated Analysis of \
Subcellular Patterns in Human Protein Atlas Images\"",
 FontFamily->"Calibri",
 FontSize->22]], "Title",
 CellChangeTimes->{{3.4742891466582317`*^9, 3.474289301755433*^9}, {
  3.474289524106206*^9, 3.474289556194205*^9}},
 TextAlignment->Left],

Cell[TextData[{
 StyleBox["This is a walkthrough of the \"unmixing\" path of the methods \
presented in \"A Framework for the Automated Analysis of Subcellular Patterns \
in Human Protein Atlas Images\", by Justin Newberg and Robert F. Murphy, \
published in the ",
  FontFamily->"Cambria"],
 StyleBox["Journal of Proteome Research",
  FontFamily->"Cambria",
  FontSlant->"Italic"],
 StyleBox[", vol. 7, no. 6. pp. 2300-2308, (2008).",
  FontFamily->"Cambria"]
}], "Text",
 CellChangeTimes->{{3.4742891466582317`*^9, 3.474289301755433*^9}, {
  3.474289524106206*^9, 3.474289556194205*^9}, {3.47428980355612*^9, 
  3.474289822177782*^9}, {3.47428998214911*^9, 3.47428998214911*^9}},
 TextJustification->0.],

Cell[TextData[{
 StyleBox["The authors kindly provided access to the source code and images \
used for the research presented in their paper. The web page for the paper is \
",
  FontFamily->"Cambria"],
 ButtonBox["http://murphylab.web.cmu.edu/software/2008_JProteomeResearch \
_HPA/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://murphylab.web.cmu.edu/software/2008_JProteomeResearch_HPA/"], 
    None},
  ButtonNote->
   "http://murphylab.web.cmu.edu/software/2008_JProteomeResearch_HPA/"],
 ". The code was written in MATLAB and is available at ",
 ButtonBox["http://murphylab.web.cmu.edu/software/2008_JProteomeResearch \
_HPA/JPRAtlasCode.tar.gz",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://murphylab.web.cmu.edu/software/2008_JProteomeResearch_HPA/\
JPRAtlasCode.tar.gz"], None},
  ButtonNote->
   "http://murphylab.web.cmu.edu/software/2008_JProteomeResearch_HPA/\
JPRAtlasCode.tar.gz"],
 ". The images (1.4 ",
 StyleBox["GB",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ") are available from the Human Protein Atlas at ",
 ButtonBox["http://proteinatlas.org/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://proteinatlas.org/"], None},
  ButtonNote->"http://proteinatlas.org/"],
 " or from the author's web site at ",
 ButtonBox["http://murphylab.web.cmu.edu/software/2008_JProteomeResearch \
_HPA/JPRAtlasImages.tar.gz",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://murphylab.web.cmu.edu/software/2008_JProteomeResearch_HPA/\
JPRAtlasImages.tar.gz"], None},
  ButtonNote->
   "http://murphylab.web.cmu.edu/software/2008_JProteomeResearch_HPA/\
JPRAtlasImages.tar.gz"],
 "."
}], "Text",
 CellChangeTimes->{{3.474289984476818*^9, 3.4742900267036247`*^9}, {
  3.4742900701333404`*^9, 3.4742900818656125`*^9}, {3.4742901776140766`*^9, 
  3.474290186721819*^9}, {3.474290219934616*^9, 3.474290240149743*^9}, {
  3.47429029068756*^9, 3.474290304763162*^9}, {3.474290341631554*^9, 
  3.4742903817962303`*^9}, {3.474290419961265*^9, 3.474290459954097*^9}, {
  3.474290529863442*^9, 3.4742905837909365`*^9}, {3.4742906284356422`*^9, 
  3.474290628545066*^9}, {3.474290757445713*^9, 3.474290779424165*^9}, {
  3.474290904467084*^9, 3.474290904467084*^9}},
 TextJustification->0.],

Cell[CellGroupData[{

Cell["System Requirements", "Section",
 CellChangeTimes->{{3.4742909058108945`*^9, 3.474290913670622*^9}},
 TextAlignment->Left,
 FontFamily->"Calibri",
 FontSize->16],

Cell["\<\
From the author's web site: \"The scripts were written for Matlab version 7.1 \
on Linux. The statistics, wavelet, and image processing toolboxes for Matlab \
are also required.\" Since we are only interested in the unmixing portion \
now, only the base MATLAB system and the image processing toolboxes are \
discussed.\
\>", "Text",
 CellChangeTimes->{{3.4742909147644205`*^9, 3.4742910449577527`*^9}, {
  3.474291145179437*^9, 3.474291145179437*^9}, {3.474300866806733*^9, 
  3.4743008799283733`*^9}},
 TextJustification->0.]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structure of the Program", "Section",
 CellChangeTimes->{{3.4742911464605646`*^9, 3.4742911513663435`*^9}, {
  3.4742916172329397`*^9, 3.4742916172329397`*^9}},
 TextAlignment->Left,
 FontFamily->"Calibri",
 FontSize->16],

Cell["\<\
The program is well structured and easily understood. At the top level are \
three functions, the first of which will download the images into the correct \
location for further processing. Since this is done only once it is not \
discussed further here. A second top-level function will generate all of the \
tables and figures once processing has been completed (see next.) That is not \
of interest now. The third function processes the image files. That is where \
our interest lies.\
\>", "Text",
 CellChangeTimes->{{3.4742916199512725`*^9, 3.4742917954079075`*^9}}],

Cell["\<\
processData\[LineSeparator]\tsetup(dataroot)\[LineSeparator]\toptions = \
setOptions(inputs)
\toutputs = prepareData(method, params)
\thandleData(data, params)
\t\tprocessImage(readpath, writepath, params)
\t\t\tH = findH(V, W)
\t\t\t[W, H] = findWH(V, inputs)
\t\t\t[J, ma] = reconIH(I, H, IDX, sc)\
\>", "Program",
 CellChangeTimes->{3.474633980100915*^9}],

Cell["\<\
In a translation, it is often easier to work \"from the inside out\" and so \
we shall here.\
\>", "Text",
 CellChangeTimes->{{3.474292244644294*^9, 3.474292245347297*^9}, {
  3.474292298260027*^9, 3.474292327036304*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Functions", "Section",
 CellChangeTimes->{{3.474292333769515*^9, 3.474292427518339*^9}, {
  3.474292560041461*^9, 3.4742926449549675`*^9}, {3.4742928104589405`*^9, 
  3.4742928535496564`*^9}, {3.474292971865424*^9, 3.4742929747713394`*^9}, {
  3.4743035019971533`*^9, 3.4743035692531805`*^9}, {3.4743036029671993`*^9, 
  3.474303610254181*^9}, {3.47430416564487*^9, 3.474304193881138*^9}, {
  3.4743042759789476`*^9, 3.4743043061070147`*^9}, {3.4743043517285776`*^9, 
  3.4743043531044135`*^9}, {3.4743773111095066`*^9, 3.474377347359042*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " versions of some MATLAB functions"
}], "Subsection",
 CellChangeTimes->{{3.4743773886241393`*^9, 3.4743773992177534`*^9}, {
  3.4743774971852493`*^9, 3.4743774972008743`*^9}, {3.474387562382146*^9, 
  3.4743875789284916`*^9}, {3.4743877659537563`*^9, 3.4743877659537563`*^9}, {
  3.474637579462118*^9, 3.4746375919620385`*^9}}],

Cell["\<\
The software for the original paper is written in MATLAB 7.1. Since there is \
not a one-to-one correspondence between the syntax and built-in functions \
availabe in the two languages, some bridging must be done.\
\>", "Text",
 CellChangeTimes->{{3.474637623430587*^9, 3.4746376858520293`*^9}, {
  3.474637732960801*^9, 3.474637749085595*^9}, {3.4746378924431353`*^9, 
  3.4746378924431353`*^9}, {3.474640437989501*^9, 3.474640437989501*^9}}],

Cell[CellGroupData[{

Cell["single()", "Subsubsection",
 CellChangeTimes->{{3.474640440085757*^9, 3.474640442056863*^9}},
 TextAlignment->Left],

Cell[TextData[{
 "This function is used to convert its arguments to single-precision floating \
point, presumably to reduce memory requirements. We will simply allow ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to use whatever numerical representation it believes appropriate and will \
not do explicit casts to single precision."
}], "Item1Paragraph",
 CellChangeTimes->{{3.4746378947556057`*^9, 3.4746379843950357`*^9}, {
   3.474638109204341*^9, 3.474638122047762*^9}, {3.4746384467328334`*^9, 
   3.4746384467328334`*^9}, {3.4746406098769836`*^9, 3.4746406098769836`*^9}, 
   3.474647807863309*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["reshape()", "Subsubsection",
 CellChangeTimes->{{3.474640611846843*^9, 3.4746406140981097`*^9}}],

Cell[CellGroupData[{

Cell["\<\
This function does general matrix reshaping. However, in the calculation \
chain described above, the function is invariably used to convert image data \
into an column matrix of tuples. The dimensionality of the tuples is the \
number of color planes in the original image. Further, the elements are \
almost always subtracted from 255 and duplicate rows (tuples) are eliminated.\
\>", "Item1Paragraph",
 CellChangeTimes->{{3.4746384479659758`*^9, 3.4746384925620317`*^9}, {
  3.474638524998365*^9, 3.4746386454655643`*^9}, {3.4746386802553387`*^9, 
  3.4746387280678563`*^9}, {3.4746390961118426`*^9, 3.4746391355133877`*^9}, {
  3.4746392394947023`*^9, 3.4746392398539047`*^9}, {3.474640227240136*^9, 
  3.474640243092304*^9}, {3.474647811409594*^9, 3.4746478146278086`*^9}}],

Cell["\<\
Creating a function to do what is desired, not just trying to reproduce the \
MATLAB function, is straightforward. Let's start with a small image to work \
with. (Note: You will probably need to change the following file path to \
match the directory layout on your system.)\
\>", "Item1Paragraph",
 CellChangeTimes->{{3.4746384479659758`*^9, 3.4746384925620317`*^9}, {
   3.474638524998365*^9, 3.4746386454655643`*^9}, {3.4746386802553387`*^9, 
   3.4746387280678563`*^9}, {3.4746390961118426`*^9, 
   3.4746391355133877`*^9}, {3.4746392394947023`*^9, 3.474639330185525*^9}, {
   3.4746393928117*^9, 3.4746393928117*^9}, 3.474640252775402*^9, {
   3.5250115287105083`*^9, 3.5250115605813646`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "smlImgPath", "=", 
   "\"\<C:\\\\projects\\\\color-deconvolution\\\\Images\\\\Small \
Test.PNG\>\""}], ";"}]], "Input",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, 3.4746394849556875`*^9, {
   3.525011486356434*^9, 3.5250115075100713`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[Cell[BoxData[
   RowBox[{"smlImg", " ", "=", " ", 
    RowBox[{"Import", "[", "smlImgPath", "]"}]}]], "Input",
   CellChangeTimes->{{3.4743993774500003`*^9, 3.4743993947451286`*^9}}], 
  "Input"]], "Input",
 CellChangeTimes->{3.4746393940454826`*^9, 3.4746394391958265`*^9, 
  3.4746394849556875`*^9}],

Cell[BoxData[
 InterpretationBox[Cell[BoxData[
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBLECOU2VJahIzkCEAxMJADGL/Z2jA
gxoa/qOhAzAwqpFMjWBAskYkQCeNZDt1aEXHINMIAE1XMc0=
      "], {{0, 16}, {19, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}]], "Input",
   CellChangeTimes->{{3.4743993774500003`*^9, 3.4743993947451286`*^9}}],
  ExpressionCell[
   Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBLECOU2VJahIzkCEAxMJADGL/Z2jA
gxoa/qOhAzAwqpFMjWBAskYkQCeNZDt1aEXHINMIAE1XMc0=
    "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Input", 
   CellChangeTimes -> {{3.4743993774500003`*^9, 
    3.4743993947451286`*^9}}]]], "Output",
 CellChangeTimes->{
  3.474639455079027*^9, 3.4746394994020596`*^9, 3.4747348847050643`*^9, 
   3.4748020195724945`*^9, 3.4748037288986444`*^9, 3.474803774882454*^9, 
   3.4748054317076397`*^9, 3.474805654342162*^9, {3.4748075988620005`*^9, 
   3.4748076182871847`*^9}, 3.474808263172038*^9, 3.4748083143893623`*^9, 
   3.474809794538604*^9, 3.4748141362664795`*^9, 3.474814521083828*^9, 
   3.47481459736014*^9, {3.474815203098461*^9, 3.4748152283304462`*^9}, 
   3.474820847574823*^9, 3.4748215328225355`*^9, {3.4748295868207026`*^9, 
   3.4748296348431168`*^9}, 3.474830357581381*^9, 3.4748304681463485`*^9, 
   3.474830564541522*^9, 3.474832130526839*^9, 3.4749012818212385`*^9, 
   3.4749016030355515`*^9, 3.474912024485411*^9, 3.474916444935841*^9, 
   3.474917011488313*^9, 3.4749741949296427`*^9, 3.4749784938935394`*^9, 
   3.4749872413027663`*^9, 3.4749881819651785`*^9, 3.4749990165076666`*^9, 
   3.474999471429824*^9, 3.4749996895282116`*^9, 3.4750007797186966`*^9, 
   3.4750014448448095`*^9, 3.4750026562758713`*^9, 3.5250117223692484`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"Import", "[", 
   RowBox[{"smlImgPath", ",", " ", "\"\<Data\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, {3.474639593451849*^9, 
   3.4746396036502075`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"16", ",", "19", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.474639622047858*^9, 3.474734884783104*^9, 3.474802019634591*^9, 
   3.4748037289454556`*^9, 3.474803774929265*^9, 3.4748054317544746`*^9, 
   3.4748056544202194`*^9, {3.4748075989244604`*^9, 3.47480761833403*^9}, 
   3.4748082632188973`*^9, 3.4748083144362216`*^9, 3.4748097945854654`*^9, 
   3.474814136313346*^9, 3.474814521146312*^9, 3.474814597407002*^9, {
   3.474815203145361*^9, 3.4748152283773456`*^9}, 3.4748208476373205`*^9, 
   3.4748215328850317`*^9, {3.4748295868673563`*^9, 3.4748296348897705`*^9}, 
   3.4748303576438026`*^9, 3.474830468193165*^9, 3.474830564603944*^9, 
   3.474832130573663*^9, 3.4749012818837423`*^9, 3.474901603098014*^9, 
   3.4749120245478954`*^9, 3.4749164449827104`*^9, 3.4749170115351825`*^9, 
   3.4749741950077333`*^9, 3.474978493940398*^9, 3.4749872413651395`*^9, 
   3.474988184093524*^9, 3.474999016570137*^9, 3.474999471476677*^9, 
   3.474999689575064*^9, 3.4750007797812586`*^9, 3.4750014449073515`*^9, 
   3.475002656322776*^9, 3.525011722587649*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"smlImgPath", ",", " ", "\"\<BitDepth\>\""}], "]"}]], "Input",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, {3.474639593451849*^9, 
   3.4746396407110095`*^9}}],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{
  3.474639657031506*^9, 3.474734884845535*^9, 3.4748020196966887`*^9, 
   3.4748037289922667`*^9, 3.4748037749760756`*^9, 3.4748054318013096`*^9, 
   3.4748056544670534`*^9, {3.474807598971306*^9, 3.47480761839649*^9}, 
   3.4748082632657566`*^9, 3.474808314483081*^9, 3.474809794632327*^9, 
   3.474814136360213*^9, 3.4748145211931753`*^9, 3.474814597453864*^9, {
   3.4748152031922607`*^9, 3.474815228424245*^9}, 3.474820847684194*^9, 
   3.4748215329319043`*^9, {3.4748295869295616`*^9, 3.474829634951976*^9}, 
   3.4748303576906195`*^9, 3.4748304682399817`*^9, 3.4748305646507607`*^9, 
   3.4748321306360955`*^9, 3.474901281914994*^9, 3.474901603129245*^9, 
   3.474912024594758*^9, 3.474916445029579*^9, 3.4749170115820513`*^9, 
   3.4749741950545874`*^9, 3.474978493987256*^9, 3.4749872414119196`*^9, 
   3.4749881857993307`*^9, 3.474999016616989*^9, 3.474999471523529*^9, 
   3.474999689621917*^9, 3.4750007798281803`*^9, 3.4750014449386225`*^9, 
   3.47500265636968*^9, 3.525011722650049*^9}]
}, Open  ]],

Cell["\<\
This shows that this is an image with 16 rows, 19 columns, and three color \
channels and that the data consists of 8-bit values. From the image, it is \
obvious that there should be several duplicate rows in the reshaped matrix. \
The data looks like:\
\>", "Item1Paragraph",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, {3.474639593451849*^9, 
   3.4746396407110095`*^9}, {3.4746396711655245`*^9, 3.474639676756661*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{
   RowBox[{"ImageData", "[", 
    RowBox[{"smlImg", ",", " ", "\"\<Byte\>\""}], "]"}], ",", " ", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, {3.474639593451849*^9, 
   3.4746396407110095`*^9}, {3.4746396711655245`*^9, 3.4746396935925417`*^9}, 
   3.47463973933694*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
      RowBox[{"\[LeftSkeleton]", "8", "\[RightSkeleton]"}], ",", 
      RowBox[{"{", 
       RowBox[{"128", ",", "128", ",", "255"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"128", ",", "128", ",", "255"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"192", ",", "192", ",", "192"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"192", ",", "192", ",", "192"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"192", ",", "192", ",", "192"}], "}"}]}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "14", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}]}], "}"}],
  Short[#, 3]& ]], "Output",
 CellChangeTimes->{
  3.474639745459157*^9, 3.4747348848767505`*^9, 3.4748020197122126`*^9, 
   3.4748037290234737`*^9, 3.4748037750072827`*^9, 3.474805431816921*^9, 
   3.474805654482665*^9, {3.4748075989869213`*^9, 3.47480761842772*^9}, 
   3.474808263296996*^9, 3.4748083145143204`*^9, 3.474809794663568*^9, 
   3.474814136391457*^9, 3.4748145212244177`*^9, 3.4748145974851055`*^9, {
   3.474815203223527*^9, 3.4748152284555116`*^9}, 3.4748208476998186`*^9, 
   3.4748215329475284`*^9, {3.474829586945113*^9, 3.4748296349675274`*^9}, 
   3.4748303577218304`*^9, 3.4748304682711926`*^9, 3.4748305646819715`*^9, 
   3.474832130651704*^9, 3.4749012819462457`*^9, 3.4749016031604757`*^9, 
   3.474912024610379*^9, 3.4749164450608253`*^9, 3.4749170116132975`*^9, 
   3.4749741950858235`*^9, 3.4749784940184946`*^9, 3.474987241427513*^9, 
   3.474988190447262*^9, 3.474999016648224*^9, 3.4749994715547643`*^9, 
   3.4749996896531515`*^9, 3.4750007798438206`*^9, 3.4750014449698935`*^9, 
   3.4750026564009495`*^9, 3.525011722696849*^9}]
}, Open  ]],

Cell[TextData[{
 "That is, it is rows of RGB triples. We can obtain the tall matrix form \
generated by the ",
 StyleBox["reshape()", "Code"],
 " function by flattening the list by one level:"
}], "Item1Paragraph",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, {3.474639593451849*^9, 
   3.4746396407110095`*^9}, {3.4746396711655245`*^9, 
   3.4746396935925417`*^9}, {3.474639788798829*^9, 3.4746397921722956`*^9}, 
   3.4746398292648077`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"ImageData", "[", 
      RowBox[{"smlImg", ",", " ", "\"\<Byte\>\""}], "]"}], ",", " ", "1"}], 
    "]"}], ",", " ", "3"}], "]"}]], "Input",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, {3.474639593451849*^9, 
   3.4746396407110095`*^9}, {3.4746396711655245`*^9, 
   3.4746396935925417`*^9}, {3.474639788798829*^9, 3.4746397921722956`*^9}, {
   3.4746398292648077`*^9, 3.47463983743297*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"255", ",", "0", ",", "128"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "293", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"128", ",", "128", ",", "255"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"128", ",", "128", ",", "255"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"192", ",", "192", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"192", ",", "192", ",", "192"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"192", ",", "192", ",", "192"}], "}"}]}], "}"}],
  Short[#, 3]& ]], "Output",
 CellChangeTimes->{
  3.4746398574551177`*^9, 3.4747348849079657`*^9, 3.4748020197587857`*^9, 
   3.474803729054681*^9, 3.4748037750384903`*^9, 3.4748054318481445`*^9, 
   3.4748056545138874`*^9, {3.4748075990181513`*^9, 3.4748076184433355`*^9}, 
   3.474808263328236*^9, 3.47480831454556*^9, 3.474809794694809*^9, 
   3.474814136422702*^9, 3.474814521240039*^9, 3.474814597516347*^9, {
   3.474815203254793*^9, 3.4748152284867783`*^9}, 3.4748208477310677`*^9, 
   3.474821532978777*^9, {3.4748295869762154`*^9, 3.47482963499863*^9}, 
   3.4748303577530413`*^9, 3.4748304683024035`*^9, 3.4748305646975765`*^9, 
   3.4748321306829195`*^9, 3.474901281977497*^9, 3.4749016031917067`*^9, 
   3.474912024641621*^9, 3.4749164450920715`*^9, 3.4749170116289206`*^9, 
   3.474974195132678*^9, 3.4749784940497336`*^9, 3.4749872414586997`*^9, 
   3.47498819323289*^9, 3.474999016679459*^9, 3.4749994715859995`*^9, 
   3.4749996896843867`*^9, 3.475000779875102*^9, 3.475001444985529*^9, 
   3.4750026564322195`*^9, 3.5250117227436495`*^9}]
}, Open  ]],

Cell["\<\
And we can subtract each byte from 255 and reduce the matrix to the \
non-duplicated rows like this:\
\>", "Item1Paragraph",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, {3.474639593451849*^9, 
   3.4746396407110095`*^9}, {3.4746396711655245`*^9, 
   3.4746396935925417`*^9}, {3.474639788798829*^9, 3.4746397921722956`*^9}, {
   3.4746398292648077`*^9, 3.47463983743297*^9}, {3.4746398751345806`*^9, 
   3.474639903184329*^9}, {3.474639952162063*^9, 3.4746399622512264`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"DeleteDuplicates", "[", 
   RowBox[{"255", "-", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"ImageData", "[", 
       RowBox[{"smlImg", ",", " ", "\"\<Byte\>\""}], "]"}], ",", " ", "1"}], 
     "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{
  3.4746393940454826`*^9, 3.4746394391958265`*^9, {3.474639593451849*^9, 
   3.4746396407110095`*^9}, {3.4746396711655245`*^9, 
   3.4746396935925417`*^9}, {3.474639788798829*^9, 3.4746397921722956`*^9}, {
   3.4746398292648077`*^9, 3.47463983743297*^9}, {3.4746398751345806`*^9, 
   3.4746399200360427`*^9}, {3.4746399703725348`*^9, 3.474639971543877*^9}, 
   3.4748304563485904`*^9, {3.4748305598130555`*^9, 3.4748305609990735`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "255", "127"},
     {"127", "127", "0"},
     {"63", "63", "63"},
     {"0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.4746399277044315`*^9, 3.474639974230156*^9, 3.474734884970397*^9, 
   3.474802019836407*^9, 3.474803729085888*^9, 3.4748037750696974`*^9, 
   3.474805431879368*^9, 3.4748056545451107`*^9, {3.4748075990493813`*^9, 
   3.4748076184745655`*^9}, 3.474808263343856*^9, 3.4748083145768*^9, 
   3.47480979472605*^9, 3.474814136453946*^9, 3.4748145212712812`*^9, 
   3.4748145975319676`*^9, {3.4748152032860594`*^9, 3.4748152285180445`*^9}, 
   3.4748208477623167`*^9, 3.474821533010025*^9, {3.4748295870073185`*^9, 
   3.4748296350297327`*^9}, 3.474830357784252*^9, 3.4748304683336143`*^9, 
   3.474830564728788*^9, 3.4748321306985283`*^9, 3.474901282008749*^9, 
   3.4749016032229376`*^9, 3.474912024672863*^9, 3.4749164451076946`*^9, 
   3.4749170116601667`*^9, 3.474974195163914*^9, 3.4749784940809727`*^9, 
   3.4749872415054793`*^9, 3.474988196284562*^9, 3.4749990167106943`*^9, 
   3.474999471617234*^9, 3.474999689715622*^9, 3.4750007799063826`*^9, 
   3.4750014450168*^9, 3.475002656447854*^9, 3.525011722790449*^9}]
}, Open  ]],

Cell[TextData[{
 "As expected, there are only four unique triples since there are only four \
unique colors in the image. So, such a ",
 StyleBox["findUniqueRows()", "Code"],
 " function might be written as:"
}], "Item1Paragraph",
 CellChangeTimes->{{3.4746384479659758`*^9, 3.4746384925620317`*^9}, {
  3.474638524998365*^9, 3.4746386454655643`*^9}, {3.4746386802553387`*^9, 
  3.4746387280678563`*^9}, {3.4746390961118426`*^9, 3.4746391355133877`*^9}, {
  3.4746392394947023`*^9, 3.474639330185525*^9}, {3.4746399975945344`*^9, 
  3.4746400290021315`*^9}, {3.4746400761994247`*^9, 3.474640076808523*^9}, {
  3.474651327886855*^9, 3.4746513646463623`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findUniqueRows", "[", "img_", "]"}], " ", ":=", " ", 
  RowBox[{"DeleteDuplicates", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"255", "-", 
      RowBox[{"ImageData", "[", 
       RowBox[{"img", ",", " ", "\"\<Byte\>\""}], "]"}]}], ",", "1"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.4746390905991125`*^9, {3.4746391254245763`*^9, 3.4746391302034373`*^9}, {
   3.4746400325786304`*^9, 3.4746400351087303`*^9}, {3.474640071279786*^9, 
   3.474640072091917*^9}, 3.474830461701277*^9, {3.4748305554591208`*^9, 
   3.4748305565983224`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"findUniqueRows", "[", "smlImg", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.474640062408819*^9, 3.4746400915986743`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "255", "127"},
     {"127", "127", "0"},
     {"63", "63", "63"},
     {"0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.4746407419825935`*^9, 3.4747348850172205`*^9, 3.4748020198829803`*^9, 
   3.474803729117095*^9, 3.4748037751009045`*^9, 3.474805431910591*^9, 
   3.474805654576333*^9, {3.4748075990806117`*^9, 3.474807618521411*^9}, 
   3.474808263390715*^9, 3.4748083146080394`*^9, 3.4748097947729115`*^9, 
   3.4748141364851904`*^9, 3.474814521302523*^9, 3.47481459757883*^9, {
   3.474815203317326*^9, 3.4748152285493107`*^9}, 3.4748208477935658`*^9, 
   3.474821533041273*^9, {3.4748295870539722`*^9, 3.4748296350763865`*^9}, 
   3.474830357815463*^9, 3.4748304683648252`*^9, 3.4748305647756042`*^9, 
   3.474832130729744*^9, 3.474901282040001*^9, 3.4749016032541685`*^9, 
   3.4749120247041054`*^9, 3.4749164451389403`*^9, 3.4749170116914124`*^9, 
   3.4749741952576227`*^9, 3.474978494112211*^9, 3.474987241536666*^9, 
   3.4749882017775717`*^9, 3.474999016741929*^9, 3.474999471648469*^9, 
   3.4749996897468567`*^9, 3.475000779937664*^9, 3.475001445048071*^9, 
   3.4750026564791236`*^9, 3.5250117228372493`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["unique()", "Subsubsection",
 CellChangeTimes->{{3.4746406599989467`*^9, 3.474640677962183*^9}, {
  3.4746414934438095`*^9, 3.4746414934438095`*^9}}],

Cell[TextData[{
 "This function is used to find the unique items in a collection. It has \
several options and several outputs. From the MATLAB web page at ",
 ButtonBox["http://www.mathworks.com/access/helpdesk/help/techdoc/ref/unique.\
html",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.mathworks.com/access/helpdesk/help/techdoc/ref/unique.\
html"], None},
  ButtonNote->
   "http://www.mathworks.com/access/helpdesk/help/techdoc/ref/unique.html"],
 " (edited to use less space):"
}], "Item1Paragraph",
 CellChangeTimes->{{3.4746407069003468`*^9, 3.4746407074631634`*^9}, {
  3.4746517355846276`*^9, 3.474651775078055*^9}, {3.474651873249216*^9, 
  3.4746519628905478`*^9}, {3.4746526938157763`*^9, 3.474652696565319*^9}}],

Cell[TextData[{
 StyleBox["b = unique(A)\nb = unique(A, 'rows')\n[b, m, n] = unique(...)\n[b, \
m, n] = unique(..., occurrence)\n\n", "Program"],
 StyleBox["Description", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\nb = unique(A) ", "Program"],
 StyleBox["returns the same values as in A but with no repetitions. A can be \
a numeric or character array or a cell array of strings. If A is a vector or \
an array, b is a vector of unique values from A. If A is a cell array of \
strings, b is a cell vector of unique strings from A. The resulting vector b \
is sorted in ascending order and its elements are of the same class as A.", 
  "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\nb = unique(A, 'rows') ", "Program"],
 StyleBox["returns the unique rows of A.", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\n[b, m, n] = unique(...) ", "Program"],
 StyleBox["also returns index vectors m and n such that b = A(m) and A = \
b(n). Each element of m is the greatest subscript such that b = A(m). For row \
combinations, b = A(m,:) and A = b(n,:).", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\n[b, m, n] = unique(..., occurrence)", "Program"],
 StyleBox[", where occurrence can be", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\n  ", "Program"],
 StyleBox["* 'first', which returns the vector m to index the first \
occurrence of each unique value in A, or\n    * 'last', which returns the \
vector m to index the last occurrence.\n\nIf you do not specify occurrence, \
it defaults to 'last'.\n\nYou can specify 'rows' in the same command as \
'first' or 'last'. The order of appearance in the argument list is not \
important.\nExamples", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\nA = [1 1 5 6 2 3 3 9 8 6 2 4] \nA = 1   1   5   6   2   3   3  \
 9   8   6   2   4\n\n", "Program"],
 StyleBox["Get a sorted vector of unique elements of A. Also get indices of \
the first elements in A that make up vector b, and the first elements in b \
that make up vector A:", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\n[b1, m1, n1] = unique(A, 'first') \nb1 = 1   2   3   4   5   6 \
  8   9 \nm1 = 1   5   6  12   3   4   9   8 \nn1 = 1   1   5   6   2   3   3 \
  8   7   6   2   4\n\n", "Program"],
 StyleBox["Verify that b1 = A(m1) and A = b1(n1):", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\nall(b1 == A(m1)) && all(A == b1(n1)) \nans = 1\n\n", "Program"],
 StyleBox["Get a sorted vector of unique elements of A. Also get indices of \
the last elements in A that make up vector b, and the last elements in b that \
make up vector A:", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\n[b2, m2, n2] = unique(A, 'last') \nb2 = 1   2   3   4   5   6  \
 8   9 \nm2 = 2  11   7  12   3  10   9   8 \nn2 = 1   1   5   6   2   3   3  \
 8   7   6   2   4\n\n", "Program"],
 StyleBox["Verify that b2 = A(m2) and A = b2(n2):", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\nall(b2 == A(m2)) && all(A == b2(n2)) \nans = 1\n\n", "Program"],
 StyleBox["Because NaNs are not equal to each other, unique treats them as \
unique elements.", "Program",
  FontFamily->"Constantia"],
 StyleBox["\n\nunique([1 1 NaN NaN]) \nans = 1 NaN NaN", "Program"]
}], "Program",
 CellChangeTimes->{{3.4746407069003468`*^9, 3.4746407074631634`*^9}, {
  3.4746517355846276`*^9, 3.474651775078055*^9}, {3.474651873249216*^9, 
  3.4746519315832577`*^9}, {3.4746519888081093`*^9, 3.4746520902912197`*^9}, {
  3.474652220472679*^9, 3.474652222972263*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "In the MATLAB code, the ",
 StyleBox["unique()", "Code",
  FontFamily->"Consolas",
  FontWeight->"Plain"],
 " function is used to generate a set of indices that map from the image \
pixels to the unmixed image ",
 StyleBox["via",
  FontSlant->"Italic"],
 " the H matrix."
}], "Item1Paragraph",
 CellChangeTimes->{{3.4743722261655645`*^9, 3.47437224418511*^9}, {
  3.4743722899138083`*^9, 3.4743723296724577`*^9}, {3.474372435881908*^9, 
  3.474372483716155*^9}, {3.4743728194441547`*^9, 3.4743728740273924`*^9}, {
  3.474377118020821*^9, 3.474377118020821*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does not have a function built in that provides identical functionality. \
However, such a function can be constructed easily. (This implementation \
comes from \"Timo\" in answer to a question on Stack Overflow at ",
 ButtonBox["http://stackoverflow.com/questions/2203737/does-mathematica-have-\
a-function-equivalent-to-matlabs-unique-function",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://stackoverflow.com/questions/2203737/does-mathematica-have-a-\
function-equivalent-to-matlabs-unique-function"], None},
  ButtonNote->
   "http://stackoverflow.com/questions/2203737/does-mathematica-have-a-\
function-equivalent-to-matlabs-unique-function"],
 "."
}], "Item1Paragraph",
 CellChangeTimes->{{3.4743722261655645`*^9, 3.47437224418511*^9}, {
  3.4743722899138083`*^9, 3.4743723296724577`*^9}, {3.474372435881908*^9, 
  3.474372483716155*^9}, {3.4743728194441547`*^9, 3.4743728740273924`*^9}, {
  3.474377118020821*^9, 3.474377120911354*^9}, {3.474652722232922*^9, 
  3.474652730403437*^9}}]
}, Open  ]],

Cell["\<\
You can easily build similar functionality yourself with Mathematica's \
Position[]. E.g. given a list of numbers you could do the following:

In[1] := A = {1, 5, 2, 3, 7, 3, 2, 8, 6, 5, 9, 2, 1};
In[2] := {#, Flatten[Position[A, #]]} & /@ Union[A]
Out[2]:= {{1, {1, 13}}, {2, {3, 7, 12}}, {3, {4, 6}}, {5, {2, 10}}, {6, {9}}, \
{7, {5}}, {8, {8}}, {9, {11}}}

to get the list of unique elements and the indices of where they appear in \
the original list. To replicate exactly the functionality of Matlab's \
Unique(), especially for

[b,m,n] = unique(A)

you need

b = Union[A];
m = Last[Position[A, #]] & /@ b // Flatten;
n = Position[b, #] & /@ A // Flatten;

which now provide the desired behavior

In[1] := A[[#]] & /@ m == b
Out[1]:= True

In[2] := b[[#]] & /@ n == A
Out[2]:= True\
\>", "Program",
 CellChangeTimes->{{3.474387108271678*^9, 3.4743871129121547`*^9}}],

Cell["\<\
If we need the indices that map between the reduced and original matrix, we \
can define the function: \
\>", "Item1Paragraph",
 CellChangeTimes->{{3.4744085938755827`*^9, 3.4744086273688416`*^9}, {
  3.474408982161265*^9, 3.4744089864980726`*^9}, {3.4744093304318767`*^9, 
  3.474409335782686*^9}, {3.474804292268394*^9, 3.4748042951745324`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"uniqueLast", "[", "a_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", "tmp", " ", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Return", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"tmp", " ", "=", " ", 
        RowBox[{"Union", "[", "a", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Last", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"a", ",", " ", "#"}], "]"}], "]"}], " ", "&"}], " ", "/@",
          " ", "tmp"}], " ", "//", "Flatten"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{"tmp", ",", " ", "#"}], "]"}], " ", "&"}], " ", "/@", " ", 
         "a"}], " ", "//", "Flatten"}]}], "}"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.474374687168406*^9, 3.4743747398382587`*^9}, {
  3.474374842676222*^9, 3.4743750327413645`*^9}, {3.4743751985578156`*^9, 
  3.474375227102539*^9}, {3.474375283426338*^9, 3.474375306971405*^9}, {
  3.4743755090808554`*^9, 3.474375545155979*^9}, {3.4743755798093452`*^9, 
  3.474375581215479*^9}, {3.4746533569085445`*^9, 3.474653359658087*^9}, {
  3.4746533955271173`*^9, 3.4746533962613697`*^9}, {3.4748038424665117`*^9, 
  3.4748038456587243`*^9}, {3.4748039919215155`*^9, 3.4748040083833165`*^9}, {
  3.4748042421296945`*^9, 3.4748042431452804`*^9}, {3.474804832218279*^9, 
  3.4748048353876977`*^9}, {3.474804974698647*^9, 3.4748049754480467`*^9}, {
  3.474805539161253*^9, 3.4748055402384396`*^9}}],

Cell["\<\
Reproducing the example from the web page with the 'last' occurence behavior:\
\>", "Item1Paragraph",
 CellChangeTimes->{{3.474652959459066*^9, 3.4746529852985153`*^9}, {
  3.474659129512944*^9, 3.474659132390686*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "=", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "1", ",", "5", ",", "6", ",", "2", ",", "3", ",", "3", ",", "9", 
    ",", "8", ",", "6", ",", "2", ",", "4"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.4743108248655577`*^9, 3.474310865280056*^9}, 
   3.474387121693124*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "5", ",", "6", ",", "2", ",", "3", ",", "3", ",", "9", 
   ",", "8", ",", "6", ",", "2", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{
  3.474310868973938*^9, 3.474373906050234*^9, 3.474375253819237*^9, 
   3.4743871325834*^9, 3.474633994744502*^9, 3.474652879206797*^9, 
   3.4746530587081733`*^9, 3.474653365750823*^9, 3.4746534013542724`*^9, 
   3.474734885064044*^9, 3.474802019914029*^9, 3.474803729148302*^9, 
   3.4748037751321115`*^9, 3.4748038522622223`*^9, 3.4748040137193184`*^9, 
   3.4748042535042577`*^9, 3.474804842304212*^9, 3.474804990732684*^9, 
   3.474805431941814*^9, 3.47480555083858*^9, 3.4748056546075563`*^9, {
   3.474807599111842*^9, 3.474807618552641*^9}, 3.474808263421955*^9, 
   3.474808314639279*^9, 3.4748097948041525`*^9, 3.474814136532057*^9, 
   3.4748145213337655`*^9, 3.474814597610071*^9, {3.4748152033485923`*^9, 
   3.474815228580577*^9}, 3.474820847824815*^9, 3.474821533072521*^9, {
   3.474829587085075*^9, 3.474829635107489*^9}, 3.4748303578466744`*^9, 
   3.474830468396036*^9, 3.474830564806815*^9, 3.4748321307609606`*^9, 
   3.474901282071253*^9, 3.4749016032853994`*^9, 3.4749120247353473`*^9, 
   3.474916445170186*^9, 3.474917011722658*^9, 3.474974195288859*^9, 
   3.4749784941590695`*^9, 3.4749872415678525`*^9, 3.4749882247668343`*^9, 
   3.4749990167731643`*^9, 3.474999471679704*^9, 3.4749996897937093`*^9, 
   3.4750007799845853`*^9, 3.475001445079342*^9, 3.475002656510393*^9, 
   3.5250117228840494`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"b", ",", " ", "m", ",", " ", "n"}], "}"}], " ", "=", 
  RowBox[{"uniqueLast", "[", "a", "]"}]}]], "Input",
 CellChangeTimes->{{3.474375109235979*^9, 3.474375112470126*^9}, {
  3.4743753383283715`*^9, 3.4743753462808857`*^9}, {3.474653043773159*^9, 
  3.474653045694714*^9}, {3.4746531348986177`*^9, 3.474653136304634*^9}, {
  3.4748042468013897`*^9, 3.4748042479107227`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "8", ",", 
     "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "11", ",", "7", ",", "12", ",", "3", ",", "10", ",", "9", ",", 
     "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "5", ",", "6", ",", "2", ",", "3", ",", "3", ",", "8",
      ",", "7", ",", "6", ",", "2", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.474375113563799*^9, {3.4743752390547466`*^9, 3.474375258615744*^9}, {
   3.4743752910507526`*^9, 3.4743753119241495`*^9}, 3.4743753473276806`*^9, {
   3.474375521657934*^9, 3.4743755503274236`*^9}, 3.47437558552762*^9, 
   3.4743871383175917`*^9, 3.4746339947757254`*^9, 3.474652882518746*^9, 
   3.4746530618482757`*^9, 3.474653137679405*^9, 3.474653367234951*^9, 
   3.4746534030258694`*^9, 3.474734885079652*^9, 3.474802019929553*^9, 
   3.474803729163906*^9, 3.4748037751633186`*^9, 3.4748038546876783`*^9, 
   3.4748040151589437`*^9, 3.474804254566717*^9, 3.474804846488469*^9, 
   3.474804992403222*^9, 3.4748054319730372`*^9, 3.474805551853321*^9, 
   3.4748056546231675`*^9, {3.474807599143072*^9, 3.474807618583872*^9}, 
   3.4748082634375744`*^9, 3.474808314670519*^9, 3.474809794835394*^9, 
   3.474814136563301*^9, 3.4748145213650074`*^9, 3.4748145976413126`*^9, {
   3.474815203379859*^9, 3.4748152285962105`*^9}, 3.474820847856064*^9, 
   3.4748215331037693`*^9, {3.474829587116177*^9, 3.474829635138592*^9}, 
   3.4748303578778853`*^9, 3.474830468427247*^9, 3.474830564838026*^9, 
   3.4748321307765684`*^9, 3.4749012821025047`*^9, 3.474901603316631*^9, 
   3.474912024766589*^9, 3.474916445201432*^9, 3.4749170117539043`*^9, 
   3.474974195320095*^9, 3.4749784941903086`*^9, 3.474987241583446*^9, 
   3.474988225924905*^9, 3.4749990168043995`*^9, 3.4749994716953216`*^9, 
   3.474999689809327*^9, 3.4750007800158663`*^9, 3.4750014450949774`*^9, 
   3.4750026565416627`*^9, 3.5250117229308496`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["b"], "Input",
 CellChangeTimes->{3.474375363467066*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "8", ",", "9"}],
   "}"}]], "Output",
 CellChangeTimes->{
  3.4743755337350545`*^9, 3.4743755882930145`*^9, 3.474387140551895*^9, 
   3.4746339948069487`*^9, 3.4746528861275206`*^9, 3.4746534045412416`*^9, 
   3.4747348851108675`*^9, 3.474802019960602*^9, 3.474803729195113*^9, 
   3.4748037751945257`*^9, 3.4748038561742477`*^9, 3.474804016723754*^9, 
   3.4748042557229223`*^9, 3.4748048481902757`*^9, 3.474804993933247*^9, 
   3.47480543200426*^9, 3.4748055538984146`*^9, 3.4748056546543903`*^9, {
   3.474807599174302*^9, 3.474807618615102*^9}, 3.474808263468814*^9, 
   3.474808314686138*^9, 3.4748097948666344`*^9, 3.4748141365789237`*^9, 
   3.47481452139625*^9, 3.4748145976569333`*^9, {3.474815203411125*^9, 
   3.4748152286274767`*^9}, 3.474820847887313*^9, 3.4748215331350174`*^9, {
   3.4748295871472797`*^9, 3.4748296351541433`*^9}, 3.4748303579090967`*^9, 
   3.4748304684584584`*^9, 3.4748305648692374`*^9, 3.4748321308077846`*^9, 
   3.4749012821337566`*^9, 3.4749016033478613`*^9, 3.4749120247978315`*^9, 
   3.4749164452170553`*^9, 3.4749170117695274`*^9, 3.4749741953357134`*^9, 
   3.474978494221547*^9, 3.4749872416146326`*^9, 3.474988227442916*^9, 
   3.474999016835634*^9, 3.474999471726557*^9, 3.474999689840562*^9, 
   3.4750007800315065`*^9, 3.4750014451262484`*^9, 3.4750026565572977`*^9, 
   3.5250117229620495`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["m"], "Input",
 CellChangeTimes->{3.474375402885913*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "11", ",", "7", ",", "12", ",", "3", ",", "10", ",", "9", ",", 
   "8"}], "}"}]], "Output",
 CellChangeTimes->{
  3.474375405073245*^9, 3.4743755936831913`*^9, 3.4743871415674877`*^9, 
   3.47463399482256*^9, 3.4746528875804033`*^9, 3.4746534057597895`*^9, 
   3.4747348851264753`*^9, 3.4748020199761257`*^9, 3.4748037292263203`*^9, 
   3.4748037752101297`*^9, 3.4748038572696147`*^9, 3.4748040180851383`*^9, 
   3.474804256832255*^9, 3.4748048500013723`*^9, 3.4748049952290845`*^9, 
   3.4748054320198717`*^9, 3.4748055551317153`*^9, 3.4748056546700015`*^9, {
   3.474807599205532*^9, 3.474807618646332*^9}, 3.474808263500054*^9, 
   3.4748083147173777`*^9, 3.474809794897876*^9, 3.474814136610168*^9, 
   3.474814521427492*^9, 3.4748145976881742`*^9, {3.4748152034267583`*^9, 
   3.474815228658743*^9}, 3.474820847902937*^9, 3.474821533166266*^9, {
   3.4748295871628313`*^9, 3.4748296351852455`*^9}, 3.4748303579247017`*^9, 
   3.474830468474064*^9, 3.474830564884843*^9, 3.474832130823393*^9, 
   3.4749012821493826`*^9, 3.4749016033790927`*^9, 3.4749120248134522`*^9, 
   3.4749164452483015`*^9, 3.474917011800773*^9, 3.4749741953669496`*^9, 
   3.4749784942527857`*^9, 3.474987241645819*^9, 3.474988228491439*^9, 
   3.474999016866869*^9, 3.4749994717577915`*^9, 3.4749996898717966`*^9, 
   3.475000780062788*^9, 3.475001445141884*^9, 3.4750026565885673`*^9, 
   3.5250117230088496`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["n"], "Input",
 CellChangeTimes->{3.474375410682189*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "5", ",", "6", ",", "2", ",", "3", ",", "3", ",", "8", 
   ",", "7", ",", "6", ",", "2", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{
  3.474375416259886*^9, 3.474375594886216*^9, 3.4743871428330717`*^9, 
   3.4746339948537827`*^9, 3.4746528890176644`*^9, 3.4746534068533573`*^9, 
   3.474734885157691*^9, 3.4748020199916506`*^9, 3.4748037292419243`*^9, 
   3.474803775241337*^9, 3.4748038586779437`*^9, 3.4748040192430973`*^9, 
   3.474804258019709*^9, 3.474804851718791*^9, 3.474804996774722*^9, 
   3.474805432051095*^9, 3.474805556380627*^9, 3.4748056547012243`*^9, {
   3.4748075992211475`*^9, 3.4748076186775618`*^9}, 3.4748082635312934`*^9, 
   3.4748083147486176`*^9, 3.4748097949291162`*^9, 3.4748141366414127`*^9, 
   3.4748145214431133`*^9, 3.4748145977194157`*^9, {3.474815203458025*^9, 
   3.4748152286743765`*^9}, 3.474820847934186*^9, 3.47482153318189*^9, {
   3.4748295871939335`*^9, 3.474829635216348*^9}, 3.4748303579559126`*^9, 
   3.474830468505275*^9, 3.474830564916054*^9, 3.4748321308546085`*^9, 
   3.474901282180634*^9, 3.4749016034103236`*^9, 3.474912024844694*^9, 
   3.4749164452639246`*^9, 3.474917011832019*^9, 3.4749741953825674`*^9, 
   3.474978494268405*^9, 3.4749872416614122`*^9, 3.474988229508663*^9, 
   3.474999016898104*^9, 3.4749994717890267`*^9, 3.4749996899030313`*^9, 
   3.4750007800940685`*^9, 3.4750014451731553`*^9, 3.475002656619837*^9, 
   3.5250117230868497`*^9}]
}, Open  ]],

Cell["\<\
Verify that the mappings are correct. Use the second index to map from the \
reduced array back to the original array.\
\>", "Text",
 CellChangeTimes->{{3.4748042211929984`*^9, 3.474804230505141*^9}, {
  3.4748048962770596`*^9, 3.4748049141689844`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"b", "[", 
    RowBox[{"[", "#", "]"}], "]"}], " ", "&"}], " ", "/@", " ", 
  "n"}]], "Input",
 CellChangeTimes->{{3.474804129890813*^9, 3.4748041471645913`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "5", ",", "6", ",", "2", ",", "3", ",", "3", ",", "9", 
   ",", "8", ",", "6", ",", "2", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{
  3.4748041497738657`*^9, 3.474804261019594*^9, 3.4748048556376286`*^9, 
   3.4748050025981846`*^9, 3.4748054320823183`*^9, 3.474805562141234*^9, 
   3.474805654716836*^9, {3.4748075992523775`*^9, 3.4748076187087927`*^9}, 
   3.474808263562533*^9, 3.474808314779857*^9, 3.4748097949603577`*^9, 
   3.474814136672657*^9, 3.474814521474355*^9, 3.474814597750657*^9, {
   3.474815203489291*^9, 3.4748152287056427`*^9}, 3.474820847965435*^9, 
   3.474821533213138*^9, {3.4748295872250366`*^9, 3.474829635247451*^9}, 
   3.474830357987124*^9, 3.4748304685364857`*^9, 3.4748305649472647`*^9, 
   3.4748321308702173`*^9, 3.474901282211886*^9, 3.474901603441555*^9, 
   3.4749120248759365`*^9, 3.4749164452951703`*^9, 3.4749170118476424`*^9, 
   3.474974195413804*^9, 3.474978494299644*^9, 3.4749872416925993`*^9, 
   3.4749882329359255`*^9, 3.4749990169137216`*^9, 3.474999471820262*^9, 
   3.474999689934267*^9, 3.47500078012535*^9, 3.475001445204426*^9, 
   3.4750026566354713`*^9, 3.5250117231180496`*^9}]
}, Open  ]],

Cell["\<\
Use the first index to map from the original array to the reduced array.\
\>", "Text",
 CellChangeTimes->{{3.474804917915984*^9, 3.4748049344964595`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"a", "[", 
    RowBox[{"[", "#", "]"}], "]"}], "&"}], "/@", "m"}]], "Input",
 CellChangeTimes->{{3.474804174851028*^9, 3.4748041969439297`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "8", ",", "9"}],
   "}"}]], "Output",
 CellChangeTimes->{{3.474804188288012*^9, 3.4748042007562833`*^9}, 
   3.4748042623007946`*^9, 3.474804859525234*^9, 3.474805006641822*^9, 
   3.4748054321135416`*^9, 3.474805564966897*^9, 3.474805654748059*^9, {
   3.474807599283608*^9, 3.4748076187400227`*^9}, 3.4748082635781527`*^9, 
   3.474808314811097*^9, 3.4748097949915986`*^9, 3.4748141367039013`*^9, 
   3.4748145215055976`*^9, 3.4748145977818985`*^9, {3.4748152035205574`*^9, 
   3.474815228736909*^9}, 3.474820847996684*^9, 3.4748215332443867`*^9, {
   3.474829587256139*^9, 3.4748296352785535`*^9}, 3.474830358018335*^9, 
   3.4748304685520916`*^9, 3.474830564978476*^9, 3.474832130885825*^9, 
   3.4749012822431374`*^9, 3.474901603472786*^9, 3.474912024907178*^9, 
   3.4749164453264165`*^9, 3.474917011878888*^9, 3.474974195429422*^9, 
   3.474978494330883*^9, 3.4749872417237854`*^9, 3.4749882359719477`*^9, 
   3.474999016944957*^9, 3.4749994718358793`*^9, 3.474999689965502*^9, 
   3.4750007801409903`*^9, 3.4750014452200613`*^9, 3.4750026566667414`*^9, 
   3.52501172316485*^9}]
}, Open  ]],

Cell[TextData[{
 "Note the use of the ",
 StyleBox["Union[]", "Code"],
 " function. This sorts the results, which may not be needed and can take \
substantially longer.  An alternative for this application could use the ",
 StyleBox["DeleteDuplicates[]", "Code"],
 " function to perform a similar task without sorting. For this application, \
it could also be advantageous to simply pass the image into the function. ",
 StyleBox["THIS STILL DOESN'T LOOK RIGHT! WHY SUBTRACT EACH PIXEL FROM 255?",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.474659152878955*^9, 3.4746592943262105`*^9}, {
  3.474659391196813*^9, 3.474659400480261*^9}, {3.4748050423476095`*^9, 
  3.4748050551498594`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"uniqueImgRows", "[", "img_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", 
     RowBox[{"data", ",", "tmp"}], " ", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Return", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"data", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"255", "-", 
            RowBox[{"ImageData", "[", 
             RowBox[{"img", ",", " ", "\"\<Byte\>\""}], "]"}]}], ",", "1"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"tmp", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", "data", "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Last", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"data", ",", " ", "#"}], "]"}], "]"}], " ", "&"}], " ", "/@",
          " ", "tmp"}], " ", "//", "Flatten"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{"tmp", ",", " ", "#"}], "]"}], " ", "&"}], " ", "/@", " ", 
         "data"}], " ", "//", "Flatten"}]}], "}"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.474408689815751*^9, {3.4744087737916985`*^9, 3.4744088837094917`*^9}, {
   3.4744091157910995`*^9, 3.4744091163683004`*^9}, {3.4744091641043844`*^9, 
   3.4744092261612935`*^9}, {3.4746593400597067`*^9, 3.474659342044552*^9}, {
   3.4748037224699616`*^9, 3.4748037233437634`*^9}, {3.474803765177015*^9, 
   3.4748037683289423`*^9}, {3.4748051159137096`*^9, 3.4748051342896223`*^9}, 
   3.474805276059988*^9, {3.474805307314411*^9, 3.47480533482205*^9}, {
   3.474805527218532*^9, 3.4748055278898225`*^9}, {3.4748057617954073`*^9, 
   3.474805766275851*^9}, {3.474806023318104*^9, 3.4748060310778227`*^9}, {
   3.474806123724165*^9, 3.4748061440875483`*^9}, {3.474808256143128*^9, 
   3.474808256846019*^9}, {3.474808300425261*^9, 3.4748083089849114`*^9}, {
   3.4748144995267096`*^9, 3.4748145004171124`*^9}, {3.4748145808959217`*^9, 
   3.4748145821611986`*^9}, 3.474830353086997*^9, {3.474830541445382*^9, 
   3.4748305428810883`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"b", ",", " ", "m", ",", " ", "n"}], "}"}], " ", "=", " ", 
  RowBox[{"uniqueImgRows", "[", "smlImg", "]"}]}]], "Input",
 CellChangeTimes->{{3.4744089010411224`*^9, 3.4744089211807575`*^9}, {
  3.474409397761595*^9, 3.4744094378692656`*^9}, {3.474805138536222*^9, 
  3.4748051438132467`*^9}, {3.4748057242500114`*^9, 3.474805751179676*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "255", ",", "127"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"127", ",", "127", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"63", ",", "63", ",", "63"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"295", ",", "301", ",", "304", ",", "182"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", 
     ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "3", 
     ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", 
     ",", "2", ",", "2", ",", "2", ",", "2", ",", "3", ",", "3", ",", "3", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", 
     ",", "2", ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", 
     ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", 
     ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "3", ",", "3", 
     ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "4", ",", "4", ",", "2", ",", "2", 
     ",", "2", ",", "2", ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "2", ",", "2", 
     ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "4", ",", "4", 
     ",", "4", ",", "4", ",", "2", ",", "2", ",", "2", ",", "2", ",", "3", 
     ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "4", ",", "4", ",", "2", 
     ",", "2", ",", "2", ",", "2", ",", "2", ",", "3", ",", "3", ",", "3", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", 
     ",", "2", ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", 
     ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", 
     ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "3", ",", "3", 
     ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", 
     ",", "2", ",", "2", ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", 
     ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "3", 
     ",", "3", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.4744089228655605`*^9, 3.4744091212667093`*^9, {3.4744092020904512`*^9, 
   3.474409230872502*^9}, {3.4744094034712048`*^9, 3.474409438836467*^9}, 
   3.4746339943073807`*^9, 3.4746534096966343`*^9, 3.4746593490305805`*^9, 
   3.474734885204514*^9, 3.4748020200537477`*^9, 3.474803729288735*^9, 
   3.474803775272544*^9, {3.4748051454837847`*^9, 3.474805150589072*^9}, 
   3.4748052816801643`*^9, 3.474805341316476*^9, 3.474805432175988*^9, 
   3.4748055780024166`*^9, 3.4748056547792816`*^9, {3.4748057311814733`*^9, 
   3.474805775580186*^9}, 3.474806043195525*^9, 3.4748061514553623`*^9, {
   3.474807599314838*^9, 3.4748076187712526`*^9}, 3.4748082636250124`*^9, 
   3.4748083148423367`*^9, 3.47480979503846*^9, 3.4748141367351456`*^9, {
   3.4748145129764767`*^9, 3.4748145215368395`*^9}, {3.4748145861913395`*^9, 
   3.474814597828761*^9}, {3.474815203551824*^9, 3.4748152287681756`*^9}, 
   3.474820848027933*^9, 3.474821533275635*^9, {3.4748295873027925`*^9, 
   3.474829635325207*^9}, 3.4748303580495462`*^9, 3.4748304685833025`*^9, 
   3.4748305650096865`*^9, 3.4748321309170413`*^9, 3.4749012822743893`*^9, 
   3.474901603504017*^9, 3.4749120249384203`*^9, 3.474916445357662*^9, 
   3.4749170119101343`*^9, 3.4749741954918947`*^9, 3.474978494377741*^9, 
   3.4749872417549725`*^9, {3.4749881452199173`*^9, 3.474988155423457*^9}, 
   3.4749882441566887`*^9, 3.4749990169761915`*^9, 3.4749994718827314`*^9, 
   3.4749996899967365`*^9, 3.475000780187912*^9, 3.4750014452513323`*^9, 
   3.4750026566980104`*^9, 3.52501172321165*^9}]
}, Open  ]],

Cell["\<\
Again, verify that the original image data can be recovered from the reduced \
rows and second index.\
\>", "Text",
 CellChangeTimes->{{3.4744089511328106`*^9, 3.4744089769040556`*^9}, {
  3.4744093835499697`*^9, 3.4744093835499697`*^9}, {3.474805162922723*^9, 
  3.474805189837121*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"b", "[", 
     RowBox[{"[", "#", "]"}], "]"}], " ", "&"}], " ", "/@", " ", "n"}], " ", 
  "\[Equal]", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{"255", "-", 
     RowBox[{"ImageData", "[", 
      RowBox[{"smlImg", ",", " ", "\"\<Byte\>\""}], "]"}]}], ",", " ", "1"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.47480520885205*^9, 3.4748052689254866`*^9}, 
   3.4748053608621993`*^9, {3.4748056184047194`*^9, 3.4748056396518345`*^9}, {
   3.4748057893805747`*^9, 3.474805791347598*^9}, 3.4748145074778495`*^9, {
   3.474814590268342*^9, 3.474814591471136*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.474805642305773*^9, 3.4748056548105044`*^9}, {
   3.474805778983449*^9, 3.4748057951099215`*^9}, {3.4748075993460684`*^9, 
   3.4748076188024826`*^9}, 3.474808263656252*^9, 3.474808314873576*^9, 
   3.4748097952102857`*^9, 3.47481413676639*^9, {3.474814508883749*^9, 
   3.474814521568082*^9}, {3.4748145929238615`*^9, 3.4748145978443813`*^9}, {
   3.4748152035830903`*^9, 3.4748152287994423`*^9}, 3.474820848059182*^9, 
   3.474821533306883*^9, {3.4748295873338957`*^9, 3.47482963535631*^9}, 
   3.474830358080757*^9, 3.4748304686145134`*^9, 3.4748305650408983`*^9, 
   3.4748321309326496`*^9, 3.474901282305641*^9, 3.474901603535248*^9, 
   3.474912024969662*^9, 3.4749164453732853`*^9, 3.4749170119413805`*^9, 
   3.474974195507512*^9, 3.47497849440898*^9, 3.4749872417861586`*^9, 
   3.4749882486324744`*^9, 3.4749990170074267`*^9, 3.474999471913967*^9, 
   3.4749996900279713`*^9, 3.4750007802035522`*^9, 3.4750014452826033`*^9, 
   3.4750026567292805`*^9, 3.52501172325845*^9}]
}, Open  ]],

Cell["\<\
Note that these functions do not check that there are actually exactly three \
color channels in the image.\
\>", "Text",
 CellChangeTimes->{{3.4744089511328106`*^9, 3.4744089769040556`*^9}, {
  3.4744093835499697`*^9, 3.4744093835499697`*^9}, {3.474805162922723*^9, 
  3.4748051898215094`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["function processImage(readpath, writepath, params)", "Subsection",
 CellChangeTimes->{{3.4743773886241393`*^9, 3.4743773992177534`*^9}, {
  3.4743774971852493`*^9, 3.4743774972008743`*^9}, {3.474387562382146*^9, 
  3.4743875789284916`*^9}, {3.4743877659537563`*^9, 3.4743877659537563`*^9}, {
  3.474637579462118*^9, 3.4746375919620385`*^9}}],

Cell[TextData[{
 "The ",
 StyleBox["processImage()", "Code"],
 " function, included below, loads the file indicated by the ",
 StyleBox["readpath", "Code"],
 " parameter, and calculates the unmixed weight channels, ",
 StyleBox["H", "Code"],
 " in the paper, and writes them to disk in the file indicated by ",
 StyleBox["writepath", "Code"],
 ". The ",
 StyleBox["params", "Code"],
 " parameter contains the color basis matrix ",
 StyleBox["W", "Code"],
 ". The code reshapes the image into three separate one-dimensional arrays, \
eliminating any duplicate rows from the image. The code always does a linear \
unmixing process by calling the ",
 StyleBox["findH()", "Code"],
 " function. (See below.) If ",
 StyleBox["params", "Code"],
 " includes a flag indicating that an unsupervised unmixing is desired, such \
an unmixing is performed by calling the ",
 StyleBox["findWH()", "Code"],
 " function. (See below.) Only one version of the ",
 StyleBox["H", "Code"],
 " matrix is written regardless. The function is also set up to create copies \
of the unmixed images (not just the weights) if a line calling ",
 StyleBox["reconIH()", "Code"],
 " is uncommented, though the unmixed images do not appear to be saved to \
disk anywhere."
}], "Text",
 CellChangeTimes->{{3.4743877666099854`*^9, 3.4743878013120003`*^9}, {
  3.474387854904035*^9, 3.474387880340721*^9}, {3.474388088302816*^9, 
  3.4743885655375443`*^9}}],

Cell["\<\
function processImage( readpath, writepath, params)
% PROCESSIMAGE( READPATH, WRITEPATH, PARAMS)

% Copyright (C) 2006  Murphy Lab
% Carnegie Mellon University
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published
% by the Free Software Foundation; either version 2 of the License,
% or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
% General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
% 02110-1301, USA.
%
% For additional information visit http://murphylab.web.cmu.edu or
% send email to murphy@cmu.edu


if exist( writepath,'file')
    return
end

prp = writepath;
prp((prp == '/') | (prp == '.')) = '_';
pr = ['tmp/processing_' prp '.txt'];
if ~exist( pr,'file')
    fr = fopen( pr, 'w');
else
    return
end

% Always perform linear unmixing...
I = imread( readpath);
W = params.W;

s = size(I);
[V i j] = unique( 255-reshape( I, [s(1)*s(2) s(3)]), 'rows');
V = unique(V,'rows');

% LIN
H = findH( V, W);

% ...Note images without enough staining
% J = reconIH( I, H, j);
% [c b] = imhist(J(:,:,1));
% [a ind] = max(c);
% J(:,:,1) = J(:,:,1) - b(ind);
% [c b2] = imhist(J(:,:,2));
% [a ind2] = max(c);
% J(:,:,2) = J(:,:,2) - b2(ind2);
% ratio = sum(sum(J(:,:,2))) / sum(sum(J(:,:,1)));
% 
% if ratio<.5
%     imwrite( 0, writepath, 'comment', readpath);
%     fclose(fr);
%     delete(pr);
%     return
% end

if strcmp( params.UMETHOD,'nmf')
    [W,H] = findWH( V, params);
    % J = reconIH( I, H, j);
end

imwrite( H, writepath, 'comment', readpath);

fclose(fr);
delete(pr);

return\
\>", "Program",
 CellChangeTimes->{{3.4743887739683743`*^9, 3.4743887759995594`*^9}}],

Cell["\<\
Note: In the remainder of these notes, when a copy of the MATLAB code is \
included, the copyright notice will not be included for the sake of brevity. \
Those files contain the same copyright as in the file above.\
\>", "Text",
 CellChangeTimes->{{3.4743780461638336`*^9, 3.474378118069623*^9}, {
  3.4743782906622686`*^9, 3.4743782906778936`*^9}, {3.474393371205151*^9, 
  3.474393371220688*^9}}],

Cell[TextData[{
 "The default color basis matrix is obtained from the disk file \"",
 StyleBox["Wbasis.mat", "Code"],
 "\"."
}], "Text",
 CellChangeTimes->{{3.474393373069603*^9, 3.474393391527678*^9}, {
  3.474394008685096*^9, 3.474394008685096*^9}, {3.4743948050919943`*^9, 
  3.474394842013985*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "wPath", " ", "=", 
   "\"\<C:\\\\projects\\\\color-deconvolution\\\\Images\\\\Wbasis.mat\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.4743940891225705`*^9, {3.4743941202817707`*^9, 3.4743941317016172`*^9}, {
   3.52501159795903*^9, 3.525011606429845*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"w", " ", "=", " ", 
  RowBox[{"Import", "[", "wPath", "]"}]}]], "Input",
 CellChangeTimes->{{3.4743941367805667`*^9, 3.474394151316334*^9}, {
  3.474394243443826*^9, 3.474394247137163*^9}, {3.4743945644409213`*^9, 
  3.4743945823171453`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"57.10736846923828`", ",", "43.67302703857422`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"56.532249450683594`", ",", "55.59086608886719`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"42.48149871826172`", ",", "64.1858901977539`"}], "}"}]}], "}"}],
   "}"}]], "Output",
 CellChangeTimes->{
  3.4743941964660144`*^9, 3.4743942483994427`*^9, {3.474394566279975*^9, 
   3.474394584467903*^9}, 3.4744095678018937`*^9, 3.4744191422873125`*^9, 
   3.474633993979539*^9, 3.4747348852981606`*^9, 3.474802020395282*^9, 
   3.4748037293355455`*^9, 3.474803775319355*^9, 3.4748054323321037`*^9, 
   3.4748056548573384`*^9, {3.474807599392914*^9, 3.4748076188649435`*^9}, 
   3.474808263703111*^9, 3.4748083149204354`*^9, 3.474809795319629*^9, 
   3.474814136828879*^9, 3.4748145216149454`*^9, 3.474814597906864*^9, {
   3.47481520362999*^9, 3.4748152288463416`*^9}, 3.4748208481060553`*^9, 
   3.474821533353755*^9, {3.4748295873805494`*^9, 3.4748296354029636`*^9}, 
   3.4748303581275735`*^9, 3.474830468676935*^9, 3.474830565087714*^9, 
   3.4748321309794736`*^9, 3.474901282383771*^9, 3.474901603613325*^9, 
   3.474912025047767*^9, 3.4749164454514008`*^9, 3.4749170120038724`*^9, 
   3.4749741956636934`*^9, 3.474978494455838*^9, 3.4749872418641253`*^9, 
   3.474988259994084*^9, 3.4749990170698967`*^9, 3.4749994719608192`*^9, 
   3.4749996900748243`*^9, 3.475000780266114*^9, 3.4750014453295097`*^9, 
   3.475002656776185*^9, 3.5250117234300504`*^9}]
}, Open  ]],

Cell["\<\
These are the default color basis values for Hematoxylin and DAB according to \
the paper. However, for our use, the list is one level too deep. We want\
\>", "Text",
 CellChangeTimes->{{3.4743949207217703`*^9, 3.4743949525789413`*^9}, {
   3.474397076026006*^9, 3.474397247799312*^9}, {3.4743975274462447`*^9, 
   3.4743976387676296`*^9}, {3.474397737116419*^9, 3.4743979262576265`*^9}, {
   3.4743989986023664`*^9, 3.4743990220186563`*^9}, 3.475000381353487*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"w", "=", 
  RowBox[{"First", "[", "w", "]"}]}]], "Input",
 CellChangeTimes->{{3.474399035151188*^9, 3.4743990600075164`*^9}, {
  3.474419161225746*^9, 3.474419166420555*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"57.10736846923828`", ",", "43.67302703857422`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"56.532249450683594`", ",", "55.59086608886719`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"42.48149871826172`", ",", "64.1858901977539`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.474399051492502*^9, 3.474399062026702*^9}, 
   3.4744095706254983`*^9, {3.47441915213093*^9, 3.4744191681989584`*^9}, 
   3.4746339940107617`*^9, 3.474734885329376*^9, 3.4748020204263306`*^9, 
   3.4748037293667526`*^9, 3.474803775350562*^9, 3.4748054323477154`*^9, 
   3.4748056548885612`*^9, {3.474807599424144*^9, 3.4748076188961735`*^9}, 
   3.4748082637343507`*^9, 3.474808314951675*^9, 3.47480979535087*^9, 
   3.4748141368445005`*^9, 3.4748145216461873`*^9, 3.4748145979224854`*^9, {
   3.4748152036612563`*^9, 3.4748152288776083`*^9}, 3.474820848137305*^9, 
   3.474821533385003*^9, {3.474829587411652*^9, 3.4748296354340663`*^9}, 
   3.47483035817439*^9, 3.474830468692541*^9, 3.474830565118925*^9, 
   3.4748321310106897`*^9, 3.474901282399397*^9, 3.474901603644556*^9, 
   3.474912025063388*^9, 3.474916445467023*^9, 3.474917012035118*^9, 
   3.4749741956949296`*^9, 3.4749784944870768`*^9, 3.4749872419888716`*^9, 
   3.4749882627327642`*^9, 3.474999017085514*^9, 3.474999471992054*^9, 
   3.474999690106059*^9, 3.475000780297395*^9, 3.475001445360781*^9, 
   3.4750026567918196`*^9, 3.5250117234924507`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.4744191755153713`*^9, 3.4744191804137793`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"57.10736846923828`", "43.67302703857422`"},
     {"56.532249450683594`", "55.59086608886719`"},
     {"42.48149871826172`", "64.1858901977539`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.4744191819581823`*^9, 3.474633994026373*^9, 3.474734885360592*^9, 
   3.474802020441855*^9, 3.4748037293823566`*^9, 3.474803775381769*^9, 
   3.4748054323789387`*^9, 3.474805654904173*^9, {3.474807599455374*^9, 
   3.4748076189274035`*^9}, 3.4748082637499704`*^9, 3.4748083149672947`*^9, 
   3.4748097953821115`*^9, 3.4748141368757453`*^9, 3.4748145216774297`*^9, 
   3.4748145979537263`*^9, {3.4748152036768894`*^9, 3.4748152289088745`*^9}, 
   3.4748208481685534`*^9, 3.4748215334162517`*^9, {3.4748295874427547`*^9, 
   3.474829635465169*^9}, 3.4748303582056007`*^9, 3.474830468723752*^9, 
   3.4748305651501365`*^9, 3.474832131026298*^9, 3.4749012824306483`*^9, 
   3.474901603675787*^9, 3.4749120250946302`*^9, 3.474916445498269*^9, 
   3.4749170120663643`*^9, 3.4749741957105474`*^9, 3.4749784945183153`*^9, 
   3.4749872420200586`*^9, 3.474988263875185*^9, 3.4749990171167493`*^9, 
   3.474999472023289*^9, 3.4749996901372943`*^9, 3.475000780313036*^9, 
   3.4750014453920517`*^9, 3.475002656823089*^9, 3.5250117235392504`*^9}]
}, Open  ]],

Cell[TextData[{
 "To minimize global namespace pollution, we can create a function to get ",
 StyleBox["w", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.474820052178214*^9, 3.474820074505768*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getW", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"wPath", ",", " ", "w"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "wPath", " ", "=", " ", 
      "\"\<C:\\\\projects\\\\color-deconvolution\\\\Images\\\\Wbasis.mat\>\""}\
], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"First", "[", 
       RowBox[{"Import", "[", "wPath", "]"}], "]"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.4748200898178215`*^9, 3.4748201546438723`*^9}, {
  3.5250116245570765`*^9, 3.5250116314522886`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"w", " ", "=", 
  RowBox[{"getW", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.47482015845625*^9, 3.474820173658889*^9}, {
  3.47482021501694*^9, 3.4748202161106553`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"57.10736846923828`", ",", "43.67302703857422`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"56.532249450683594`", ",", "55.59086608886719`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"42.48149871826172`", ",", "64.1858901977539`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.4748201683153095`*^9, 3.4748201752369633`*^9}, 
   3.4748202183137093`*^9, 3.4748208482154274`*^9, 3.474821533463124*^9, {
   3.47482958750496*^9, 3.4748296355273743`*^9}, 3.4748303582524176`*^9, 
   3.4748304687705684`*^9, 3.474830565196953*^9, 3.4748321310731225`*^9, 
   3.474901282477526*^9, 3.4749016037226334`*^9, 3.474912025141493*^9, 
   3.4749164455451384`*^9, 3.474917012113233*^9, 3.47497419577302*^9, 
   3.474978494565174*^9, 3.4749872420668383`*^9, 3.474988270009828*^9, 
   3.474999017163602*^9, 3.474999472070142*^9, 3.474999690184147*^9, 
   3.475000780375598*^9, 3.4750014454389586`*^9, 3.4750026568699937`*^9, 
   3.5250117236016507`*^9}]
}, Open  ]],

Cell[TextData[{
 "The two calls to ",
 StyleBox["unique()", "Code"],
 " are somewhat puzzling. The code assumes that the images consist of three \
channels of 8-bit data. The first call to ",
 StyleBox["unique()", "Code"],
 " includes an embedded call to ",
 StyleBox["reshape()", "Code"],
 ". The ",
 StyleBox["reshape()", "Code"],
 " operation will reform the original data into a tall three column (one for \
each RGB color channel) matrix and create a new matrix by subtracting each \
element from 255 ",
 StyleBox["(WHY?)",
  FontWeight->"Bold"],
 ". When ",
 StyleBox["unique()", "Code"],
 " operates on this tall matrix, the ",
 StyleBox["'rows'", "Code"],
 " option will cause the function to eliminate duplicate RGB triples, a \
possible substantial reduction in data to be processed. It is not clear what \
the second call to ",
 StyleBox["unique()", "Code"],
 ", immediately after the first, would do unless the first call were somehow \
faulty, providing an incomplete reduction. Note that the mapping indices are \
not re-calculated in the second call."
}], "Text",
 CellChangeTimes->{{3.4743949207217703`*^9, 3.4743949525789413`*^9}, {
  3.474397076026006*^9, 3.474397247799312*^9}, {3.4743975274462447`*^9, 
  3.4743976387676296`*^9}, {3.474397737116419*^9, 3.4743979262576265`*^9}, {
  3.4743980220719585`*^9, 3.47439805200705*^9}, {3.4743981834257994`*^9, 
  3.474398217005886*^9}, {3.4743984670275545`*^9, 3.474398543244199*^9}, {
  3.4743986335419703`*^9, 3.4743986801351204`*^9}, {3.4743991979538803`*^9, 
  3.474399233751376*^9}, {3.474634068506583*^9, 3.474634097895506*^9}, {
  3.474806976961609*^9, 3.474806989393332*^9}, {3.474807080902028*^9, 
  3.4748071507564707`*^9}}],

Cell[TextData[{
 "The essential function of ",
 StyleBox["processImage()", "Code"],
 " can be stated in a single line:"
}], "Text",
 CellChangeTimes->{{3.474405627667624*^9, 3.474405632300832*^9}, {
  3.4744084170492725`*^9, 3.4744084409485145`*^9}, {3.474408575623551*^9, 
  3.4744085847963667`*^9}, {3.474735620230128*^9, 3.4747356598678503`*^9}},
 TextJustification->0.],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "junk", ",", " ", "reconIdx"}], "}"}], " ", "=", 
   " ", 
   RowBox[{"uniqueImgRows", "[", "smlImg", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.4747356673955817`*^9, 3.4747356962883267`*^9}, {
   3.474735758321831*^9, 3.4747357642412076`*^9}, 3.474998424620034*^9}],

Cell["The remaining work is selecting which subfunctions to call.", "Text",
 CellChangeTimes->{{3.474998445453779*^9, 3.4749984676306295`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["function H = findH (V, W)", "Subsection",
 CellChangeTimes->{{3.4743773886241393`*^9, 3.4743773992177534`*^9}, {
  3.4743774971852493`*^9, 3.4743774972008743`*^9}, {3.474387562382146*^9, 
  3.4743875789284916`*^9}}],

Cell[TextData[{
 "The function ",
 StyleBox["findH()", "Code"],
 " does a linear unmixing of of an image given a color basis matrix for the \
dyes in the image. The code from ",
 StyleBox["findH.m", "Code"],
 " is included below."
}], "Text",
 CellChangeTimes->{{3.4743775147319*^9, 3.4743775553251305`*^9}, {
  3.4743776354334803`*^9, 3.4743776376678267`*^9}, {3.4743777129637375`*^9, 
  3.4743777386509085`*^9}, {3.474377769119269*^9, 3.474377813462451*^9}}],

Cell["\<\
function H = findH( V, W)
% H = FINDH( V, W) linearly unmixes a set of N m-dimensional samples (Nxm \
matrix)
%   inputs: V, the original samples
%           W the color basis matrix, m-dimensioanl, r=rank (mxr)
%
%   outputs: H, the unmixed weight channels
% 
% Justin Newberg

% H = pinv(single(W))*single(V');
H = single(V)*pinv(single(W))';
H = H - min(H(:));
H = H / max(H(:))*255;
H = uint8(round(H));
\
\>", "Program",
 CellChangeTimes->{3.4743779003678913`*^9, 3.474388821185613*^9}],

Cell[TextData[{
 "In the code, the calls to ",
 StyleBox["single()", "Code"],
 " convert the arguments to single precision, presumably for reasons of \
speed. The ",
 StyleBox["pinv()", "Code"],
 " function calculates the Moore-Penrose pseudo-inverse of the argument. Of \
course, the ",
 StyleBox["'", "Code"],
 " operator returns the transpose of its argument."
}], "Text",
 CellChangeTimes->{{3.4743782913341393`*^9, 3.474378324505802*^9}, {
  3.474378374192984*^9, 3.474378394708478*^9}, {3.474378677441043*^9, 
  3.4743786959565496`*^9}, {3.4744095001757746`*^9, 3.4744095001757746`*^9}, {
  3.4744097663122425`*^9, 3.4744097663122425`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"h", " ", "=", 
   RowBox[{"v", ".", 
    RowBox[{"Transpose", "[", 
     RowBox[{"PseudoInverse", "[", "w", "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.4746346701099997`*^9, 3.4746346844840803`*^9}, {
  3.4746347676317654`*^9, 3.4746347711921225`*^9}, {3.474635111362791*^9, 
  3.474635120714739*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "h", "]"}]], "Input",
 CellChangeTimes->{{3.4746351309566045`*^9, 3.4746351473825283`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "1.1351335085630385`"}], "3.490088252612491`"},
     {"4.860909193755738`", 
      RowBox[{"-", "3.0762154776026174`"}]},
     {"0.6608170610341089`", "0.5232386620171747`"},
     {"0.`", "0.`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.4746351484147215`*^9, 3.4747348858756495`*^9, 3.474802020767865*^9, 
   3.474803729444771*^9, 3.4748037754441833`*^9, 3.4748054324413853`*^9, 
   3.4748056549666185`*^9, {3.4748075995178347`*^9, 3.4748076189898643`*^9}, 
   3.4748082638124495`*^9, 3.4748083150297737`*^9, 3.4748097954445934`*^9, 
   3.4748141369538565`*^9, 3.4748145217242928`*^9, 3.474814598016209*^9, {
   3.4748152037550554`*^9, 3.474815228971407*^9}, 3.4748208482779255`*^9, 
   3.4748215335256205`*^9, {3.474829587567165*^9, 3.4748296355895796`*^9}, 
   3.4748303583148394`*^9, 3.4748304688329906`*^9, 3.4748305652593746`*^9, 
   3.4748321311043386`*^9, 3.4749012825556555`*^9, 3.4749016037850957`*^9, 
   3.4749120252195983`*^9, 3.4749164456076307`*^9, 3.474917012175725*^9, 
   3.4749741960385275`*^9, 3.4749784946432705`*^9, 3.474987242238364*^9, 
   3.4749889183209553`*^9, 3.474999017210454*^9, 3.4749994721013765`*^9, 
   3.474999690230999*^9, 3.4750007804068785`*^9, 3.475001445485865*^9, 
   3.475002656901263*^9, 3.525011723648451*^9}]
}, Open  ]],

Cell["\<\
Scaling can be accomplished just as in the original function.\
\>", "Text",
 CellChangeTimes->{{3.474635488402589*^9, 3.4746355005733733`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", " ", "=", " ", 
  RowBox[{"h", " ", "-", 
   RowBox[{"Min", "[", "h", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.4746352075781937`*^9, 3.4746352097833347`*^9}, {
  3.474635295533617*^9, 3.4746352982079372`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.9410819690395789`", ",", "6.566303730215108`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7.937124671358355`", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.7370325386367265`", ",", "3.599454139619792`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.0762154776026174`", ",", "3.0762154776026174`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.4746352102212353`*^9, 3.4746352991619344`*^9, 3.474734885906865*^9, 
   3.474802020798914*^9, 3.4748037294603744`*^9, 3.4748037754597874`*^9, 
   3.4748054324726086`*^9, 3.474805654997841*^9, {3.4748075995490646`*^9, 
   3.4748076190210943`*^9}, 3.4748082638436894`*^9, 3.4748083150610137`*^9, 
   3.474809795475834*^9, 3.4748141369851007`*^9, 3.474814521755535*^9, 
   3.474814598047451*^9, {3.474815203770689*^9, 3.4748152290026736`*^9}, 
   3.4748208483091745`*^9, 3.4748215335568686`*^9, {3.4748295875982676`*^9, 
   3.474829635620682*^9}, 3.4748303583460503`*^9, 3.4748304688642015`*^9, 
   3.474830565290586*^9, 3.474832131135555*^9, 3.4749012825712814`*^9, 
   3.474901603816327*^9, 3.47491202525084*^9, 3.4749164456388764`*^9, 
   3.474917012206971*^9, 3.474974196085382*^9, 3.4749784946745095`*^9, 
   3.4749872422695513`*^9, 3.4749889208361454`*^9, 3.474999017241689*^9, 
   3.4749994721326113`*^9, 3.474999690246617*^9, 3.47500078043816*^9, 
   3.4750014455015006`*^9, 3.475002656916898*^9, 3.5250117236952505`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", " ", "=", " ", 
  RowBox[{"h", "/", 
   RowBox[{"Max", "[", "h", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.47463521436565*^9, 3.474635216617709*^9}, {
  3.4746353086393504`*^9, 3.4746353232620955`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.24455732389389107`", ",", "0.8272899824680913`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.47082951237014814`", ",", "0.4534959810583123`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.38757303242361135`", ",", "0.38757303242361135`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.4746352189010468`*^9, 3.4746353286576543`*^9, 3.474734885922473*^9, 
   3.4748020208299627`*^9, 3.474803729491582*^9, 3.4748037754909945`*^9, 
   3.474805432503832*^9, 3.4748056550134525`*^9, {3.4748075995802946`*^9, 
   3.4748076190523243`*^9}, 3.474808263859309*^9, 3.4748083150766335`*^9, 
   3.474809795538316*^9, 3.474814137000723*^9, 3.4748145217867775`*^9, 
   3.4748145980630713`*^9, {3.474815203801955*^9, 3.4748152290183067`*^9}, 
   3.474820848340423*^9, 3.4748215335724926`*^9, {3.47482958762937*^9, 
   3.4748296356362333`*^9}, 3.474830358361656*^9, 3.4748304688954124`*^9, 
   3.4748305653061914`*^9, 3.474832131151163*^9, 3.4749012826025333`*^9, 
   3.4749016038475575`*^9, 3.474912025282082*^9, 3.474916445654499*^9, 
   3.4749170122382174`*^9, 3.4749741961010003`*^9, 3.4749784946901293`*^9, 
   3.4749872423007374`*^9, 3.474988921695372*^9, 3.474999017257307*^9, 
   3.474999472163847*^9, 3.4749996902778516`*^9, 3.4750007804694405`*^9, 
   3.4750014455327716`*^9, 3.475002656948168*^9, 3.525011723726451*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", " ", "=", " ", 
  RowBox[{"h", " ", "*", " ", "255"}]}]], "Input",
 CellChangeTimes->{{3.4746353345067525`*^9, 3.4746353401681795`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"62.36211759294222`", ",", "210.95894552936326`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"255.`", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"120.06152565438778`", ",", "115.64147516986964`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"98.83112326802089`", ",", "98.83112326802089`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.474635342232567*^9, 3.4747348859536886`*^9, 3.4748020208610115`*^9, 
   3.474803729522789*^9, 3.4748037755222015`*^9, 3.4748054325194435`*^9, 
   3.474805655044675*^9, {3.474807599611525*^9, 3.4748076190835547`*^9}, 
   3.4748082638905487`*^9, 3.474808315107873*^9, 3.474809795569557*^9, 
   3.474814137031967*^9, 3.47481452181802*^9, 3.4748145980943127`*^9, {
   3.4748152038332214`*^9, 3.474815229049573*^9}, 3.4748208483560476`*^9, 
   3.4748215336037407`*^9, {3.474829587660473*^9, 3.474829635667336*^9}, 
   3.474830358392867*^9, 3.474830468911018*^9, 3.4748305653374023`*^9, 
   3.474832131166771*^9, 3.4749012826337852`*^9, 3.4749016038631735`*^9, 
   3.474912025313324*^9, 3.4749164456857452`*^9, 3.4749170122538404`*^9, 
   3.4749741961322365`*^9, 3.474978494721368*^9, 3.4749872423319244`*^9, 
   3.4749889224608645`*^9, 3.474999017288542*^9, 3.4749994721794643`*^9, 
   3.474999690309087*^9, 3.475000780500722*^9, 3.4750014455484076`*^9, 
   3.4750026569638023`*^9, 3.525011723773251*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", " ", "=", " ", 
  RowBox[{"Round", "[", "h", "]"}]}]], "Input",
 CellChangeTimes->{{3.474635389510171*^9, 3.4746353943114357`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"62", ",", "211"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"255", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"120", ",", "116"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"99", ",", "99"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.474635395202876*^9, 3.4747348859692965`*^9, 3.4748020208765354`*^9, 
   3.474803729538392*^9, 3.4748037755378056`*^9, 3.474805432566278*^9, 
   3.4748056550602865`*^9, {3.4748075996427555`*^9, 3.4748076191147847`*^9}, 
   3.474808263906169*^9, 3.4748083151234927`*^9, 3.4748097956007977`*^9, 
   3.4748141370632114`*^9, 3.4748145218336406`*^9, 3.474814598109934*^9, {
   3.4748152038644876`*^9, 3.4748152290808396`*^9}, 3.4748208483872967`*^9, 
   3.474821533634989*^9, {3.474829587691575*^9, 3.4748296356984386`*^9}, 
   3.474830358408472*^9, 3.474830468942229*^9, 3.4748305653686132`*^9, 
   3.474832131182379*^9, 3.474901282711915*^9, 3.4749016038944044`*^9, 
   3.474912025391429*^9, 3.4749164457013683`*^9, 3.4749170122850866`*^9, 
   3.4749741961478543`*^9, 3.474978494752607*^9, 3.4749872423631105`*^9, 
   3.474988923476314*^9, 3.4749990173197765`*^9, 3.474999472210699*^9, 
   3.4749996903403215`*^9, 3.4750007805320024`*^9, 3.475001445579678*^9, 
   3.475002656979437*^9, 3.525011723804451*^9}]
}, Open  ]],

Cell["This can all be wrapped up in a function.", "Text",
 CellChangeTimes->{{3.4746355558652935`*^9, 3.4746355657237854`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"findH", "[", 
    RowBox[{"v_", ",", " ", "w_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "h", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"h", " ", "=", " ", 
       RowBox[{"v", ".", 
        RowBox[{"Transpose", "[", 
         RowBox[{"PseudoInverse", "[", "w", "]"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"h", " ", "=", " ", 
       RowBox[{"h", " ", "-", " ", 
        RowBox[{"Min", "[", "h", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<findH: Dimensions of h:\>\"", ",", " ", 
        RowBox[{"Dimensions", "[", "h", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Round", "[", 
        RowBox[{
         RowBox[{"h", "/", 
          RowBox[{"Max", "[", "h", "]"}]}], "*", "255"}], "]"}], "]"}]}]}], 
    "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.474635571426399*^9, 3.4746357391769924`*^9}, {
   3.4746357823480997`*^9, 3.4746358245169697`*^9}, 3.4746358689504642`*^9, {
   3.4746359680473084`*^9, 3.4746360020947666`*^9}, {3.474993959225051*^9, 
   3.474993981443469*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", " ", "=", " ", 
  RowBox[{"findH", "[", 
   RowBox[{"v", ",", " ", "w"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.474635896157194*^9, 3.4746359027636504`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"findH: Dimensions of h:\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}]}],
  SequenceForm["findH: Dimensions of h:", {4, 2}],
  Editable->False]], "Print",
 CellChangeTimes->{3.4749990173510113`*^9, 3.4749994722419343`*^9, 
  3.4749996903715568`*^9, 3.475000780563284*^9, 3.4750014456109495`*^9, 
  3.475002657010707*^9, 3.525011723851251*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"62", ",", "211"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"255", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"120", ",", "116"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"99", ",", "99"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.4746359040130987`*^9, {3.474635977371314*^9, 3.4746360058743467`*^9}, 
   3.474734886000512*^9, 3.4747359875573797`*^9, 3.474802020907584*^9, 
   3.4748037295695996`*^9, 3.4748037755690126`*^9, 3.4748054325975013`*^9, 
   3.47480565509151*^9, {3.4748075996896005`*^9, 3.47480761916163*^9}, 
   3.4748082639374084`*^9, 3.4748083151547327`*^9, 3.474809795632039*^9, 
   3.4748141370944557`*^9, 3.4748145218648825`*^9, 3.474814598141175*^9, {
   3.4748152038957543`*^9, 3.4748152291121063`*^9}, 3.4748208484185457`*^9, 
   3.474821533666237*^9, {3.4748295877537804`*^9, 3.4748296357295413`*^9}, 
   3.474830358455289*^9, 3.47483046897344*^9, 3.474830565399824*^9, 
   3.4748321311979876`*^9, 3.4749012827431664`*^9, 3.4749016039256353`*^9, 
   3.4749120254382925`*^9, 3.4749164457326145`*^9, 3.4749170123163323`*^9, 
   3.474974196194709*^9, 3.474978494783846*^9, 3.4749872423942976`*^9, 
   3.474988932802827*^9, 3.4749990173510113`*^9, 3.4749994722419343`*^9, 
   3.4749996903715568`*^9, 3.475000780563284*^9, 3.4750014456109495`*^9, 
   3.4750026570263414`*^9, 3.525011723851251*^9}]
}, Open  ]],

Cell[TextData[{
 "In the shortest, simplest path through the code, the next function would be \
image reconstruction ",
 StyleBox["via",
  FontSlant->"Italic"],
 " a call to ",
 StyleBox["reconIH()", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.4747361806068296`*^9, 3.474736220935088*^9}, {
  3.474736304949689*^9, 3.474736306464732*^9}},
 TextJustification->0.]
}, Open  ]],

Cell[CellGroupData[{

Cell["function [J, ma] = reconIH(I, H, IDX, sc)", "Subsection",
 CellChangeTimes->{{3.474292333769515*^9, 3.474292427518339*^9}, {
  3.474292560041461*^9, 3.4742926449549675`*^9}, {3.4742928104589405`*^9, 
  3.4742928535496564`*^9}, {3.474292971865424*^9, 3.4742929747713394`*^9}, {
  3.4743035019971533`*^9, 3.4743035692531805`*^9}, {3.4743036029671993`*^9, 
  3.474303610254181*^9}, {3.47430416564487*^9, 3.474304193881138*^9}, {
  3.4743042759789476`*^9, 3.4743043061070147`*^9}, {3.4743043517285776`*^9, 
  3.4743043531044135`*^9}, {3.4743773111095066`*^9, 3.47437731821879*^9}, {
  3.4743779599768853`*^9, 3.4743780133359184`*^9}, {3.474396136611028*^9, 
  3.474396138013768*^9}, {3.4743962473651443`*^9, 3.4743962623277044`*^9}}],

Cell[TextData[{
 "The function ",
 StyleBox["reconIH()", "Code",
  FontFamily->"Consolas",
  FontWeight->"Plain"],
 " is intended to reconstruct an unmixed image from the input image ",
 StyleBox["I", "Code",
  FontFamily->"Consolas",
  FontWeight->"Plain"],
 " and ",
 StyleBox["H", "Code",
  FontFamily->"Consolas",
  FontWeight->"Plain"],
 ", the pixel weights for the channel. The parameters ",
 StyleBox["IDX", "Code"],
 " and ",
 StyleBox["sc", "Code"],
 " are not used in all code paths. In fact, it does not appear that ",
 StyleBox["sc", "Code"],
 " is used anywhere in the code, even the commented out portions. ",
 StyleBox["IDX", "Code"],
 " is used to map from the color channel weights matrix back to a full size \
image. If no actual argument is supplied for IDX, it is generated, using the \
same method as in ",
 StyleBox["processImage()", "Code"],
 ". It appears that ",
 StyleBox["sc", "Code",
  FontFamily->"Consolas",
  FontWeight->"Plain"],
 " is used as a flag to indicate if the output image should be scaled. If \
present, it appears that the output image is scaled to cover the full 8-bit \
intensity range for the channel. In the case of the output parameter ",
 StyleBox["ma", "Code"],
 ", it does not appear that the result is used anywhere in the code. The \
entirety of the MATLAB function is included below."
}], "Text",
 CellChangeTimes->{{3.474292333769515*^9, 3.474292427518339*^9}, {
   3.474292560041461*^9, 3.4742926449549675`*^9}, {3.4742928104589405`*^9, 
   3.4742928535496564`*^9}, {3.474292971865424*^9, 3.4742929747713394`*^9}, {
   3.4743035019971533`*^9, 3.4743035692531805`*^9}, {3.4743036029671993`*^9, 
   3.474303610254181*^9}, {3.47430416564487*^9, 3.474304193881138*^9}, {
   3.4743042759789476`*^9, 3.4743043061070147`*^9}, {3.4743043517285776`*^9, 
   3.4743043531044135`*^9}, {3.4743773111095066`*^9, 3.47437731821879*^9}, {
   3.4743779599768853`*^9, 3.4743779618831224`*^9}, {3.474736345402899*^9, 
   3.474736407238824*^9}, {3.47473648435032*^9, 3.474736515432329*^9}, 
   3.4747366368083553`*^9, {3.474736725103546*^9, 3.4747367786149254`*^9}, {
   3.4747368120087748`*^9, 3.474736847558074*^9}},
 TextJustification->0.],

Cell["\<\
function [J,ma] = reconIH( I,H,IDX,sc)
% J = RECONIH( I, H) reconstruct an NMF unmixed image
%   Takes as input I, the image to be unmixed, and H, the sorted pixel-weight \
channels.
%   Returns J, the unmixed image. Should be called after findWH.m
% 
% Justin Newberg

if ~exist( 'IDX','var')
    IDX = [];
end
if ~exist( 'sc','var')
    sc = 0;
end

ma = [];

s = size(I);

if ~length(IDX)
    [u i IDX] = unique( 255-reshape( I, [s(1)*s(2) s(3)]), 'rows');
end

J = H(IDX,:);
if sc
    ma = zeros(size(H,2),1);
    for i=1:size(H,2)
        [c b] = imhist(J(:,i));
        [a ind] = max(c);
        J(:,i) = J(:,i)-b(ind);
        ma(i) = max(J(:,i));
    end
    J = (255/max(J(:)))*J;
end

J = reshape( J, [s(1) s(2) size(H,2)]);

if size(H,2)<3
    J(:,:,3) = 0;
end

\
\>", "Program",
 CellChangeTimes->{3.4743782219752083`*^9}],

Cell[TextData[{
 "The first functional statement for our purposes is the one that reads ",
 StyleBox["J = H(IDX,:);", "Code"],
 ". This creates the unmixed version of the image. In fact, it creates two or \
three images all bound up in ",
 StyleBox["J", "Code"],
 ". The two or three planes in ",
 StyleBox["J", "Code"],
 " contain the unmixed intensity images for the dyes. The next block of code \
appears to scale the pixels. The pixels are then reshaped into the original \
dimensions and channels of the input image. Finally, if fewer than three dyes \
were unmixed, the contents of the third color channel are added and set to \
zero, indicating no contribution from a third dye."
}], "Text",
 CellChangeTimes->{{3.4747373441236806`*^9, 3.4747375859088964`*^9}, {
   3.474742481754533*^9, 3.474742481754533*^9}, {3.474744587159195*^9, 
   3.474744587159195*^9}, {3.4749982514844294`*^9, 3.474998340800912*^9}, 
   3.4750016661484766`*^9},
 TextJustification->0.],

Cell[TextData[{
 "To create the unmixed pixels, use the index generated earlier by the ",
 StyleBox["uniqueImgRows()", "Code"],
 " function to map the unmixed weights, ",
 StyleBox["h", "Code"],
 ", to a new array."
}], "Text",
 CellChangeTimes->{{3.4747450497928896`*^9, 3.4747451379725676`*^9}, {
  3.4748215893349056`*^9, 3.4748215950220776`*^9}, {3.474998377377097*^9, 
  3.474998378704584*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ar1", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"h", "[", 
      RowBox[{"[", "#", "]"}], "]"}], " ", "&"}], " ", "/@", " ", 
    "reconIdx"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.474744963750617*^9, 3.4747449991192174`*^9}, {
   3.4747453399052954`*^9, 3.4747453420115247`*^9}, 3.474745506048601*^9}],

Cell["\<\
We can check the dimensions of the color weights to see if an additional \
channel should be added and append it if so.\
\>", "Text",
 CellChangeTimes->{{3.474744588220042*^9, 3.4747446028690996`*^9}, {
  3.474744636441806*^9, 3.4747446476587095`*^9}, {3.474745525706995*^9, 
  3.4747455381105056`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ar1", " ", "=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Part", "[", 
       RowBox[{
        RowBox[{"Dimensions", "[", "h", "]"}], ",", " ", "2"}], "]"}], " ", 
      "<", " ", "3"}], ",", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Append", "[", 
         RowBox[{"#", ",", " ", "0"}], "]"}], "&"}], ",", " ", "ar1"}], "]"}],
      ",", " ", "ar1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.4747447126980276`*^9, 3.474744734523407*^9}, {
   3.4747447848824663`*^9, 3.4747448139777718`*^9}, {3.4747450225526705`*^9, 
   3.47474502868406*^9}, 3.4747451651038485`*^9, {3.474745359267005*^9, 
   3.474745367551508*^9}}],

Cell[TextData[{
 "At this point, the optional scaling operation could be performed. However, \
rather than try to figure out the translation from MATLAB to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", the built in ",
 StyleBox["ImageAdjust()", "Code"],
 " function can be used before returning the result from the function."
}], "Text",
 CellChangeTimes->{{3.474745174496072*^9, 3.474745215122898*^9}, {
  3.4747455718418136`*^9, 3.4747455827943473`*^9}, {3.474811916755355*^9, 
  3.4748119342815557`*^9}, {3.4749013865455294`*^9, 3.474901436938735*^9}, {
  3.4749015235056667`*^9, 3.474901534287469*^9}}],

Cell["\<\
Now the pixels can be reshaped into the three planes of pixel data by using \
the number of colums in the original image.\
\>", "Text",
 CellChangeTimes->{{3.474745174496072*^9, 3.474745215122898*^9}, {
  3.4747455718418136`*^9, 3.4747455827943473`*^9}, {3.474811916755355*^9, 
  3.4748119342815557`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"arr", " ", "=", " ", 
   RowBox[{"Partition", "[", 
    RowBox[{"ar1", ",", " ", 
     RowBox[{"Part", "[", 
      RowBox[{
       RowBox[{"Dimensions", "[", 
        RowBox[{"ImageData", "[", "smlImg", "]"}], "]"}], ",", "2"}], "]"}]}],
     "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.47474252650963*^9, 3.4747425473077707`*^9}, {
   3.474742618678234*^9, 3.4747426462787743`*^9}, {3.4747427413090773`*^9, 
   3.4747427774947147`*^9}, {3.4747428727595835`*^9, 
   3.4747428775290823`*^9}, {3.4747433615307026`*^9, 3.474743392781087*^9}, 
   3.474743518854331*^9, 3.474744011712494*^9, {3.4747440489325075`*^9, 
   3.474744121470213*^9}, {3.474745290276287*^9, 3.4747452914152117`*^9}, 
   3.474745499776637*^9, 3.4748140962111588`*^9, {3.4749889756235514`*^9, 
   3.4749889763265553`*^9}}],

Cell["Verify the correct dimensions:", "Text",
 CellChangeTimes->{{3.4747453109485397`*^9, 3.4747453185621696`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "arr", "]"}]], "Input",
 CellChangeTimes->{{3.474743409897351*^9, 3.474743413982267*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"16", ",", "19", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.474743415830575*^9, 3.4747441569438334`*^9, 3.4747453264566298`*^9, 
   3.474745386257946*^9, 3.4748020209852057`*^9, 3.4748037296320143`*^9, 
   3.474803775631427*^9, 3.4748054326911707`*^9, 3.4748056551539555`*^9, {
   3.474807599752061*^9, 3.4748076192553205`*^9}, 3.4748082639998875`*^9, 
   3.4748083152172117`*^9, 3.4748097957101417`*^9, {3.474814071668682*^9, 
   3.474814100944685*^9}, 3.474814137344411*^9, 3.4748145220991993`*^9, 
   3.4748145983598647`*^9, {3.4748152041458855`*^9, 3.4748152293466043`*^9}, 
   3.474820848652913*^9, 3.4748215338693504`*^9, {3.474829588406935*^9, 
   3.474829636351593*^9}, 3.4748303590951147`*^9, 3.4748304696132655`*^9, 
   3.47483056603965*^9, 3.4748321317442703`*^9, 3.47490128375885*^9, 
   3.4749016039568663`*^9, 3.4749120255163975`*^9, 3.4749164458888445`*^9, 
   3.4749170124725623`*^9, 3.4749741966007795`*^9, 3.474978494908801*^9, 
   3.4749872425502305`*^9, 3.4749889818412266`*^9, 3.4749990174603343`*^9, 
   3.474999472288787*^9, 3.4749996904184093`*^9, 3.475000780610205*^9, 
   3.4750014456578555`*^9, 3.4750026570576115`*^9, 3.5250117239136515`*^9}]
}, Open  ]],

Cell["Now create an RGB version of the unmixed image:", "Text",
 CellChangeTimes->{{3.474745391796549*^9, 3.4747454016256204`*^9}, {
   3.4748206617526445`*^9, 3.474820663721331*^9}, 3.47500178869639*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"i", " ", "=", " ", 
  RowBox[{"Image", "[", 
   RowBox[{"arr", ",", 
    RowBox[{"ColorSpace", "\[Rule]", "\"\<RGB\>\""}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.474743727058194*^9, 3.4747437556102858`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztlrsJgDAURR+4gOAEbvI2EKxsFBFsbFzRURzFb6ON5CrkIvdBSDikOgdC
8m4s+8TM0nVl69rOxxS+b+3gdpmf8nm83YvMrTl57e84mWd1BDmZZ3UEOZln
dQQ5mWd1BDmZZ3UEOZnnr/hU+WV/4uoYl4f2Yuurjseo4zlkXfSugpzMv/45
ICfzrI4gJ/OsjiAn86yOICfzrI4gJ/OsjsF8AYXu34I=
    "], {{0, 16}, {19, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{19, 16},
  PlotRange->{{0, 19}, {0, 16}}]], "Output",
 CellChangeTimes->{
  3.4747437580558276`*^9, 3.474745408006716*^9, 3.4748020210007296`*^9, 
   3.4748037296632214`*^9, 3.474803775662634*^9, 3.474805432722394*^9, 
   3.474805655185178*^9, {3.474807599783291*^9, 3.474807619286551*^9}, 
   3.474808264031127*^9, 3.474808315248451*^9, 3.474809795913208*^9, {
   3.474814073949524*^9, 3.47481410381917*^9}, 3.4748141373756557`*^9, 
   3.4748145221304417`*^9, 3.4748145983911057`*^9, {3.4748152041927853`*^9, 
   3.4748152293778706`*^9}, 3.4748208486685376`*^9, 3.4748215338849745`*^9, {
   3.474829588438038*^9, 3.4748296363671446`*^9}, 3.4748303591263256`*^9, 
   3.4748304696444764`*^9, 3.474830566070861*^9, 3.474832131759879*^9, 
   3.474901283774476*^9, 3.474901603988097*^9, 3.4749120255788813`*^9, 
   3.4749164459513364`*^9, 3.474917012535054*^9, 3.4749741968194327`*^9, 
   3.4749784949400396`*^9, 3.4749872427061634`*^9, 3.474988984028349*^9, 
   3.4749990174759517`*^9, 3.4749994723200216`*^9, 3.4749996904340267`*^9, 
   3.475000780641486*^9, 3.4750014456734915`*^9, 3.4750026570888805`*^9, 
   3.525011723944851*^9}]
}, Open  ]],

Cell["And split it into the images for the individual channels:", "Text",
 CellChangeTimes->{{3.474745416447235*^9, 3.4747454290846124`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sepImages", " ", "=", 
  RowBox[{"ColorSeparate", "[", "i", "]"}]}]], "Input",
 CellChangeTimes->{{3.474745464890789*^9, 3.4747454690096903`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhBhjwd6Aq/SCfNJohDgc96q5Rd426i2z6QAQqPdDu
QncPqe4bae4arPE42NP9qLtG3TVE3AUAnswR6g==
      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhBihIyHKgKk0yiHXASo+6a9Rdo+4inz4QgUoPtLvQ
3UOy+0aYuwZrPA72dD/qrlF3DRF3AQAn7M9j
      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhhlEwCkbBKBgFo2AUjIJRQG8AAEjjAc8=
      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.4747454707571034`*^9, 3.4748020210473027`*^9, 3.474803729678825*^9, 
   3.474803775678238*^9, 3.4748054327380056`*^9, 3.4748056552007895`*^9, {
   3.4748075998145213`*^9, 3.4748076193177814`*^9}, 3.4748082640467467`*^9, 
   3.474808315264071*^9, 3.4748097959444494`*^9, 3.4748141067561436`*^9, 
   3.4748141374069*^9, 3.474814522146063*^9, 3.474814598406727*^9, {
   3.4748152042240515`*^9, 3.474815229409137*^9}, 3.474820848699787*^9, 
   3.4748215339162226`*^9, {3.4748295884846916`*^9, 3.474829636398247*^9}, 
   3.4748303591419306`*^9, 3.474830469660082*^9, 3.474830566102072*^9, 
   3.474832131791095*^9, 3.4749012838057275`*^9, 3.474901604050559*^9, 
   3.474912025656986*^9, 3.474916445998205*^9, 3.4749170125975466`*^9, 
   3.4749741969131413`*^9, 3.474978494971278*^9, 3.474987242799723*^9, 
   3.4749889874964995`*^9, 3.474999017507187*^9, 3.4749994723981094`*^9, 
   3.474999690527732*^9, 3.475000780735329*^9, 3.475001445704762*^9, 
   3.4750026571045156`*^9, 3.5250117239916515`*^9}]
}, Open  ]],

Cell["\<\
Admittedly, not the best deconvolution because of the image and the original \
color basis matrix.\
\>", "Text",
 CellChangeTimes->{{3.474745747503606*^9, 3.4747457801739845`*^9}}],

Cell["Putting it all together in a function.", "Text",
 CellChangeTimes->{{3.4747460003479967`*^9, 3.47474602730808*^9}, {
  3.4747463973383427`*^9, 3.474746406449852*^9}, {3.474820705188754*^9, 
  3.47482070829803*^9}, {3.4749015556737404`*^9, 3.474901567869446*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"reconIH", "[", 
   RowBox[{"img_", ",", " ", "h_", ",", " ", "idx_", ",", " ", 
    RowBox[{"sc_:", "False"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ar1", ",", " ", "arr", ",", " ", "image"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ar1", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"h", "[", 
         RowBox[{"[", "#", "]"}], "]"}], " ", "&"}], " ", "/@", " ", 
       "idx"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "I", " ", "THINK", " ", "THE", " ", "STUFF", " ", "THAT", " ", 
       "FOLLOWS", " ", "WAS", " ", "TRYING", " ", "TO", " ", "ADJUST", " ", 
       "CONTRAST"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "JUST", " ", "COMMENT", " ", "IT", " ", "OUT", " ", "UNTIL", " ", "I", 
       " ", "KNOW", " ", "IT", " ", "NEEDS", " ", "TO", " ", "DO", " ", 
       "SOMETHING", "\[IndentingNewLine]", "USEFULL", " ", "THAT", " ", 
       RowBox[{"ImageAdjust", "[", "]"}], " ", 
       RowBox[{"DOESN", "'"}], "T", " ", 
       RowBox[{"DO", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"sc", " ", "\[Equal]", " ", "True"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ma", " ", "=", " ", 
           RowBox[{"Table", "[", 
            RowBox[{"0", ",", " ", 
             RowBox[{"{", 
              RowBox[{"Part", "[", 
               RowBox[{
                RowBox[{"Dimensions", "[", "h", "]"}], ",", "2"}], "]"}], 
              "}"}], ",", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", "=", "1"}], ",", " ", 
            RowBox[{"i", "<=", " ", 
             RowBox[{"Part", "[", 
              RowBox[{
               RowBox[{"Dimensions", "[", "h", "]"}], ",", " ", "2"}], 
              "]"}]}], ",", " ", 
            RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"ar1", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "i"}], "]"}], "]"}], " ", "=", " ", 
              RowBox[{
               RowBox[{"ar1", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "i"}], "]"}], "]"}], " ", "-", " ", 
               RowBox[{"Max", "[", 
                RowBox[{"BinCounts", "[", 
                 RowBox[{"ar1", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", " ", "i"}], "]"}], "]"}], "]"}], 
                "]"}]}]}], ";", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"ma", "[", 
               RowBox[{"[", "i", "]"}], "]"}], " ", "=", " ", 
              RowBox[{"ar1", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", " ", "i"}], "]"}], "]"}]}]}]}], "]"}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"ar1", " ", "=", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"255", "/", 
              RowBox[{"Max", "[", "ar1", "]"}]}], ")"}], "*", "ar1"}]}]}], 
         ",", " ", "ar1"}], "]"}], ";"}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"ar1", " ", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Part", "[", 
          RowBox[{
           RowBox[{"Dimensions", "[", "h", "]"}], ",", " ", "2"}], "]"}], " ",
          "<", " ", "3"}], ",", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"#", ",", " ", "0"}], "]"}], "&"}], ",", " ", "ar1"}], 
         "]"}], ",", " ", "ar1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"arr", " ", "=", " ", 
      RowBox[{"Partition", "[", 
       RowBox[{"ar1", ",", " ", 
        RowBox[{"Part", "[", 
         RowBox[{
          RowBox[{"Dimensions", "[", 
           RowBox[{"ImageData", "[", "img", "]"}], "]"}], ",", "2"}], "]"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"image", " ", "=", " ", 
      RowBox[{"Image", "[", 
       RowBox[{"arr", ",", 
        RowBox[{"ColorSpace", "\[Rule]", "\"\<RGB\>\""}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"ImageAdjust", "[", "image", "]"}], "]"}]}]}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.474746035265049*^9, 3.4747461077670784`*^9}, {
   3.4747461796918373`*^9, 3.474746293648115*^9}, 3.4747463381759377`*^9, {
   3.4748072806002197`*^9, 3.474807280943541*^9}, {3.474814199567634*^9, 
   3.4748142345457397`*^9}, 3.474814286736086*^9, 3.4748143915849085`*^9, {
   3.474815169815378*^9, 3.4748152241563816`*^9}, {3.4748152550163183`*^9, 
   3.4748152664754543`*^9}, {3.474815303979501*^9, 3.474815305495921*^9}, {
   3.474815342061976*^9, 3.4748153476430283`*^9}, {3.474819357072917*^9, 
   3.474819383683314*^9}, {3.4748209983356233`*^9, 3.474821006788478*^9}, {
   3.474821131800102*^9, 3.474821142190395*^9}, {3.4748211782986145`*^9, 
   3.4748211947824616`*^9}, {3.4748213213530054`*^9, 
   3.4748213493041625`*^9}, {3.4748213962539816`*^9, 
   3.4748214064407644`*^9}, {3.4748302369448595`*^9, 
   3.4748302433411465`*^9}, {3.474830726943473*^9, 3.474830747981844*^9}, {
   3.4749013309020557`*^9, 3.4749013534188337`*^9}, {3.474993357435207*^9, 
   3.474993360872707*^9}, {3.4749934375598536`*^9, 3.474993635229198*^9}, {
   3.474994442528366*^9, 3.474994472434042*^9}, {3.47499471108571*^9, 
   3.4749947955528383`*^9}, {3.4749949215816684`*^9, 
   3.4749949490186415`*^9}, {3.4749978502864714`*^9, 3.474997857673549*^9}, {
   3.4749980849550266`*^9, 3.4749981554524217`*^9}}],

Cell[TextData[{
 "The variable ",
 StyleBox["ma", "Code"],
 " is one of the returned values in the MATLAB code, but it is not used at \
all anywere in the code."
}], "Text",
 CellChangeTimes->{{3.4748207285786304`*^9, 3.4748207607651005`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reconIH", "[", 
  RowBox[{"smlImg", ",", " ", "h", ",", " ", "reconIdx"}], "]"}]], "Input",
 CellChangeTimes->{{3.4747461331045637`*^9, 3.474746159799415*^9}, 
   3.474746215217364*^9, {3.474746346398139*^9, 3.474746353434596*^9}, {
   3.474821219312927*^9, 3.4748212206722584`*^9}, 3.474821425626914*^9}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGAQAGJhIAaxUcEHewyhYSk+WNzBwJCrJ5u1wfqy/UwzxqUr
pj+0J1d8oP0xMOKDxR2j8UiZ+GBxx2g8UiY+WNwxGo+UiQ8Wd4zGI2Xig8Ud
o/FISDzDKGrPp84T9s7F1lPd2e8RFB8od4/GIwSQGl+DLX5H4xECRuORNu4a
LOKDLb5wiY/GIyXig8Udo/FImfhgccdoPFImPljcMRqPlIkPFneMxiNl4oPF
HaPxSJn4YHEH9eIRANE1xfE=
    "], {{0, 16}, {19, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{19, 16},
  PlotRange->{{0, 19}, {0, 16}}]], "Output",
 CellChangeTimes->{
  3.474746354838767*^9, 3.474802021078351*^9, 3.474803729710032*^9, 
   3.474803775709445*^9, 3.474805432769229*^9, 3.474805655232012*^9, 
   3.4748072967207017`*^9, {3.4748075998769817`*^9, 3.4748076193490114`*^9}, 
   3.4748082640779867`*^9, 3.4748083152953105`*^9, 3.47480979597569*^9, 
   3.4748141374381447`*^9, 3.474814248230074*^9, 3.474814299045512*^9, 
   3.4748143995204277`*^9, 3.4748145221773047`*^9, 3.4748145984379683`*^9, {
   3.4748152042553177`*^9, 3.474815229440403*^9}, 3.4748152733384285`*^9, 
   3.474815310295314*^9, 3.474815351535695*^9, 3.4748193893554068`*^9, 
   3.47482084874666*^9, {3.4748212109381948`*^9, 3.4748212232971745`*^9}, {
   3.4748213307117214`*^9, 3.4748213568036346`*^9}, {3.474821415362012*^9, 
   3.4748214368761215`*^9}, 3.4748215339474707`*^9, {3.4748295885313454`*^9, 
   3.47482963642935*^9}, 3.4748302503302603`*^9, 3.474830359173142*^9, 
   3.474830469691293*^9, 3.4748305661488886`*^9, 3.474832131806703*^9, 
   3.4749012838526053`*^9, 3.4749013597785344`*^9, 3.4749016040974054`*^9, 
   3.474912025688228*^9, 3.4749164460450745`*^9, 3.4749170126287923`*^9, 
   3.4749741970068502`*^9, 3.474978495002517*^9, 3.4749872428620963`*^9, 
   3.4749889949952035`*^9, 3.474999017554039*^9, 3.474999472429344*^9, 
   3.4749996905589666`*^9, 3.47500078076661*^9, 3.475001445751669*^9, 
   3.475002657135785*^9, 3.5250117241164513`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sepImages", " ", "=", 
  RowBox[{"ColorSeparate", "[", "%", "]"}]}]], "Input",
 CellChangeTimes->{{3.474746372952573*^9, 3.4747463765566115`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhBlqBD/bE0rl6slkbrC9j0KPuGnXXqLvIBxlGUXs+
dZ6wh9ED7S5095DqvpHmLlzuI+QeerkLFQyedD/qrlF3DSV3AQAh8zSM
      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhBhj4YE9dmngw04xx6YrpD+3R6VF3jbpr1F3k087F
1lPd2e/B6YF2F7p7SHXfSHMXLvcRcg+93IVKEw9G3TXqrlF3IWgAo1STMA==

      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhhlEwCkbBKBgFo2AUjIJRQG8AAEjjAc8=
      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.474746378569257*^9, 3.474802021093876*^9, 3.474803729710032*^9, 
   3.474803775709445*^9, 3.4748054327848406`*^9, 3.4748056552476234`*^9, 
   3.474807299264398*^9, {3.4748075999082117`*^9, 3.4748076193802414`*^9}, 
   3.474808264093606*^9, 3.4748083152953105`*^9, 3.4748097959913106`*^9, 
   3.474814137469389*^9, 3.4748142529945097`*^9, 3.4748143007482123`*^9, 
   3.474814401847972*^9, 3.474814522192926*^9, 3.4748145984379683`*^9, {
   3.4748152042865844`*^9, 3.4748152294716697`*^9}, 3.4748193910898485`*^9, 
   3.4748208487779093`*^9, 3.474821212813135*^9, 3.474821533978719*^9, {
   3.4748295885624485`*^9, 3.474829636460452*^9}, 3.474830252124341*^9, 
   3.4748303591887474`*^9, 3.4748304697068987`*^9, 3.474830566164494*^9, 
   3.474832131837919*^9, 3.4749012838682313`*^9, 3.4749013614348693`*^9, 
   3.474901604113021*^9, 3.474912025735091*^9, 3.4749164460606976`*^9, 
   3.4749170126600385`*^9, 3.474974197022468*^9, 3.4749784950337563`*^9, 
   3.474987242893283*^9, 3.4749889962293653`*^9, 3.474999017585274*^9, 
   3.4749994724449615`*^9, 3.4749996905902014`*^9, 3.475000780797891*^9, 
   3.47500144578294*^9, 3.475002657167055*^9, 3.525011724163252*^9}]
}, Open  ]],

Cell[TextData[{
 "Note the differences from the reconstructed images above due to the use of \
the ",
 StyleBox["ImageAdjust[]", "Code"],
 " function."
}], "Text",
 CellChangeTimes->{{3.4750019552097483`*^9, 3.475001986823516*^9}}],

Cell["\<\
It might be helpful to color the pixels based on the colors of the basis, but \
that is not too useful for this image.\
\>", "Text",
 CellChangeTimes->{{3.4750019552097483`*^9, 3.475001986807881*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Revisiting processImage()", "Subsection",
 CellChangeTimes->{{3.4748021074028187`*^9, 3.4748021167566624`*^9}, {
  3.474978365824932*^9, 3.474978369871134*^9}}],

Cell[TextData[{
 "With the ",
 StyleBox["findH()", "Code"],
 " and ",
 StyleBox["reconIH()", "Code"],
 " functions available, it is now possible to write an initial version of ",
 StyleBox["processImage()", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.474802117955075*^9, 3.474802159012379*^9}, {
  3.4749784782741394`*^9, 3.4749784806326694`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"processImageV1", "[", "img_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "w", ",", " ", "h", ",", " ", "j", ",", " ", "v", ",", " ", "reconIdx", 
      ",", "junk"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"w", " ", "=", " ", 
      RowBox[{"getW", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "junk", ",", " ", "reconIdx"}], "}"}], " ", "=",
       " ", 
      RowBox[{"uniqueImgRows", "[", "img", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"h", " ", "=", " ", 
      RowBox[{"findH", "[", 
       RowBox[{"v", ",", " ", "w"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"j", " ", "=", " ", 
      RowBox[{"reconIH", "[", 
       RowBox[{"img", ",", " ", "h", ",", " ", "reconIdx", ",", " ", "True"}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", " ", "[", 
      RowBox[{"{", 
       RowBox[{"h", ",", " ", "w", ",", " ", "j"}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.4748021848794146`*^9, 3.4748022331583223`*^9}, {
  3.474802340517415*^9, 3.4748023547582917`*^9}, {3.474802393489504*^9, 
  3.474802448635624*^9}, {3.4748024876896696`*^9, 3.4748025379754534`*^9}, {
  3.4748025719978056`*^9, 3.4748025725274577`*^9}, {3.474802974869757*^9, 
  3.4748029780480876`*^9}, {3.474820276593095*^9, 3.4748203020141563`*^9}, {
  3.474821459218299*^9, 3.474821462436822*^9}, {3.474821492544078*^9, 
  3.4748214933565207`*^9}, {3.4748215257604885`*^9, 3.4748215266041794`*^9}, {
  3.4748296048913136`*^9, 3.4748296291513414`*^9}, {3.474978374245406*^9, 
  3.4749783748859243`*^9}}],

Cell[TextData[{
 "Obviously, this version does no file handling and relies on a hardwired \
file for ",
 StyleBox["w", "Code"],
 ". But it does provide the minimal functionality needed."
}], "Text",
 CellChangeTimes->{{3.4748026232182693`*^9, 3.4748026777101135`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "chnlWeights", ",", " ", "colorBasis", ",", " ", "deconvImgFixed"}], 
    "}"}], " ", "=", " ", 
   RowBox[{"processImageV1", "[", "smlImg", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.4748026903929715`*^9, 3.474802725611004*^9}, {
  3.474803030968072*^9, 3.4748030390939507`*^9}, {3.474803323876398*^9, 
  3.474803341746936*^9}, {3.474978383743825*^9, 3.4749783843999662`*^9}, {
  3.474999438258254*^9, 3.474999439148452*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"findH: Dimensions of h:\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}]}],
  SequenceForm["findH: Dimensions of h:", {4, 2}],
  Editable->False]], "Print",
 CellChangeTimes->{3.474999017632127*^9, 3.4749994725074315`*^9, 
  3.4749996906370544`*^9, 3.475000780844813*^9, 3.475001445876753*^9, 
  3.4750026572764983`*^9, 3.525011724241252*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "chnlWeights", "]"}]], "Input",
 CellChangeTimes->{{3.4748030508365507`*^9, 3.4748030571149273`*^9}, {
  3.4748033484796305`*^9, 3.474803352978507*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"62", "211"},
     {"255", "0"},
     {"120", "116"},
     {"99", "99"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.47480305857101*^9, 3.474803354368785*^9, 3.4748037297724466`*^9, 
   3.474803775771859*^9, 3.4748054328472867`*^9, 3.4748056553256807`*^9, 
   3.4748073115147157`*^9, {3.4748075999706726`*^9, 3.4748076194427023`*^9}, 
   3.4748082641717052`*^9, 3.4748083153890295`*^9, 3.474809796053793*^9, 
   3.4748141375318775`*^9, 3.474814271802314*^9, 3.474814310402052*^9, 
   3.4748144118923388`*^9, 3.47481452225541*^9, 3.474814598500451*^9, {
   3.4748152043491173`*^9, 3.4748152295342026`*^9}, 3.474820323075982*^9, 
   3.4748208488404074`*^9, 3.474821469186347*^9, 3.474821502043409*^9, 
   3.474821534041216*^9, {3.474829588640205*^9, 3.4748296365226574`*^9}, 
   3.474830260735927*^9, 3.474830359251169*^9, 3.474830469784926*^9, 
   3.4748305662269163`*^9, 3.4748321318847437`*^9, 3.4749012839307346`*^9, 
   3.474901604175483*^9, 3.474912025797575*^9, 3.474916446123189*^9, 
   3.4749170127069073`*^9, 3.4749741970849404`*^9, 3.4749784950962334`*^9, 
   3.4749872430180297`*^9, 3.4749890037280693`*^9, 3.4749990176633615`*^9, 
   3.4749994725230494`*^9, 3.474999690668289*^9, 3.475000780876094*^9, 
   3.475001445908024*^9, 3.4750026572921333`*^9, 3.525011724288052*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "colorBasis", "]"}]], "Input",
 CellChangeTimes->{{3.4748030674014454`*^9, 3.474803071644438*^9}, {
  3.474803358742693*^9, 3.4748033605078773`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"57.10736846923828`", "43.67302703857422`"},
     {"56.532249450683594`", "55.59086608886719`"},
     {"42.48149871826172`", "64.1858901977539`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.474803074243467*^9, 3.4748033615232487`*^9, 3.4748037298036537`*^9, 
   3.4748037758030663`*^9, 3.4748054328628983`*^9, 3.474805655356903*^9, 
   3.4748073143393106`*^9, {3.4748076000175176`*^9, 3.4748076194739323`*^9}, 
   3.4748082642029448`*^9, 3.4748083154046493`*^9, 3.474809796069413*^9, 
   3.4748141375474997`*^9, 3.4748142732550764`*^9, 3.4748143127452173`*^9, 
   3.4748144133451014`*^9, 3.4748145222866526`*^9, 3.4748145985316925`*^9, {
   3.4748152043803835`*^9, 3.474815229565469*^9}, 3.474820326138384*^9, 
   3.4748208488560314`*^9, 3.4748214702800198`*^9, 3.474821503074586*^9, 
   3.4748215340724635`*^9, {3.474829588671307*^9, 3.474829636538209*^9}, 
   3.4748302627796187`*^9, 3.47483035928238*^9, 3.4748304698005314`*^9, 
   3.4748305662581267`*^9, 3.4748321319003515`*^9, 3.4749012839619865`*^9, 
   3.474901604206714*^9, 3.474912025813196*^9, 3.474916446154435*^9, 
   3.4749170127381535`*^9, 3.4749741971161766`*^9, 3.4749784951274724`*^9, 
   3.4749872430492163`*^9, 3.474989005165321*^9, 3.474999017694597*^9, 
   3.474999472554284*^9, 3.474999690699524*^9, 3.475000780907375*^9, 
   3.4750014459236593`*^9, 3.475002657323403*^9, 3.525011724334852*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ColorSeparate", "[", "deconvImgFixed", "]"}]], "Input",
 CellChangeTimes->{{3.474803085860812*^9, 3.474803091121497*^9}, {
  3.474803365631598*^9, 3.474803368380912*^9}, {3.474999442802947*^9, 
  3.474999443599439*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhBlqBD/bE0rl6slkbrC9j0KPuGnXXqLvIBxlGUXs+
dZ6wh9ED7S5095DqvpHmLlzuI+QeerkLFQyedD/qrlF3DSV3AQAh8zSM
      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhBhj4YE9dmngw04xx6YrpD+3R6VF3jbpr1F3k087F
1lPd2e/B6YF2F7p7SHXfSHMXLvcRcg+93IVKEw9G3TXqrlF3IWgAo1STMA==

      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmViYGAQAGJhhlEwCkbBKBgFo2AUjIJRQG8AAEjjAc8=
      "], {{0, 16}, {19, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{19, 16},
    PlotRange->{{0, 19}, {0, 16}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.474803092421012*^9, 3.4748033696618423`*^9, 3.4748037298192573`*^9, 
   3.4748037758186703`*^9, 3.4748054328941216`*^9, 3.4748056553725147`*^9, 
   3.4748073160715218`*^9, {3.4748076000331326`*^9, 3.4748076195051622`*^9}, 
   3.4748082642341843`*^9, 3.474808315435889*^9, 3.4748097961006536`*^9, 
   3.4748141375787444`*^9, 3.4748142746765966`*^9, 3.4748143139949055`*^9, 
   3.47481441461041*^9, 3.474814522317895*^9, 3.474814598562934*^9, {
   3.4748152044116497`*^9, 3.474815229596735*^9}, 3.4748203285601816`*^9, 
   3.4748208488872805`*^9, 3.4748214715924273`*^9, 3.474821504027644*^9, 
   3.474821534088088*^9, {3.4748295887024097`*^9, 3.474829636569311*^9}, 
   3.474830264558099*^9, 3.4748303593135915`*^9, 3.4748304698317423`*^9, 
   3.474830566273732*^9, 3.474832131931568*^9, 3.4749012839776125`*^9, 
   3.4749016042223296`*^9, 3.4749120258444386`*^9, 3.4749164461856813`*^9, 
   3.474917012769399*^9, 3.474974197147413*^9, 3.4749784951587114`*^9, 
   3.474987243080403*^9, 3.474989007274331*^9, 3.474999017710214*^9, 
   3.4749994725699015`*^9, 3.474999690730759*^9, 3.475000780938656*^9, 
   3.4750014459549303`*^9, 3.4750026573546724`*^9, 3.5250117243660517`*^9}]
}, Open  ]],

Cell["With a more realistic image:", "Text",
 CellChangeTimes->{{3.474803121020793*^9, 3.4748031271755066`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "imgPath", " ", "=", " ", 
   "\"\<C:\\\\projects\\\\color-deconvolution\\\\Images\\\\TinyTissue.jpg\>\"\
"}], ";"}]], "Input",
 CellChangeTimes->{
  3.474803155996436*^9, {3.525011669656756*^9, 3.525011673291562*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"img", " ", "=", " ", 
  RowBox[{"Import", "[", "imgPath", "]"}]}]], "Input",
 CellChangeTimes->{3.474803184255006*^9}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
TPwEThuT8jA9+UHaWODgYkDPqnudOLST49MgCukAdQVQAST7qBAEAcCUORWI
6FLJhmKXWzLc+a1Tw9uGuB+cNkZFPNmGYHljMGk08OJLn698Yy+Glj/GkL16
8jUz2xyrVuNG2m3Kwn/yy7+fPm5TO2la2KKfX22Mf3k3zvxn3xfqqf46ebnO
9cDwTEYPh1zyD1OL9bsWlq+fPx7YOeZbz0wdlGaPc+J6AKr94AAk4LyPSgLi
JxAxxWJELEPnEXFY/ah65Fxo9e7SBm9DJuDIWANwZ1BH5L+9vKD71Z97d6tm
56lmFBuV9L5oGPds8v7K1vlzO4xqbMvj1E7d/OJHqQl34s3+7eL9MNNHMzfO
qBj/vGQ+bsj8Yz3HCx56n9liDPEDAcRmp6o6x4rB4OaZyB5lZISvgf25+Igy
bnwRwCqRSDb5IpQhQjlbKEO6zZNviBWAKxirfO4Aey2kKwO603RYD/+OFeFe
PtaoKkI1djq03/OMjeUn5kG/BBQ9zWrWxtZq59aZ4iOuh/teiXxxJSpRC9fk
Wk0OblU/fM38C7snH1ln65YV6uJT76fGqiWkPk6sta8EKISvywksAG4fFUgl
2CIeT8TniiQIXcRlyUWAyCSIeJMjFSIivkQCEKIDnOJzJhmHbsQceZDxW1jU
g6xg9ZQa13qie4v7GWfrz2wTHmU1m5ZX6GC67Kum/Ynl2rlpd5N6fDqYebNr
6YMGHzx8/J6Ozt+ccHo1hU9LgIvAaxXE344pNi7aD49QqIzXPqp9kEpgMAyA
AZAAA1ss4ipbUygFJ1ioTDRPgMIKdJqzkF43FVoef8PzxUUPk3OuofeSlpIW
OmwbIq/G2J71cTvvEX4tFK+XJciYpYYSZ31aaInDq5mD7KKJqLu+Rp+aOp71
LdKvIboQh72JxBfN5cYFXS9awP/fB7aPSrlfl9Z+uEAqpTzhBiyV8SSAwEDu
hAKpmC8RwWJAHGy+iCuQbMt3pHPM9nB8/P3gp2/p2H3u3uc3hNXJw+ngI2+l
+6nEBN2OwRrmLMb20iLa2LG9sy9bJ2LaWBVTw4mtxVZ5WU+yykxKxkMGGDlL
qxmUwaDeTrdWwX+t/Vj9N6rXERNuiGTK+ueC90XKe2CJWKBAEDlXLBNJN0HQ
dvhiycTaUFRT+Fkfs+MmZWY1Kcb5Eeopfj+GOd0MjXianm+Fn0sZgvMmaAn9
lEhihzeBVUVhEqb6Q2qaHYupKWOAhDu9m4KuhJj/06bbt//PrP2Jaj+DgMde
s6nyA75IyBMJ2DDv9T2gLwCXyARSZdkv9Y1P1bTzp5YUa4iQyKzSx0afDUy5
n4F1qY3RyY64Hv/8d09wqHhRt5w3j1SsD4a0N7tUNnpUDMa2UAuG1jFD9FQS
PW2UmjYeeSPs9gGNpx9atAeMgkYTKqtK8P9bfLDECEDF4cPgRqDmIJhAnQQy
yfrCIrm8ab6keblzUCaQbDAVY0ndRfeTEq9GZhjgKj2aUzQzba94FbnUdoUO
dIX0TiZP0fEMMLTWuldUu+GHwpvWM0aEuZT5iH7s04zUB5nxqhmOv4a+uBbN
4/H+kz7kf5D9WfxKonhN/jCXBzLIFcL7MRTKRDCPRSONcXrIbMoysiEFKiXu
WOsyxrbpFOY/xSRppGY8zfB+GJ3vUFnr0RZ5NzHkZmy9R3tfxECNe3WdZ2Wj
W3mfXwMzfXYiZCjqRpzLef/gm0meD1Juf2r5Z+7+g+F/lzKKCCL6gyvAzVzh
f14C2hWKBUI6W0ZlicVCuoy3JZKjXZxelfgp7fKaZwURV8PAvBBjlhf2JDnL
qMDtpwCXC/4O5zzr3NsafJqJUX3D8UN1zpUvrwS7fetlc8br2pvPtM843/+3
0+WPTUCz/4GKz1cG7D8R+zOn4CP4vzCD835vggOoNzlfDGgWmCF4Q4SK0CUL
XPVbllMquFoNbJEOLunSyxjdTP+7USkG2JjHWZZfOz88+SxXv6DUtmIgfqgj
rKvYvixbP9/tpyDPK9E339N9csbhzhk71X89B/wNnl5pYJQ99hrYf9e8siH/
B9g+KuAllGopEoPkyoViLswb6xlG29dod5MG3rFr+sSvR6+y63lNtXpank5G
zMNErG1VyYt2p599td/XrbOrrLQuafFvrvKsrfNrS9DKsfnO2/q8l8q7T1RO
Pblw6NbDfxjzEIlIIBby2BJQxkI+/FoU/1t9lBnjwWCDBa5sgB9QFZcLXoL6
hxFQlvylhdXekrYd7OieXlHnQWPsYTOyUUOPcfmsTWW1Vqb7eVfnyy8L3Tsx
lmW19hWUGNJAQFOeYUaeRX5zUF+CHi5KMzvqYUq8ZmqWYU6o6ssQtZe8Ge4r
BSrdklO5qzCoZcFrQhCIkNdbWeYgUACPcvEQ4HAQ5QmEEEDi8ZU4JSIxnc5c
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
    "], {{0, 67}, {50, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{50, 67},
  PlotRange->{{0, 50}, {0, 67}}]], "Output",
 CellChangeTimes->{
  3.474803185942085*^9, 3.474803730068915*^9, 3.474803775896688*^9, 
   3.474805432956568*^9, 3.4748056554349604`*^9, 3.474807321080887*^9, {
   3.4748076000955935`*^9, 3.474807619567623*^9}, 3.474808264281044*^9, 
   3.4748083154983683`*^9, 3.4748097961475153`*^9, 3.4748141376412334`*^9, 
   3.4748144192186346`*^9, 3.474814522380379*^9, 3.474814598609796*^9, {
   3.474815204474183*^9, 3.474815229659268*^9}, 3.4748203348099813`*^9, 
   3.4748208489341545`*^9, 3.4748214752327967`*^9, {3.4748215083554645`*^9, 
   3.474821534150584*^9}, {3.474829588811269*^9, 3.4748296366315165`*^9}, 
   3.4748302785207253`*^9, 3.4748303593760138`*^9, 3.474830469894164*^9, 
   3.4748305663361545`*^9, 3.4748321319783916`*^9, 3.47490128410262*^9, 
   3.4749016042691765`*^9, 3.474912025969406*^9, 3.4749164462950425`*^9, 
   3.4749170128787603`*^9, 3.4749741974753933`*^9, 3.4749784952211885`*^9, 
   3.4749872432831154`*^9, 3.47498901011759*^9, 3.4749990177883015`*^9, 
   3.474999472632372*^9, 3.474999690793229*^9, 3.475000781001218*^9, 
   3.475001446001837*^9, 3.475002657401577*^9, 3.525011724444052*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"ImageData", "[", "img", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.474807377510375*^9, 3.4748073888555737`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"67", ",", "50", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.4748073903224907`*^9, {3.4748076001268234`*^9, 3.474807619598853*^9}, 
   3.4748082642966633`*^9, 3.4748083154983683`*^9, 3.474809796163136*^9, 
   3.4748141376412334`*^9, 3.4748144215774207`*^9, 3.474814522396*^9, 
   3.4748145986254168`*^9, {3.4748152044898157`*^9, 3.474815229674901*^9}, 
   3.474820339762948*^9, 3.4748208489497786`*^9, 3.4748214766233234`*^9, {
   3.4748215094335136`*^9, 3.4748215341818323`*^9}, {3.474829588842372*^9, 
   3.474829636647068*^9}, 3.4748302799715905`*^9, 3.4748303593916187`*^9, 
   3.47483046990977*^9, 3.47483056635176*^9, 3.4748321319940004`*^9, 
   3.4749012841182456`*^9, 3.474901604284792*^9, 3.4749120260006485`*^9, 
   3.474916446326288*^9, 3.4749170129100065`*^9, 3.4749741975378656`*^9, 
   3.474978495236808*^9, 3.4749872433143024`*^9, 3.474989012242223*^9, 
   3.4749990178039193`*^9, 3.4749994726479893`*^9, 3.4749996908088465`*^9, 
   3.475000781016858*^9, 3.4750014460331078`*^9, 3.475002657432846*^9, 
   3.525011724475252*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "chnlWeights", ",", " ", "colorBasis", ",", " ", "deconvImgFixed"}], 
    "}"}], " ", "=", " ", 
   RowBox[{"processImageV1", "[", "img", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.4748031956896515`*^9, 3.4748032156221747`*^9}, 
   3.4748032463176365`*^9, {3.4748033777067084`*^9, 3.4748033939838943`*^9}, 
   3.4748076136651154`*^9, {3.474978410317528*^9, 3.4749784108174443`*^9}, {
   3.474999425264494*^9, 3.4749994261546917`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"findH: Dimensions of h:\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2884", ",", "2"}], "}"}]}],
  SequenceForm["findH: Dimensions of h:", {2884, 2}],
  Editable->False]], "Print",
 CellChangeTimes->{3.4749990182724442`*^9, 3.474999473100897*^9, 
  3.4749996912773714`*^9, 3.4750007814860735`*^9, 3.4750014465021725`*^9, 
  3.4750026579018908`*^9, 3.525011724740453*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["deconvImgFixed"], "Input",
 CellChangeTimes->{{3.4748076306231136`*^9, 3.474807635120262*^9}, {
  3.4749994289658413`*^9, 3.4749994304338865`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzVnQnQbVdV58MgQwCjBOLYIBKMikQILTbacCmDCIKIYEMKFBkVECSF7dBA
06jMmgYEGlQcQNMQJCQhQBgSM4c8EjK8vCF5md78vjclQUWhRaq/e8/326fO
b90/597wUupXlapk59S5++y91n/917DXftALXvn0F9/lsMMOO371n+NW/5n+
+3v++1+/71+/unWy+8hH/NmT3/yFyWFrf8+77YSb/vZh2yc73/PzF7382C+2
8RPf++rjXve5nZMXfeJ3dx35iMva+BM/ccHux31w12Rl/Qfu9rlHrmvjRz78
d3/k1o27Jy857tln//1bLy3j2zfddMK//t4Vbfx909dv2DHZ+h2/cfCkjVe2
8S9Np/OqGye3PuUJf/isx17dxn/uvK1nnP2s6yc/+IJHvfdbf+zaNv77j3/o
y7/16C2TPbP5XFee/8jrf+XTn/zxTW38Xn92l7c+89obJg977lcff/nu9W38
A3/8G/c7c3Lz5MAV0y++po1/8P6Puvt9T91a3nP2hnd96fqTb5q87PSffNfV
2zeW5z9059dt23RTP0/W//8ef5/f/rXjtrTx7/yv/+efX/aHN0xOOf+W1S/e
3MbPuvS3fuB5t107WXnnfV/1w1v78bfvOmfL92++bvKrv7n3aX9wY/+9B54y
/eDNkx960OyXy/P+3tdMl/9d2yY/+p9mX9DGL3jh/zjtU5fumpz22u9f/Ymr
yrj3/X/+l/usLt3OMj5dhdMfvbXIw0Nu/MFf/V+PvaHI2+Me+NTjP/w315ff
3XTUZ664671vKnLCOls+kWfL+TN+/pJXvvfV2ycvf+VHv/64t19U1qHbx4vb
+Ne/euJ3/9RDblxb53VlPW85aeMDV965XnK+ae39G8p42t99q2//kz/aVOTZ
8sbvWt4ueuk9VkXr2rLvUy3683teW373JXe+2/RVRQ6Zz4tn63m99H1jef5B
Vx++qkmbJjt/8bwfvWFL//x/m/1tnBz9kNn/aeOzx59Zv5dxzx999D6m8T2P
m0rE9kkHD71cffsP733CI/5lRxn/09efvyrRu8t4tw4rk+f9zg/89cUP7eXt
qwefvipBewqOIVfdOvRyuG76mhOq3LK/xrdnP/83v+/qw6+ffOycM/7fXR7T
y9Ujp+L5pawX1t+PPfJOf/D5v7+p4Bg4k9Y/jRt/7tYJYsRPyw847Pf81hQO
T9xS9IV1OHE6/O7+e8HPh9+w5Xv+dtKPX3nXez/gstfsKvvYyefutd/9fBm3
/Jz7y/vWfeXg9rJf4JLfD455nuy7n0dOjIedvuyavORLXzjmBY/q5zlTu/vv
XsOZC9r4o6dwe78dZf7gleUKfPD+Yi9sp8CrRfHnI8fsOOvJj6l4iLxZDpEr
z5PxVxw7Fej+eeyscWb6q9917o2TD/zMz156yutv1j6uX1ufHq9+svuwtX25
sTxvuUXO9x/xj0+856M3Fnnu9rFfN3iLcQC+YXngecvPK965f3VnFrfLJzxn
508c+fCVYqc2fNsU+PYXeev2a2+Rn7dd95dHfOhBO8t7mKdxD1zyPNEL62my
49gjfxfjxg3si/eL/e3MTt137+Nbrpku0LZip978tCf9+Nuuu7nIOXo9nf0D
V/rvRe/MQ444eopk28r6s48ef/1j3/+mpz1pz9r7zy92x/jwwn/ac+FL77Gr
7Avz9Dhy6Pmf/qmpwdta5BC7aTlhPsbVDmdWJisznPlUmae/94dWpeT9b9pa
1hn89/6CY+a96OmqrD34ITurHTGewEtPnX7uO/rxy7/+2lUmu33yI3/5lut+
6Sc2FHnw/oJvXgd4qb+L7zX+dOuzcXLMKttY/enCux7cfbB4zvrJi75891f/
zRt6uU18Epw0ziMP3pckzwmvkDfjwKpR/uRPf2xH4Qmrk1lF3MqvpujwgMv2
r83/kjb+x1M4PONA8S9Wye3qFuwpfgT2wngL3zC/SryLdbOdwt55HRLPB692
zObZ7yP82XaK5y3PyK3tMv6O5fnjZz9r1TLsKPuCvns9v/fiA1e++Zqtk5fP
9OXCNn7sbKF3F/yBJ3d4fm6xR1tn+PN3hadZ3tAX4xV2pJPzy0fxCv7m94BX
Xp8pGzvudfvX5Oec8rxxD3th/ER+HtotROEz5rfgmO0d+mh5gx/aP2Kd/bsd
Hu4p63by90w3eMfkttn7e/uC/2scYz39u3yv5Rz5t58IvtkuI//GW3DGcR7W
x/LJfDyO/ia/zPwE+Tc/Qf4tb53Z2Vve3/HD/YVHzZbnqL1FH/9x239+w89+
dlv5Xb7L+AkP976Db5Zz8Mo8nPjAS2d6vbnsl+0Fv+t97/Rlc9EL+F5aZ68b
eOVx7LLXs+GV4jktTiV5fvDmP1n1+PcWOXnyZ39h9ScqXuEnGvem3vuzn78j
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
Q/y/uL5f82Hc+DysBxj3N8Fn+7M87/eTF/A86WNgvaAO1rw6nctLeWr8aONP
iqcRP7cfynvMT9r6CK/SuWb8GusL9Y1eH847OA7Z6s+l7/gRxivWx9/FuPkn
fqXfDy5Z/rFTthesg3Ej2SNwyfhG3M84Bn/z+qc4IXEtjyOH6fy78Qo8Mc7A
K3yOsuO915TzaMib696Rz9RXxHg1rLs+v4x7v4ZyXutL0/v9nsSXkj84Nu73
DOsw+3k2PiYeBT9MeNXh0hkLf6/xZFin1K/DtjOmjuW+oncfndLP7zxQ7HuK
8xBXsd1Mda2sT/IT07l4/y55ZM8TXDIOcG7U+8j5d+sj/Mr4Cf4Yn/FPjc/4
R6kOIfVtsN+a+iCBV54Pz3t/03mBVs8Z1tk4SVzC9g5cMk4ybhwj72mcT+c7
yF/4nCBxQp/TR48cT0NfvF/gZDqPY56Q+MnY88aHhBtpPP0u8zfOjH2X3w8P
tDwwbpyBj9nuJ/xn3PF/3m9egR2cX7+6v8g/9bGeD36o5R8/yPKc+k21fIf8
DuIenn+q88HfSf06jBucN7G+wB+8Po3nBF5kvw97YZwZ1pH2eNX8MvkF4IzX
gXMulrdWry55aHVT4vm8x3II3vp34V3e95TXaP3rQr7VcoVf7PUEx3wepJPD
imPwsYRvjo8lvR7jXQmvFsWZ5IeOvcfy0/w4xduHfkovD8PzXL084G9aH8mD
2B8nTtjp17Y2nvLFrc9MmI/zqth3fxf1SJ4nem37iJxb3vCbLM/EOe13gG9+
D3EP8xx4nd+Df2E+AG/xeIp3gTPmbykPgj/ueDLxwBTPsf0Cl7wOnMuzfNKv
xnFUxi3/xPHSOXHj/zAP2/NS4lTG83YeROvM+SnLA+tgPASvUn2g407kGY1j
4JVxiXrF1IdzUby6o3lRmk/iaUM/pcefdt5tptenFnxz3Am7YD+dupSTjpoy
gh0Fx7p8x66ip+5vBu/1d7U86WwdTivyYH8Te+r1pN7S8kl+3HKFHff3gmPm
OcTPLefwN78fHDCOtb5wwlvw2b+L3Xeekd81P2T97eciJ9aLlMcEP417qc8M
/rv1mnHbKc69us6HOjTbr9SHh335xn0I15f3ex+RkxQ3S+fjUt2Ifxd7bZ6M
HpmnEa9w3vZQ8ZyEJ+n9y+JVwk/WIdUz3Dab58fbeIpHgfOWhy4esr743Tzf
+TVbyzo4Tsh3+XuH/SFr3N7zHPa76OUZvmE+Az9x/pH4xqqSPuNO5/bzJy/W
Tf+mNk49wPw+OZX/MG4+AD6YB/JdCa+8nuCG67uICxl/eL/tNXV01gviTvPP
VdV6J/q32M+6ZTrN91a86uzm/iKf8Gc/T3zA8tnOXwhnwCXvF7zO8wdXbUfA
vdRHwv7j8PxLPbfucXDP8oPdsZwsi1dj8Z+EP8uOLxt38nuG9ZP9eDs/Ir7d
+r0oPk9+1jhAPN/vH/bHqHVcqa5j0foKeKNxDHz2++GT1jv80Ht95Y3Pec0L
e34IDnfyWXljx2d6/xeeY3nDb/L6ECe3XiO3tuPwQOMVeUbHY6nDNO5xLsZ8
LJ3vww8yT0MfHX/Dn3IcG/wxzoBv9uPIe5oPwKu9btgXz4f3uH6A/jnmwymP
g12wXA3jb709As+NS+yL5w8Op3NMqT5nUdwYG09xb+PDsr+b/Mo0nvKGw3Pf
FU+Mh/hx5m+NF4nPN/4mnEnfm/IUiTemeFfCQ/xZ7zvrZj+X+Rz+6Pvfdq+z
drdx8kQ/N53mt/fPg1fzzwuvlPXHvnv9iQ8nO249Ag+Nw7zf9QnwDftN4EDK
69l/IV5kfacu2nwg5enQd/9u6j+PPXJ9bMqPgA8+XwNO2v/q5PZA4UvgleUQ
XEp83n4iuJTuqUnnmLzvh4oXJVw6VHi1LI7h/y5a/5Den/BhrC7LeNX4Xlqf
Zdd5wXxo6mNGPNN+BM+bz6T6QPTafhb23XrazXNfkVvyg5Z/8MH72/oN6j2t
HkD2HT21vhP38zzxgzxOfC/lVVM/Z8dzwB+PkxdI59/TPQKpX5zjAOSRjVdH
zQB3b1lPcM/r384jSI/IJ5p3YXf8fniU5098w+9ZVl8OFV6Njt9BvGssLpfG
F12HhEvJv2vjilckfjXGu5x3aP0rxAPTeKq7gJfa7uOf2i9DX+bHS/cVXoS+
2C4P65r6dSY+ZrxNfZvp3+i6KfiYeRc4ZnyDBxqX0r0GyI/PoTBuP5R9MY6x
zum+J68bfqL9LPheuv/I/hp1WeY5qd87PDz1ifL6pzxs69M4148+dHGnb9Yf
vKPxKo2P5UNTHCzlERbNC6T1abxOuNHq6oUz8L10ftx5Ruy+471p/ikuBx+z
PBPvSvcVGt+Iq1h/8Rdsx4mDeZzzd5Z/cGm+X7y38Dr4ofULv8Z2n+9N8Rbj
WOqXRX7NeEIdSDq37vUfnqutfbPt5xLHS/cFGMdSnXDiUeyX+SF1OP4u7F2s
KzhE/todFb8ayzMuG2dbdP6pvivVUYAzi34vuLdo/Kr5m/JD8ReMP4nX8X7L
IfN0/AdcMp9J8UDm6fFUT048JPVPtj7ip3h90nlhxv0e8Mr6ld7DORqPtzxj
uJ/Fz7c6NK0/+m7+lupD4DPGgdRPI/XBY9z7ks5hpXtA8KP9fu4hml9nsr98
L3zP9jfl0Q4VXv1HGU+4l/hewqt0znpsPovWpzW/L/iJKc5v3s54qk+2/5Lu
L0v+cvJz0S/bfeIV5l3EpW33yceZF+En2q/neft37f6FUO/t9+CfWk6Iwziv
B854f1s/OslPuqcVnPe6pXpX6hxSP5YUBzNu4Fd6PNXdJfuSeC91aM6ztHuL
hP/pvNvt9vv+jXDmjorzL3suid9dlC+N2YtF+WGq02D+6Vz5/HrIzeEeouuK
HzS8V7rPR6S8A+uT6oh8Ho04iXGV/JH1KJ0XTvclEdeyHsH3jD/4g95f8o/G
Q+owPQ5PMx4St7Gegode/3YfhL4XHPP+pvv14EueJ+e+bRfS/Yb49ear2AX7
1+CV5fZ3TpkK7sF4Pu6b9e9uLz78exlPeDsWh18Ux9I6J5627O+Ozd+/2/Kk
kh/wav792vV3W72H5g8epnyl7S92v2sL19flEj/xORp4SKqDSn3zjFfYfa9z
4gOpbxV1VtZf4jPWX8bTPRGJ16V72Yxv4JXtFOtmfOO77A9Sl2K/Ev4z/x6K
g8WOcJ7d69nFVw+W7+3w85byvSmftSxejcVh7mg+dsj4YeiXtWicfNnfTe9f
Nr+Z3pPGE/6kutmx9TGPanlG8S7qUY1L+Lmu7yJf5v6W6X4Z8lkJB5yXTH2Y
U36QvlLWoxSfJ+9p/e30Yl+J56T8JvNP551THwnjFbzU9ij196D+wbjEd/l7
uzj8gWIXOru2v8wfvJp/L8/BYhdSHir5L8v2gbndOHYHx+e/Wd54qHDsUOHV
WPzf+5vwin1M/cG8nvgRln/6SdrvoG+bz4nz/BStzvzMzjZOvsznManzSf1a
HR/Gr3FcLsVhWjw/3LPsdQDHnAdJ8TH8JsfrqO8yH2vn08M5F+MA+TXjMHhu
/U39Jej/k/oCeZz+IfPr0/aHfoAHSn6HOHzqt+b8OHpnPUr98Yb3F/d4nvAq
6entjf9/s3xsrN5g2ThVwkk/n+LnY3bB9ij97lj8f1F/dlgX0Y+TH7ce0Z/N
ftwMTl71xclTv+VrF5x6To9XnHvyOSDqxo/4sWv/fN1L+ufJx5lfEce2/ONv
ut84ODb/fuE9hf/QPzD1Mfa5dfDN+0gdlHGs5SOEk8Sd0r0MxlvyDuaHxN/m
9yep54Co4zUPaX0jZadSvJ28ScJ/+5utT4Xs3fDeqNRf7izt13Xle9EX41XS
u7HzgIviyViezuOpj2jiRWP4k+Le/q6xfoaHKl+Z5p/en+rQUt/ChIeWz85/
2VD0vTsneNVkekrk2Wdvb+N/NctDXVnOj9MHyffI4ycal8A313Uzz9Tnx3hF
vN38hziM4974O16fYZ+WXt6on7Q8pPsi0/nfVB8OPzSepHgdeQH7d/ihxr3U
3yzVj8GL0r3klp90vxJy63hCui+SOGqqY7S+JLxKdTuH6jz1sng4Vq++KF6N
1Yv6/WN5tIQni+Le2Lnv1Gcj4V6yU+Z7nPexvvN+x6mI8/s8I+93/zH2K9Vd
O58IbzFepf7k8BPPH7/G76ffgudDfCz1M/T6Uz+Q7u01j0p8DP/R+JP8WfzW
1F/R/inzsb/Jetrvg5+nc/fz413Xhz42V6397u7yuz6Pn3hXu7ddfmXyXziH
6/heioMl/zH5m+l3wbFF/anby39iHjDwwxQfS/UJi9b9pnVL+Dza3z7M3/aL
/bW+ILcP7gx24W/dfG4u++u691ZXpt+l3tL2nfNu5l0pv08833yGOLPrLugb
43mCA7b7xN+MY82/DvdjLtp3Zdgnp+cDLd4l+0h+wXg1rMutdfLGW/hS6gPj
eOMQN6qcmB92fOnStfGVwrc7Pr+9rJv5YbsnRTiW7rvhfjfbo9anS3iF3+r3
t3HFOZf1m5YdT/wk4eGy+LZsHVfjaal/aahvXxTHxtbH74c/J95rnpbO+/Ce
NE+Pt3siZJeJ26T7EO2npD4J6b4/4s8+J06dg3lFi19pns3PUvwc/zGd37S+
D+/37OVweA9mL1fkDdP5cX9vu7dd8sD7PR94Y+LDaR8tP1188urCr5D/p100
RY4+nsA5gnSPm8+DJPwZ3s9u/KzPJ78pndttfV2C3+r3jNWNx/qluf1Sal1T
wrE0nvAw+WXL1jMsi1eJZ47GAxfsn5PGWU/rV8L51rdZvJ04jP2UdF8M9e2W
81YnIPnEb/Lz4Jt5EXzPdp94lOef7scZ1r33+wi/Mp6AY17Pds+vvivFr5in
1x+ct9zyvHkavM55B84bGh86PK/xT+yd74dNcSrkzfynxTeEJ/Auf+9Yf6pU
n7+oP5XuE0xxoWVxJtWT813GsbE6kFQvumhcbtnzlWN1sOket+SfLusXp/hY
iov6Pdgvryd+ULqPxnlG6t4dv0r6C/5YvxKPSveAEO9atN6p9VWeG2+p9WCc
a/a+NH9T65zuOx7ywLPKuNcB/9r5YuJpXmfyFObDHT6vj3HOLq7Yj+O3dvve
xx/A8+Snp/tVnf9N/RDG9Np6hL4kffd7xnhRqtNY9HfR6zSecCC9f9n6ikXr
7ZfFsWXr65YdT3iYzh+lOpxhH+met8CLzLsSjjHu56lrMn9ofVcUF6Kvnd9D
XVa6x83fRR24cYM8pveROnavMzhj/wgc87lj4jBJv+b3m91c+qQRJ3ddHP6j
/WvqYYxL+Gsdv+rr98CZy3dPN2BH2ZdufXr/kX5Bvg8xxevAJa9/6hu87Dni
dD439YcZq4df1C8bq38wno/dKx37XwV/cNHvWrY+5FD1MVu2jnfs3jS/hziw
8ardvyycod7SPKrVJ+h5/L6UvzNfgnc5L8k5F9eB/PKvTQH9YJHn7u+20i/o
ZVPz+76DZZx6da8P+UTHT4iPpb4f1l9wwzif7ncGx/y96Tw+dTIdT+vjV5yb
cFwLP+4LMwe7H0cvXO9H3tP1gcPzZfX8uPE8ne9ocX7F2xu+aTzlN5PfSp7C
z4/F4Rete0+8LuFJwqXRvqYL1oEkXErx/GXjV2n8dp93WDB/2u5F0joTtzEu
4a+lekjHl/DjrHf4U85XDvvtX1XeYz+oO0d5S4nzdHb/1iLnDd+EM/TP8T62
8z6SH+L89oPgRZZD5Hl+38VrSr0u+/uN/dbaD8T9uod9SPaU+dxjddXef3if
T+R+sXWnTIGvf544mN8Pj+ryJj1PG/bt6Xka+UTfA4v9ev4sztnnwbGbH1zd
le96WH/Py/CcwqbyHsv/sL6l10f46qK8aOyeC+e1uQ8xxrtC3Zrnc6jrdWNd
1oJx+2XrLpYdX7ZuP+kL+S/vC3rtuDd+luMh+B3pHm3H+ZFb8xPyj8Y9ztmZ
N+I/eh/xN9P5bstP60s8w7GPtPF239xMrj7Yxof3Glxc1t/r0+pJwn2L9ivR
O9+jR9zyrdMo2PPG8Qoe2Pl9/Tj3U//M7GDYXtm1q0odRWePrpq85bunK9eP
d+fN15dxeOCT7jkFxD3lu+591j9dsu+I3p/l/ILxkHHff8T6p7o+y3Pr25n8
0HQvj/CH8ym27ymvmp5P+JbigSnvmZ4f7Rex4HnMZflVituP5Xn9ftbf69b6
uGod6BdhfYcPOE5FXsx+DfplHkL+3byC8y+O53Bu2vEf+ir4u6hj9z5Sd+Hv
JU9qv5JzTx1OfqisT+K35ofkKbxunAMybpN//N9Tdbxvnx/ETjlveO8ZD7x8
8pQ3T4GjxwHOU5hfgTNvnLqtz9nfxmfbcuIXynjn11+49l0H2vhrZ7h30WTH
TA4PCp+vWrvPel+xX+Z18PNuX3peB/68eJbHub7KrfxExr0v6dxKwquk7+iR
7dTQT6/3iyW+l/jSovlZeLJ/N/G0Mbxatt4s3QOyKF4lP5f4ib8rrX/Lv0jf
iRv4efi8+RXxIsfbyQtYr9FT13FxLs95/HbPqd5D/G1+vmml4HnLMyo+Q11H
is97/dEL50PJU3gdqGfwd5HX8zkF7LXzgOCP411fmcnz5wvvAt+6+EDPr8Cf
u0/dtefulZxcOrnbNNx1Ro8/5AW67zW+XTP5/L6poPg91xbehdz63j38NX9v
ipuN1aVbL1J8eDS+vWAcLPWhwo6nfnrJn1q0Dnas39ey5wIWxau0/mN4leKN
iWd6vOG5xlM/c/DK5xzp3+J6e/wv8yviSK7voh+F+Rt4YrzCn039Gbw+jFt+
Wj8xyVurc1AcDDxPdSaeJ+vm72W/jG/oe+df9/Ef7jt23vDoGX5evuZP9fgA
XnX3gPd40un1ZQXfOj55RYmb4Qd5HLkyj2L+nTzU+0DtJ7Ke3T72fHLYh7Oe
//X+pjrVFAdO94WlfEHKn6b6tzTecDjE51Od/KLnwcfyrYvmBw9VXUTC/7F8
buobFusPU52S/B3qVI1jxG18/hr/y3Vc9OXze4iD+fxLu3cm9FM1Tyb+7+/l
nI73MfWjJt5inEx9CMFbx1vQx87P6nkF9tfncYh7p3s2nTeEb3f8rccZeFHC
MeMe8a63ve+LJx9/n/79Hf+8oviz4Jv7KcEbPY48O4+Z8olD/j/nnhqNJ/xJ
+U3m4/cQT/P5X/JNPo/A9zpPkXhC07uAV7Gec8G6hVRvcKj6jC2LV2NxsHT/
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
    "], {{0, 67}, {50, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{50, 67},
  PlotRange->{{0, 50}, {0, 67}}]], "Output",
 CellChangeTimes->{
  3.4748076362913947`*^9, 3.474808264780877*^9, 3.474808315966962*^9, 
   3.4748097967098536`*^9, 3.474814138125521*^9, 3.4748143263511953`*^9, 
   3.4748144285600524`*^9, 3.474814522864633*^9, 3.4748145990940375`*^9, {
   3.4748152049744453`*^9, 3.4748152301595306`*^9}, 3.4748203425597334`*^9, 
   3.4748208494341383`*^9, 3.4748214787325497`*^9, {3.4748215114802446`*^9, 
   3.4748215346661797`*^9}, {3.4748295893400135`*^9, 3.474829637238017*^9}, 
   3.4748302823272963`*^9, 3.474830359922206*^9, 3.4748304704091463`*^9, 
   3.474830566897952*^9, 3.474832132477851*^9, 3.4749012846026487`*^9, 
   3.474901604753257*^9, 3.474912026531762*^9, 3.4749164468887167`*^9, 
   3.4749170134411883`*^9, 3.4749741980376444`*^9, 3.4749784957210093`*^9, 
   3.474987243782101*^9, 3.47498901460119*^9, 3.4749990183036795`*^9, 
   3.4749994731321316`*^9, 3.474999691308607*^9, 3.4750007815017138`*^9, 
   3.475001446517808*^9, 3.4750026579175253`*^9, 3.5250117247716527`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"ImageData", "[", "deconvImgFixed", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.4748074154161344`*^9, 3.474807423765077*^9}, {
  3.4749996550447717`*^9, 3.474999656059909*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"67", ",", "50", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.4748074283062773`*^9, {3.474807601001269*^9, 3.474807620114151*^9}, 
   3.474808264780877*^9, 3.474808315982582*^9, 3.4748097967254744`*^9, 
   3.474814138141144*^9, 3.474814430293995*^9, 3.4748145228802547`*^9, 
   3.4748145991096582`*^9, {3.4748152049900784`*^9, 3.4748152301751633`*^9}, 
   3.474820343981563*^9, 3.474820849449763*^9, 3.4748214797949753`*^9, {
   3.474821513214497*^9, 3.4748215346818037`*^9}, {3.474829589355564*^9, 
   3.4748296372691197`*^9}, 3.4748302859934607`*^9, 3.4748303599378114`*^9, 
   3.4748304704247513`*^9, 3.474830566913558*^9, 3.4748321324934597`*^9, 
   3.4749012846182747`*^9, 3.4749016047688723`*^9, 3.4749120265630045`*^9, 
   3.4749164469199624`*^9, 3.474917013472434*^9, 3.4749741980532627`*^9, 
   3.4749784957366285`*^9, 3.4749872438132877`*^9, 3.4749890172410574`*^9, 
   3.474999018319297*^9, 3.474999473147749*^9, {3.474999667507537*^9, 
   3.4749996913242245`*^9}, 3.4750007815329947`*^9, 3.4750014465334435`*^9, 
   3.475002657948795*^9, 3.5250117248028526`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deconvImgsFromFixedW", "=", 
  RowBox[{"ColorSeparate", "[", "deconvImgFixed", "]"}]}]], "Input",
 CellChangeTimes->{{3.4748032236826625`*^9, 3.474803229524954*^9}, {
   3.474803401388296*^9, 3.4748034035596285`*^9}, {3.474998693459679*^9, 
   3.474998702517829*^9}, 3.474999348317072*^9, {3.474999660057989*^9, 
   3.474999661010657*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyt3QvQp1MdB/BNRkipXEZlRJGuRjSVLh6TMqSLVBiNxrVikh2lC5KpBilT
kahUUia6sO5hhcXajbA3u8uy7+6794tLKgyZ/s//+X/OO+/3nTPvqszsnHn+
7/Oc55zf9/f7/i7nPMd2hx+3/1HrTZgwYc/ev116/8798m/O//fTQ82hjx30
8B/euriZeN6Ju5xy45Jm76unLNvjoqXNZjt/7S2PzllW2vPbP88ebh5vbz/+
oeYjtwxdMfnAB5tvfeDNX3jp9g+U6xf//IXfPWDegubXZ39x86uahc1FW7zj
Ra/401AzefY5jz948cPl2vu3eu9Pnjzmewua66ad8PpDH5vX/GDpTQ+8du78
Zs2H2w7nluuT2tefs6iZcsTXL7922tLSfuNdL+m9aknT9jppt6Fmh4fe8Nlv
7r6g2eM1H93zkt8+2Ny/5fX3rL/JyHvN9xMfm3rceScuLv0+9/TEV71/h4fK
+7p5319a4zNf991+9Ia9qcxrWqn8YqN5zefX26D9U7m/k+ecZrsZG/ckc3/z
qf5/c5r+5QHzSkte2uV7tCNe3Lz8TSv3etszw83PTr21N+Nlg35XNE+v3b83
g+VlHtPbnw96uIzv4MO+tO2MjR9sdm2n9/iIHC7b9QXfvvPvDxe55zg26CZW
xgHXE1q4Jo70C797199km7tOWjqY37LS3nzIqulPrV1ccICLcRp3J4+lTV9M
Wyxrdmvh3Hy44EG+9AEe5P/7HYev2/d986vzoXftXa+8+aHBuGY27+k6Ktfm
bb70nD67PvZHq3sjGdHDgz695N2b7byimf2yFqjVg/GsbM6c/6tNf7fdkvIc
HMgBHvRFSz+MT3vGrPYFi5rT99vnnWfOX1jkSE6bbt8iMzKuU3e/4LT99lle
9OSIfy2/7egNl5bnzGvSta1CDRU9c38n9xXluTf2Rn3BaUMFf7iQm9/Z4d3P
ndyzzMVlvPBhh/rr+p9T7KTT+5nFfuBmvOZLrubTU8JrPnjZcNO7uYfoiqaV
7jZ3rW7ObuG6Yk3TM87eEJYXfUh99h76RM/gkfZrnvjkyskH9jRhuMhz6zvW
3Hv6rKFmp/6LR+yWvrAb8qAXnmc/8GitZZdTVpdr+mD89B0u5MW+vLfDa3lz
8avbAQ4X/vM+/Zk/fMw/7SLlB4+cf6cmKwf2tbrpd7/lyuYfi97+nQ/dMDIP
dg0feOBX43FfJ4+5xZ68Fx700O/s43Vzf9pj1JXNvjd8vHfLisJbLXsefNhw
mQe+ND/63PHsqgEvjeBBLuyZ3tMX7/G89qhnv3LpjsPLi59dcPEvv79wp6WF
Z5PX4NFaeW9ARX/Iy/WPe9re66mMm7w7Xlla5t/1s7Lopef0R85wyGvjgFu+
33vpGb7i5+gleZ61cKd/HvnssmLXxg/nfA88yZddwYMfgucDLT1/cnG5H29v
1Bf4ymKv5LR+r5et915S5kEuKR98aFwZF3g/faRneAkPP/NE+6JVBR96TM7e
473s3jzTfsQF9LgdxWeOXVRavJN82hPSzLMOH/Hr9BOO/PVNrbltNlTiBnEj
/0Ee7Nw42Y378JXn6QP9YBd79QW5uNgVu0h54LH0W95PP1MOeI6fwmN4C3+y
75rc+TG/w49epN9k7xnP0X/zhg975Rf4/SdbcZ67pMxH3ELvMn4yX/3rVz/k
Lk9gP/TW8/yzeE2Lr+BEXu43P/PHD8ZrHvQMLnBIXmFnxkcvxFN4AT4Z/7ET
PJLxmvH7u3gPb3XzXFHwIDd8B1/yMA5xIn3UL/0TJ2v5M3KiL/SNHOiXedBD
+kce5C8+hzM7zRYucDR+dmW+8CVXegEPv7OnjAP0q5/kE/cbP7nwq+JCuMhz
xW/w15IjfaNn4gp8pZ/Eh16Qs/myN3JJHk39Zbfs3fuN23y9j9zZIzmRK3tI
fUi+8l446yfzfXzvffCAm/eQF3uQz+IZ79Nfl9fPLvGe8Zln8lLWK+DSetMn
Fi0p84RvJ8dZhRf0y061/B39NB92AT9xAf0kD3JnX8bhmly1mR9p4U1v6Ac+
gkvaX+az4n28Qv70llzNh77AQf5Dbt5DXnDt/NuIvbFH+qtfdiH/02/GS+Ii
8Tl5ZX0DH8HJvOkj/U6eh4ffM/80bvoAD/gkL6XdZx2FPuN5/aVfp8fea34Z
T5CX8YpX8ZL8Vx4ormI/4kvy4pdyHl1/9xdcRudDD4xps+7hd/FP1tfICY/k
Nb9b0+Oan/XerOMlX+E7chH3Zl5CH/EWPcBf9Jtfxhfi27S75C92SC/oJzzE
U51fmlXiWvMwP797LvHxe9bZEv9avADfrM+oy8orxafkUKv7Jl/iVzwiP1NP
gAte0L8Wj8Eh6x30BQ78FPtxzY+YF79L3vS4s9NZZT45v5Sn39mv3z1Xa/EH
+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
U34Hz67sb5SndPpyX/l+ml3pR/1A6/3+nvvWcx+K9+a+lFpb2yeZ9pH1sIxT
cn8/fRUHkY/4U/1DnVEdV14uTha3qdPon36IG9RVxF/0ZpO+Xd1d6g3k3h/G
xL8OePS25uQ+TreX+Iz+sG/yN8/cL59xUm3ffMa7+T3kuuYz6Zcyj8x1Ljyb
32eIA/Kch1znsh4sPhBHsxNyEDeId8VR9JH8n+rP986CD/l3455W4gDf/5hP
+glt5uH5e/rnzG9c19a5xovP0j5ynLlfCd/DQ/0c/+R+BPLGdxmvZR0L3lkf
Th63n3D7Pn53Fzw6Od41sLd7Cq+YR+r36Px/3pjvpcgz19PTf9TyxeSdWjxX
i4Nr9c98L/nJG/F8fgef35WpT+Z3c+woeR2emW/z08aT38HBhT/p7O+eMbyf
6355HkQtj+NvxDP5PXDiOF6eUas3p13W7MZz5M5vsJOsZ8nX4KHuzq+wF/4e
TqO/Zxg5zwjv82fiXes78OjGf1dzRl/c9w7qLzPGxM/wyPN9yJW9m0fG6eQh
jk+/UvvOIesGKd/cp1Or8+iXfuR3B+7P84Pk+/IV/p298BfsbfT31FObzfvT
n1rydfJT5zLuPDcg46b0t66zfgs3cW6eEyE+Z6953kWuZ6U9wsU48vyptKfM
azOOM2/yYCfsI79HE9fkOpc6i5b9sCfxEn33fus4OW744an8Tri2X8r4avtH
8rty8k85577E/A478SLHrEvzC96b8XPWC4wz9817f8YD+AsPyUvse7c/IteJ
1dv5cfqYftr5Wfy5eKvrd3rx+/Axf/UW342JI/KcOXLiJ/EYubAn+KhLaz2f
+03yfDT+Vlya64W5ru85+iPekzfk+WnpF3P/Ozzkk+yCP8H75J32Cxf+A27s
nzz4d/elX1PXwaOj9zWPrYdk3oE/+aXu/dc0Q319uWTg72aM2VeY+SK/yA8Y
J71PuZo/HqKf9AZfsVctHI2bPSUe6gDywYwjXXuP33Od0fvIh/6yD/NiB3AR
Z7jOeljtPKiMs+b17fQvBRdxBrnj+fTf+sv109xXmOfuqFOIf9S95CGu8zw7
6yPp3+3D59fJhR7yn/SMvdAH48/9eJlPsA/24375UH5Xl/XKxIMc4QB3ciYf
dmv8+f1J1k/0k+ejZLyb5zuSR547med14k94kL91YLiwG/6D/OBBz7p469pB
neSGkpdn3JPzzDwh9Tz3g/g98cjzmOhprqvk+YbiRPxJX5MHjBN+5sNeMs/J
7+Dz+948fyj9oXV4+6zwlTr+6O/cZxd7FO/y8931lAGOdxRczIMczI/cMh8W
d5J3xm+ZR5h3no9j/lk3IU96JM7AI8ZBf9WFOv/z53J/2qf3sYPauo04K/dV
82PWs9I+4CDeg4P56J+f569dw4Hc2Tv54c08NzT3edKj/F4g46M8Nw1fk4d1
HfE6ezbejGfVP9P+xY1pz5nHJo9q2YH7zI8fVo/kR8Q38sf013leWK7bkCe9
zHPiMj/AG+Ti+3dyFGfS/1zHyjgvzzcmX35OPTrrnPCid+xbHOB+9oIvzDf3
QeV6r3mI0+BC/uIZdVx2Iu4n99Fx2JzCH+Qnn2AfeCnXdWp83OUnVzdH9vu9
o/gpck67yvVJ8q+dT5x5fZ4bS9/Vc9iFv7v2/tz3q78814X/y3Os1AnhgYfs
AxbfqxPzG3leM33Bn/S607ebB/jfUvI/+OQ6Br2FKz7o5n3LmHq8eZK3v/ud
3mhz3TLPtWPX9EEdgV2wz4yvjDfPizYf/WaelOdzqGfJf/EGO1FfgYu4Ck9p
yV/9Q9zI3q2D0PfO/m4bs+6d56zDEy7WFfm3/B4v6395nhx55vqYeI8+4y3x
CL339zy3gv3SOzi6Hx5ZlyRv+YO8jrzz3CD2oz4CD/exN+83X++nR+QMN/dn
fZDdk4/5rejL78rC03kecvJSnm8pHkj5pT+mN+xdvEtv2EnyEvvt+Hly6cff
8XB+3wwP67T5fTt5W5dnJ/hLHsae3EeP2Wv6B35bHGxe+tdP1lPNj9zwOf+U
+/DwmP7oAV7BI+SnTtLxyo1l/SzXmbM1D3jRH8/Ry6yXZH0ZHnhIfmF/ifqH
Ojp/zo608kVxYzeOy4vfo6f2heDrrBtmvGOc+A6/Tejz+a2F10evz9886P/i
UmfO9XP988PqJPCWv8INvqPraVMHdjplzPo//cv1gsw7xD/sVHyV51Sr47IT
/oX88zwafkP/o9dlJzeT+uO9quiz+/J8avJNnhBHbtvX4wsLX13SH+/1pf9O
zycN9pNNmKCfPKcvz/uEt/70w6/RK/wKP/4E74hP6WXuv6AHeS6GccGjtm+L
v7A/RXyb58eJx0afLz014qFJxf/m90T4GL+ZP1zxCbvTshPyYT/0lf/MfQt+
F1/AYzTPTx1TPyB/9/H/mSdmnkP+uS+H31B3g0Oeg2G/ltb9+d0ifOSDnme3
9JY+G7dx8r/494f9eUwPHO4r/hau/C19JTf4kG/m8fn/AcDrxpV+Ag5Z3xE3
sme8Bge8nHFJfs8uX6D//IQ6tfg38WR/cJMPauGq/Q8dIb2J
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
o3Uukc/Hcx+kz8WDL/8Dq07eJw==
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztw0EJACAUBbCHTaxgBRsYQfhn+9+0hxus77OqJZnvCAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADwgwsHOQIh
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.474998704969777*^9, 3.4749990183505316`*^9, 3.474999350800254*^9, 
   3.474999473163367*^9, {3.474999670974622*^9, 3.474999691355459*^9}, 
   3.4750007815642757`*^9, 3.4750014465647144`*^9, 3.47500265796443*^9, 
   3.525011724834053*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["function [W, H] = findWH(V, inputs)", "Subsection",
 CellChangeTimes->{{3.474292333769515*^9, 3.474292427518339*^9}, {
   3.474292560041461*^9, 3.4742926449549675`*^9}, {3.4742928104589405`*^9, 
   3.4742928535496564`*^9}, {3.474292971865424*^9, 3.4742929747713394`*^9}, {
   3.4743035019971533`*^9, 3.4743035692531805`*^9}, {3.4743036029671993`*^9, 
   3.474303610254181*^9}, {3.47430416564487*^9, 3.474304193881138*^9}, {
   3.4743042759789476`*^9, 3.4743043061070147`*^9}, {3.4743043517285776`*^9, 
   3.4743043531044135`*^9}, {3.4743773111095066`*^9, 3.47437731821879*^9}, {
   3.4743779599768853`*^9, 3.4743780133359184`*^9}, {3.474396136611028*^9, 
   3.474396138013768*^9}, {3.4743962473651443`*^9, 3.474396290725396*^9}, 
   3.4743963360494843`*^9}],

Cell[TextData[{
 "The ",
 StyleBox["findWH()", "Code"],
 " function performs an unsupervised calculation of the color basis matrix, \
W,  and the unmixed channel weights, ",
 StyleBox["H", "Code"],
 ". It uses the Non-negative Matrix Factorization (NMF) algorithm."
}], "Text",
 CellChangeTimes->{{3.4743962914111805`*^9, 3.47439635632687*^9}, {
  3.4743964160680084`*^9, 3.4743964238454223`*^9}, {3.4743964914107323`*^9, 
  3.474396590366246*^9}},
 TextJustification->0.],

Cell["\<\
function [W,H] = findWH( V, inputs)
% OUTPUT = FINDWH(V,OPTIONS)
% inputs:   V is the sample matrix (nsamples x 3 original channels, R G B)
%           OPTIONS is a structure containins the following attributes:
%                  .INIT: the color-bases matrix for linear unmixing
%                  ('none','truncated','hue')
%
% outputs:  OUTPUT is a structure containing the processed data
%           OUTPUT.W is color bases matrix
%           OUTPUT.Hl is the linearly unmixed weightings
%           OUTPUT.Hn is the NMF unmixed weightings
%
% NMF code uses connectivity, modified from NMF code by the Broad Institute:
%   http://www.broad.mit.edu/mpr/publications/projects/NMF/nmf.m
%
% The NMF algorithm is defined in:
%   Learning the parts of objects with nonnegative matrix factorization. D. \
D. Lee and H. S. Seung, Nature 401, 788 (1999).
%
% The linear unmixing is described at:
%   http://home.planet.nl/~ber03728/4N6site/improc/decoplugin/decoexpl/p01.htm
%
% This code was created by Justin Newberg
% Last modified 24 October 2007 by Justin Newberg

S = size(V);

options.ITER = 5000;       % Number of nmf iterations
options.INIT = 'hue';% Pseudo-random W initialization
options.RANK = 2;          % Number of stains to be unmixed. FIX FOR LIN UNMIX
options.STOPCONN = 40;     % Another termination criteria for nmf
options.VERBOSE = 1;       % Verbose mode
options.RSEED = 13;

rand('seed',options.RSEED);

checker.options = fieldnames(options);
if exist('inputs','var')
    checker.inputs = fieldnames(inputs);
    for i=1:length(checker.inputs)
        checker.type = checker.inputs{i};
        checker.value = getfield( inputs,checker.inputs{i});
        options = setfield( options, checker.type, checker.value);
    end
end

if options.VERBOSE
    tic;
end

if strcmp( options.INIT,'hue')
    HSV = rgb2hsv( V);
    hue = smooth(HSV(:,1),30);
    [c b] = hist( hue(hue<0.3), [0:0.01:1]);
    [A i] = max(c);
    P = b(i);
    hae = mean(V(P-.01<hue & hue<P+0.01,:),1)';

    [c b] = hist( hue(hue>=0.3), [0:0.01:1]);
    [A i] = max(c);
    P = b(i);
    dab = mean(V(P-.01<hue & hue<P+0.01,:),1)';

    W = single( [hae dab] / 255);
else
    W = single( rand(S(2),options.RANK));
end
if strcmp( options.INIT,'truncated')
    W = W / 2 + .25;
end

% Continuing image transform
V = single(V')/255;
V(V==0) = 1e-9;
[r,c] = size(V);

% Blind umixing
H = single( rand( options.RANK,c));

conn = zeros(r,r);
connold = conn;
inc=0;

for k=1:options.ITER
    W = W / norm(W);

    WH = W*H;

    % Minimizing L2 distance
    Hn = H.*((W'*V) ./ (W'*WH));
    W  = (W.*((V*H') ./ (WH*H')));

    % % Minimizing divergence
    % VWH = V./WH;
    % Hn = H.*(W'*VWH) ./ repmat( sum(W,1)',[1 c]);
    % W  = W.*(VWH*H') ./ repmat( sum(H,2)', [r 1]);

    H = Hn;

    % Below is the Broad connectivity criterion
    if mod( k,10)==0
        [y,i] = max(W,[],2);
        mat1 = repmat( i,1,r);
        mat2 = repmat( i',r,1);
        conn=(mat1==mat2);

        if sum(conn(:)~=connold(:))
            inc=0;
        else
            inc=inc+1;
        end
        connold=conn;

        if inc>options.STOPCONN
            break;
        end

        Err = sum((V(:) - WH(:)).^2)/(r*c);
        if options.VERBOSE
            disp( num2str([toc k inc Err max(W(:)) max(H(:))]));
        end
    end
end

H=H-min(H(:));
H=H/max(H(:));
H=uint8(round(H*255));
W=uint8(round(W*255));
hsv = rgb2hsv( W');

if options.RANK==2
    if hsv(1,1)>hsv(2,1)
        W = W(:, [2 1]);
        H = H([2 1],:);
    end
end

H = H';

if options.VERBOSE
    t = toc;
    t = num2str(t);
    disp([ 'Finished NMF: ' t]);
    tic;
end\
\>", "Program",
 CellChangeTimes->{{3.474396659069334*^9, 3.4743966813105564`*^9}}],

Cell["The options object is easily created:", "Text",
 CellChangeTimes->{{3.4748321584653378`*^9, 3.474832175181613*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"options", "[", "iter", "]"}], "=", "5000"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"options", "[", "init", "]"}], " ", "=", " ", "\"\<hue\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"options", "[", "rank", "]"}], "=", " ", "2"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"options", "[", "stopConn", "]"}], " ", "=", " ", "40"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"options", "[", "verbose", "]"}], " ", "=", " ", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"options", "[", "rseed", "]"}], "=", "13"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"options", "[", "method", "]"}], "=", "\"\<nmf\>\""}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.4748321822832985`*^9, 3.4748322545644093`*^9}, {
   3.474906677236242*^9, 3.4749066920979943`*^9}, {3.4749074470333557`*^9, 
   3.474907467270321*^9}, {3.474908256683853*^9, 3.4749082571526628`*^9}, {
   3.4749084470519667`*^9, 3.4749084950581107`*^9}, {3.47497869122636*^9, 
   3.4749787023157787`*^9}, 3.474992875426202*^9, 3.4749938397578297`*^9, 
   3.4749953626825743`*^9, 3.4749957790495796`*^9, {3.474996352785727*^9, 
   3.4749963545810723`*^9}, {3.474996589256147*^9, 3.4749965898025565`*^9}, {
   3.4749974946781006`*^9, 3.4749974952090855`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "options"}]], "Input",
 CellChangeTimes->{{3.4748322628991346`*^9, 3.474832284641218*^9}}],

Cell[CellGroupData[{

Cell["Global`options", "Print", "PrintUsage",
 CellChangeTimes->{3.5250117250368533`*^9},
 CellTags->"Info3524986524-6554518"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"options", "[", "init", "]"}], "=", "\<\"hue\"\>"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"options", "[", "iter", "]"}], "=", "5000"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"options", "[", "method", "]"}], "=", "\<\"nmf\"\>"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"options", "[", "rank", "]"}], "=", "2"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"options", "[", "rseed", "]"}], "=", "13"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"options", "[", "stopConn", "]"}], "=", "40"}]},
       {" "},
       {
        RowBox[{
         RowBox[{"options", "[", "verbose", "]"}], "=", "True"}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`options],
  Editable->False]], "Print",
 CellChangeTimes->{3.5250117250680532`*^9},
 CellTags->"Info3524986524-6554518"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "The first part of the function is devoted to initializing the color basis \
matrix, ",
 StyleBox["w", "Code"],
 ". It takes one of three paths depending on the setting of ",
 StyleBox["options[init]", "Code"],
 ". If ",
 StyleBox["options[init]", "Code"],
 " is \"",
 StyleBox["none", "Code"],
 "\" or some unrecognized value, the matrix is initialized with random values \
between 0 and 1. If the value is \"",
 StyleBox["truncated", "Code"],
 "\", the matrix is still initialized with random values, but they are \
reduced by dividing by 2 and adding back 0.25. The method is not documented \
in any way and appears to be an empirical attempt to speed convergence."
}], "Text",
 CellChangeTimes->{{3.4749051185212727`*^9, 3.4749052070267005`*^9}, {
  3.474905282002437*^9, 3.4749053023125973`*^9}, {3.4749053382303343`*^9, 
  3.474905363914875*^9}, {3.474905406409979*^9, 3.474905482729311*^9}, {
  3.4749055530337105`*^9, 3.474905564313661*^9}}],

Cell[TextData[{
 "If ",
 StyleBox["options[init]", "Code"],
 " contains the value \"",
 StyleBox["hue", "Code"],
 "\", the function attempts to make a more intelligent choice for the initial \
values based on the characteristics of the image being analyzed. It converts \
the image data to the HSV color space and looks for the peak values in two \
regions along the hue axis. The method is uses assumes one stain is \
hemotoxylin. Rather than go to all the trouble to try to guess the starting \
values, why not just use some values that have already been published? That's \
what this version of the function does."
}], "Text",
 CellChangeTimes->{{3.47490556523543*^9, 3.474905610620826*^9}, {
  3.4749056626178627`*^9, 3.4749057959821377`*^9}, {3.474905889843815*^9, 
  3.4749059006186724`*^9}, {3.4749081395282335`*^9, 3.4749081395282335`*^9}}],

Cell["\<\
Initializaton continues by transposing the samples, replacing any zero values \
with a small number, and normalizing the pixels into the range 0 to 1 (by \
dividing by 255.)\
\>", "Text",
 CellChangeTimes->{
  3.4749081400595517`*^9, {3.4749085730055866`*^9, 3.4749086368575087`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findWH", "[", "samples_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "w", ",", " ", "v", ",", " ", "rows", ",", " ", "cols", ",", " ", "h", 
      ",", " ", "conn", ",", " ", "connOld", ",", " ", "inc", ",", " ", "k", 
      ",", "wh", ",", " ", "hn", ",", "err"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Create", " ", "initial", " ", "guess", " ", "for", " ", "color", " ", 
      "basis", " ", "matrix", " ", 
      RowBox[{"w", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"options", "[", "init", "]"}], " ", "\[Equal]", " ", 
        "\"\<hue\>\""}], ",", "\[IndentingNewLine]", " ", 
       RowBox[{"Module", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "dab", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"options", "[", "verbose", "]"}], ",", " ", 
            RowBox[{
            "Print", "[", 
             "\"\<Initializing w with published hue values for H&E\>\"", 
             "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"w", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.65", ",", " ", "0.072"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"0.704", ",", " ", "0.99"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"0.286", ",", " ", "0.105"}], "}"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"options", "[", "rank", "]"}], " ", ">", " ", "2"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"dab", "=", 
              RowBox[{"{", 
               RowBox[{"0.268", ",", " ", "0.57", ",", " ", "0.776"}], 
               "}"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"w", "=", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{
                  RowBox[{"w", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
                  RowBox[{"dab", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"i", ",", "3"}], "}"}]}], "]"}]}]}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "else", " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Module", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"options", "[", "verbose", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<Initializing w with random values\>\"", "]"}],
              ";", "\[IndentingNewLine]", 
             RowBox[{"w", "=", 
              RowBox[{"RandomReal", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Part", "[", 
                   RowBox[{
                    RowBox[{"Dimensions", "[", "samples", "]"}], ",", "2"}], 
                   "]"}], ",", 
                  RowBox[{"options", "[", "rank", "]"}]}], "}"}]}], "]"}]}], 
             ";"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"options", "[", "init", "]"}], " ", "\[Equal]", " ", 
           "\"\<truncated\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"options", "[", "verbose", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Print", "[", "\"\<Truncating w matrix\>\"", "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"w", "=", 
            RowBox[{
             RowBox[{"w", "/", "2"}], " ", "+", " ", "0.25"}]}], ";"}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"options", "[", "verbose", "]"}], ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Dimensions of w:\>\"", ",", " ", 
         RowBox[{"Dimensions", "[", "w", "]"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Reform", " ", "and", " ", "normalize", " ", "the", " ", "sample", " ", 
       RowBox[{"pixels", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"v", "=", 
      RowBox[{"Transpose", "[", "samples", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"v", "=", 
      RowBox[{"v", " ", "/.", " ", 
       RowBox[{"0", "\[Rule]", "0.000000003"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"v", "=", 
      RowBox[{"N", "[", 
       RowBox[{"v", "/", "255"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"rows", ",", " ", "cols"}], "}"}], " ", "=", " ", 
      RowBox[{"Dimensions", "[", "v", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"options", "[", "verbose", "]"}], ",", 
       RowBox[{"Print", "[", 
        RowBox[{
        "\"\<Dimensions of v: rows: \>\"", " ", ",", "rows", ",", " ", 
         "\"\<, cols: \>\"", ",", " ", "cols"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Initialize", " ", "h", " ", "and", " ", "other", " ", 
       RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"h", "=", 
      RowBox[{"RandomReal", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"options", "[", "rank", "]"}], ",", " ", "cols"}], "}"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"options", "[", "verbose", "]"}], ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Dimensions of h:\>\"", ",", " ", 
         RowBox[{"Dimensions", "[", "h", "]"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"conn", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{"0", ",", " ", 
        RowBox[{"{", "rows", "}"}], ",", 
        RowBox[{"{", "rows", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"connOld", " ", "=", " ", "conn"}], ";", "\[IndentingNewLine]", 
     RowBox[{"inc", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Iterate", " ", "to", " ", 
       RowBox[{"convergence", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"k", "=", "1"}], ",", " ", 
       RowBox[{"k", "<", 
        RowBox[{"options", "[", "iter", "]"}]}], ",", " ", 
       RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"w", "=", 
         RowBox[{"w", "/", 
          RowBox[{"Norm", "[", "w", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"wh", " ", "=", " ", 
         RowBox[{"w", ".", "h"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Minimizing", " ", "the", " ", "L2", " ", 
          RowBox[{"distance", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"hn", "=", 
         RowBox[{"h", "*", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Transpose", "[", "w", "]"}], ".", "v"}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Transpose", "[", "w", "]"}], ".", "wh"}], ")"}]}]}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"w", "=", 
         RowBox[{"(", 
          RowBox[{"w", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"v", ".", 
               RowBox[{"Transpose", "[", "h", "]"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"wh", ".", 
               RowBox[{"Transpose", "[", "h", "]"}]}], ")"}]}], ")"}]}], 
          ")"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"h", "=", "hn"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Broad", " ", "connectivity", " ", "criterion"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Mod", "[", 
            RowBox[{"k", ",", "50"}], "]"}], "\[Equal]", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "connectivity", " ", "calculations", " ", "should", " ", "go", " ",
             "here"}], " ", "*)"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"inc", " ", ">", " ", 
              RowBox[{"options", "[", "stopConn", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]",
            "\[IndentingNewLine]", 
           RowBox[{"err", "=", 
            RowBox[{
             RowBox[{"Total", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"v", "-", "wh"}], ")"}], "^", "2"}], ",", " ", "2"}],
               "]"}], "/", 
             RowBox[{"(", 
              RowBox[{"rows", "*", "cols"}], ")"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"options", "[", "verbose", "]"}], " ", "\[Equal]", " ", 
              "\"\<ReallyVerbose\>\""}], ",", 
             RowBox[{"Print", "[", 
              RowBox[{"\"\<Time:\>\"", ",", " ", 
               RowBox[{"AbsoluteTime", "[", "]"}], ",", "\"\<, k:\>\"", ",", 
               " ", "k", ",", " ", "\"\<, inc:\>\"", ",", " ", "inc", ",", 
               " ", "\"\<, err:\>\"", ",", " ", "err", ",", " ", 
               "\"\<, Max[w]:\>\"", ",", " ", 
               RowBox[{"Max", "[", "w", "]"}], ",", "\"\<, Max[h]:\>\"", ",", 
               " ", 
               RowBox[{"Max", "[", "h", "]"}]}], "]"}]}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"h", "=", 
      RowBox[{"h", "-", 
       RowBox[{"Min", "[", "h", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"h", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"Round", "[", 
        RowBox[{
         RowBox[{"h", "/", 
          RowBox[{"Max", "[", "h", "]"}]}], "*", "255"}], "]"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"w", ",", "h"}], "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.4749059078905287`*^9, 3.4749062038039684`*^9}, {
   3.474906481716611*^9, 3.4749065703128867`*^9}, {3.474906655420252*^9, 
   3.474906658733282*^9}, {3.47490730803032*^9, 3.4749073766332893`*^9}, {
   3.4749074086375904`*^9, 3.4749074314844103`*^9}, {3.474907493445546*^9, 
   3.47490756176679*^9}, 3.4749076607169538`*^9, {3.4749076961902437`*^9, 
   3.4749077774193897`*^9}, {3.474907809861042*^9, 3.474907885480095*^9}, {
   3.4749079290169168`*^9, 3.474907943550027*^9}, {3.474907991743695*^9, 
   3.474908097413469*^9}, {3.47490814606032*^9, 3.4749082445573006`*^9}, {
   3.4749082824996567`*^9, 3.474908351727267*^9}, {3.4749084137508297`*^9, 
   3.4749084324407215`*^9}, {3.4749086471400747`*^9, 
   3.4749087042723866`*^9}, {3.474909008873871*^9, 3.474909058724001*^9}, {
   3.4749091203881426`*^9, 3.474909160690176*^9}, {3.4749092068992147`*^9, 
   3.4749093000673885`*^9}, {3.4749093375409346`*^9, 3.474909377858595*^9}, {
   3.4749094443202257`*^9, 3.474909664473402*^9}, {3.474909722058897*^9, 
   3.474909904961933*^9}, {3.474909963991474*^9, 3.474909989392253*^9}, {
   3.4749101000349684`*^9, 3.4749101152990055`*^9}, {3.4749103184449244`*^9, 
   3.474910333506065*^9}, {3.474910438396729*^9, 3.4749104388964443`*^9}, {
   3.4749109047949505`*^9, 3.4749109482173204`*^9}, {3.474911326701317*^9, 
   3.4749113725480714`*^9}, {3.474911413974168*^9, 3.4749114180043087`*^9}, {
   3.4749115926756773`*^9, 3.474911657596138*^9}, {3.474911905656464*^9, 
   3.4749119179501915`*^9}, {3.4749119732016683`*^9, 3.474911976685151*^9}, {
   3.4749122388055315`*^9, 3.4749122416797953`*^9}, {3.474912414822959*^9, 
   3.4749124616390963`*^9}, {3.474912497395565*^9, 3.474912497973542*^9}, {
   3.474912530683916*^9, 3.4749125977917323`*^9}, {3.474912680629895*^9, 
   3.474912683800958*^9}, {3.474916373304386*^9, 3.4749164325311794`*^9}, {
   3.4749164984446163`*^9, 3.4749165680919504`*^9}, 3.4749166116488743`*^9, {
   3.4749166851550894`*^9, 3.474916785548487*^9}, {3.4749169817577443`*^9, 
   3.4749169906003623`*^9}, {3.4749172078850465`*^9, 
   3.4749172230862255`*^9}, {3.4749172897964354`*^9, 3.474917297482951*^9}, 
   3.4749173697393265`*^9, {3.474917766563526*^9, 3.474917771359787*^9}, {
   3.4749178861107225`*^9, 3.4749179745242577`*^9}, {3.4749743574672093`*^9, 
   3.4749743582481146`*^9}, {3.4749744910569444`*^9, 
   3.4749745411320167`*^9}, {3.4749770888549447`*^9, 
   3.4749771355645638`*^9}, {3.47497729265923*^9, 3.4749773627992134`*^9}, 
   3.474977996415964*^9, {3.474978127683422*^9, 3.474978130121827*^9}, 
   3.474978287400484*^9, {3.474994058832608*^9, 3.47499406525436*^9}, {
   3.4749950230640945`*^9, 3.474995034579499*^9}, {3.474995198263856*^9, 
   3.4749952225602646`*^9}, {3.4749973800947037`*^9, 
   3.4749973996630554`*^9}, {3.4749974364259443`*^9, 
   3.4749974564159603`*^9}, {3.47500061051264*^9, 3.4750006658844624`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "junk", ",", " ", "junk"}], "}"}], " ", "=", " ", 
   RowBox[{"uniqueImgRows", "[", "img", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.4749065857059746`*^9, 3.4749066141480246`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"w", ",", "h"}], "}"}], "=", 
   RowBox[{"findWH", "[", "v", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.474906629416092*^9, 3.4749066367766447`*^9}, {
   3.474906719008549*^9, 3.4749067196961594`*^9}, {3.4749096833508177`*^9, 
   3.474909687335703*^9}, 3.474912263049323*^9, {3.475000690393302*^9, 
   3.4750006916296997`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Initializing w with published hue values for H&E\"\>"], \
"Print",
 CellChangeTimes->{
  3.474906640339714*^9, {3.4749066835966344`*^9, 3.474906721024497*^9}, 
   3.47490747894369*^9, 3.474907570236624*^9, 3.4749076769690337`*^9, 
   3.4749077862798986`*^9, {3.4749078451780615`*^9, 3.4749078941999607`*^9}, 
   3.474907950769701*^9, 3.474908267654007*^9, {3.4749084404729996`*^9, 
   3.4749084753524637`*^9}, 3.474908511982152*^9, 3.4749090643966017`*^9, 
   3.474909126060744*^9, 3.474909177848622*^9, 3.4749092173849316`*^9, {
   3.474909251404911*^9, 3.474909281143092*^9}, 3.4749093121783137`*^9, {
   3.474909384609459*^9, 3.4749094118473196`*^9}, 3.47490968938284*^9, 
   3.4749097292004356`*^9, 3.4749097915155096`*^9, 3.474909836831746*^9, 
   3.4749099167117414`*^9, 3.474910007016965*^9, 3.474910121916543*^9, 
   3.4749103397810574`*^9, 3.474910445423974*^9, 3.4749113614417534`*^9, {
   3.4749114013838835`*^9, 3.4749114053203*^9}, 3.474911663641426*^9, 
   3.474911932508963*^9, 3.4749119849017973`*^9, 3.474912027406538*^9, {
   3.474912248178131*^9, 3.474912266954573*^9}, {3.4749124783848085`*^9, 
   3.474912503815796*^9}, 3.474912604961771*^9, 3.4749126907679243`*^9, 
   3.474916447747981*^9, 3.4749166338335342`*^9, 3.474917014300453*^9, 
   3.4749172340379486`*^9, 3.474917302294835*^9, 3.474917828477475*^9, 
   3.4749741994276557`*^9, 3.4749745534827695`*^9, 3.474977176392975*^9, 
   3.4749779340334415`*^9, 3.4749784966425543`*^9, 3.474987244764479*^9, 
   3.474989045481475*^9, 3.474999019209494*^9, 3.4749994739754767`*^9, 
   3.4749996922144213`*^9, 3.4750006922870245`*^9, 3.4750007824245033`*^9, 
   3.475001447330854*^9, 3.475002658808709*^9, 3.525011725364454*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dimensions of w:\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}]}],
  SequenceForm["Dimensions of w:", {3, 2}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.474906640339714*^9, {3.4749066835966344`*^9, 3.474906721024497*^9}, 
   3.47490747894369*^9, 3.474907570236624*^9, 3.4749076769690337`*^9, 
   3.4749077862798986`*^9, {3.4749078451780615`*^9, 3.4749078941999607`*^9}, 
   3.474907950769701*^9, 3.474908267654007*^9, {3.4749084404729996`*^9, 
   3.4749084753524637`*^9}, 3.474908511982152*^9, 3.4749090643966017`*^9, 
   3.474909126060744*^9, 3.474909177848622*^9, 3.4749092173849316`*^9, {
   3.474909251404911*^9, 3.474909281143092*^9}, 3.4749093121783137`*^9, {
   3.474909384609459*^9, 3.4749094118473196`*^9}, 3.47490968938284*^9, 
   3.4749097292004356`*^9, 3.4749097915155096`*^9, 3.474909836831746*^9, 
   3.4749099167117414`*^9, 3.474910007016965*^9, 3.474910121916543*^9, 
   3.4749103397810574`*^9, 3.474910445423974*^9, 3.4749113614417534`*^9, {
   3.4749114013838835`*^9, 3.4749114053203*^9}, 3.474911663641426*^9, 
   3.474911932508963*^9, 3.4749119849017973`*^9, 3.474912027406538*^9, {
   3.474912248178131*^9, 3.474912266954573*^9}, {3.4749124783848085`*^9, 
   3.474912503815796*^9}, 3.474912604961771*^9, 3.4749126907679243`*^9, 
   3.474916447747981*^9, 3.4749166338335342`*^9, 3.474917014300453*^9, 
   3.4749172340379486`*^9, 3.474917302294835*^9, 3.474917828477475*^9, 
   3.4749741994276557`*^9, 3.4749745534827695`*^9, 3.474977176392975*^9, 
   3.4749779340334415`*^9, 3.4749784966425543`*^9, 3.474987244764479*^9, 
   3.474989045481475*^9, 3.474999019209494*^9, 3.4749994739754767`*^9, 
   3.4749996922144213`*^9, 3.4750006922870245`*^9, 3.4750007824245033`*^9, 
   3.475001447330854*^9, 3.475002658808709*^9, 3.5250117253800535`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dimensions of v: rows: \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\", cols: \"\>", "\[InvisibleSpace]", "2884"}],
  SequenceForm["Dimensions of v: rows: ", 3, ", cols: ", 2884],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.474906640339714*^9, {3.4749066835966344`*^9, 3.474906721024497*^9}, 
   3.47490747894369*^9, 3.474907570236624*^9, 3.4749076769690337`*^9, 
   3.4749077862798986`*^9, {3.4749078451780615`*^9, 3.4749078941999607`*^9}, 
   3.474907950769701*^9, 3.474908267654007*^9, {3.4749084404729996`*^9, 
   3.4749084753524637`*^9}, 3.474908511982152*^9, 3.4749090643966017`*^9, 
   3.474909126060744*^9, 3.474909177848622*^9, 3.4749092173849316`*^9, {
   3.474909251404911*^9, 3.474909281143092*^9}, 3.4749093121783137`*^9, {
   3.474909384609459*^9, 3.4749094118473196`*^9}, 3.47490968938284*^9, 
   3.4749097292004356`*^9, 3.4749097915155096`*^9, 3.474909836831746*^9, 
   3.4749099167117414`*^9, 3.474910007016965*^9, 3.474910121916543*^9, 
   3.4749103397810574`*^9, 3.474910445423974*^9, 3.4749113614417534`*^9, {
   3.4749114013838835`*^9, 3.4749114053203*^9}, 3.474911663641426*^9, 
   3.474911932508963*^9, 3.4749119849017973`*^9, 3.474912027406538*^9, {
   3.474912248178131*^9, 3.474912266954573*^9}, {3.4749124783848085`*^9, 
   3.474912503815796*^9}, 3.474912604961771*^9, 3.4749126907679243`*^9, 
   3.474916447747981*^9, 3.4749166338335342`*^9, 3.474917014300453*^9, 
   3.4749172340379486`*^9, 3.474917302294835*^9, 3.474917828477475*^9, 
   3.4749741994276557`*^9, 3.4749745534827695`*^9, 3.474977176392975*^9, 
   3.4749779340334415`*^9, 3.4749784966425543`*^9, 3.474987244764479*^9, 
   3.474989045481475*^9, 3.474999019209494*^9, 3.4749994739754767`*^9, 
   3.4749996922144213`*^9, 3.4750006922870245`*^9, 3.4750007824245033`*^9, 
   3.475001447330854*^9, 3.475002658808709*^9, 3.5250117253800535`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dimensions of h:\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2884"}], "}"}]}],
  SequenceForm["Dimensions of h:", {2, 2884}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.474906640339714*^9, {3.4749066835966344`*^9, 3.474906721024497*^9}, 
   3.47490747894369*^9, 3.474907570236624*^9, 3.4749076769690337`*^9, 
   3.4749077862798986`*^9, {3.4749078451780615`*^9, 3.4749078941999607`*^9}, 
   3.474907950769701*^9, 3.474908267654007*^9, {3.4749084404729996`*^9, 
   3.4749084753524637`*^9}, 3.474908511982152*^9, 3.4749090643966017`*^9, 
   3.474909126060744*^9, 3.474909177848622*^9, 3.4749092173849316`*^9, {
   3.474909251404911*^9, 3.474909281143092*^9}, 3.4749093121783137`*^9, {
   3.474909384609459*^9, 3.4749094118473196`*^9}, 3.47490968938284*^9, 
   3.4749097292004356`*^9, 3.4749097915155096`*^9, 3.474909836831746*^9, 
   3.4749099167117414`*^9, 3.474910007016965*^9, 3.474910121916543*^9, 
   3.4749103397810574`*^9, 3.474910445423974*^9, 3.4749113614417534`*^9, {
   3.4749114013838835`*^9, 3.4749114053203*^9}, 3.474911663641426*^9, 
   3.474911932508963*^9, 3.4749119849017973`*^9, 3.474912027406538*^9, {
   3.474912248178131*^9, 3.474912266954573*^9}, {3.4749124783848085`*^9, 
   3.474912503815796*^9}, 3.474912604961771*^9, 3.4749126907679243`*^9, 
   3.474916447747981*^9, 3.4749166338335342`*^9, 3.474917014300453*^9, 
   3.4749172340379486`*^9, 3.474917302294835*^9, 3.474917828477475*^9, 
   3.4749741994276557`*^9, 3.4749745534827695`*^9, 3.474977176392975*^9, 
   3.4749779340334415`*^9, 3.4749784966425543`*^9, 3.474987244764479*^9, 
   3.474989045481475*^9, 3.474999019209494*^9, 3.4749994739754767`*^9, 
   3.4749996922144213`*^9, 3.4750006922870245`*^9, 3.4750007824245033`*^9, 
   3.475001447330854*^9, 3.475002658808709*^9, 3.5250117253800535`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"w", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.474907631791377*^9, 3.4749076384641056`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.6097392900189688`", "0.00045664206024426937`"},
     {"0.3380859690895209`", "0.7309952182686528`"},
     {"0.23937828156096594`", "0.43962543965931095`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.4749076397298927`*^9, 3.4749076807507677`*^9, 3.47490778976472*^9, 
   3.4749078483972235`*^9, 3.474907897528512*^9, 3.474907955114007*^9, 
   3.474908270404359*^9, {3.474908456021865*^9, 3.474908478071562*^9}, 
   3.4749085150762978`*^9, 3.474912028703081*^9, 3.4749164880084524`*^9, 
   3.474917055701403*^9, 3.4749181346265574`*^9, 3.474974240284605*^9, 
   3.4749785391897993`*^9, 3.474987285416788*^9, 3.474992606224438*^9, 
   3.474999065937054*^9, 3.4749995207655067`*^9, 3.4749997400976768`*^9, 
   3.4750007450124273`*^9, 3.4750008297995777`*^9, 3.4750014953787456`*^9, 
   3.4750027058538218`*^9, 3.5250118075151978`*^9}]
}, Open  ]],

Cell[TextData[{
 "A new version of ",
 StyleBox["processImage()", "Code"],
 " can be created using the functionality in ",
 StyleBox["findWH()", "Code"],
 "."
}], "Text",
 CellChangeTimes->{{3.4749785230861983`*^9, 3.4749785544187145`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "imgPath", " ", "=", " ", 
   "\"\<C:\\\\projects\\\\color-deconvolution\\\\Images\\\\TinyTissue.jpg\>\"\
"}], ";"}], "\n", 
 RowBox[{"img", " ", "=", " ", 
  RowBox[{"Import", "[", "imgPath", "]"}]}], "\n", 
 RowBox[{"Dimensions", "[", 
  RowBox[{"ImageData", "[", "img", "]"}], "]"}]}], "Input",
 CellChangeTimes->{
  3.474987584295407*^9, {3.5250117001392097`*^9, 3.525011703462015*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
TPwEThuT8jA9+UHaWODgYkDPqnudOLST49MgCukAdQVQAST7qBAEAcCUORWI
6FLJhmKXWzLc+a1Tw9uGuB+cNkZFPNmGYHljMGk08OJLn698Yy+Glj/GkL16
8jUz2xyrVuNG2m3Kwn/yy7+fPm5TO2la2KKfX22Mf3k3zvxn3xfqqf46ebnO
9cDwTEYPh1zyD1OL9bsWlq+fPx7YOeZbz0wdlGaPc+J6AKr94AAk4LyPSgLi
JxAxxWJELEPnEXFY/ah65Fxo9e7SBm9DJuDIWANwZ1BH5L+9vKD71Z97d6tm
56lmFBuV9L5oGPds8v7K1vlzO4xqbMvj1E7d/OJHqQl34s3+7eL9MNNHMzfO
qBj/vGQ+bsj8Yz3HCx56n9liDPEDAcRmp6o6x4rB4OaZyB5lZISvgf25+Igy
bnwRwCqRSDb5IpQhQjlbKEO6zZNviBWAKxirfO4Aey2kKwO603RYD/+OFeFe
PtaoKkI1djq03/OMjeUn5kG/BBQ9zWrWxtZq59aZ4iOuh/teiXxxJSpRC9fk
Wk0OblU/fM38C7snH1ln65YV6uJT76fGqiWkPk6sta8EKISvywksAG4fFUgl
2CIeT8TniiQIXcRlyUWAyCSIeJMjFSIivkQCEKIDnOJzJhmHbsQceZDxW1jU
g6xg9ZQa13qie4v7GWfrz2wTHmU1m5ZX6GC67Kum/Ynl2rlpd5N6fDqYebNr
6YMGHzx8/J6Ozt+ccHo1hU9LgIvAaxXE344pNi7aD49QqIzXPqp9kEpgMAyA
AZAAA1ss4ipbUygFJ1ioTDRPgMIKdJqzkF43FVoef8PzxUUPk3OuofeSlpIW
OmwbIq/G2J71cTvvEX4tFK+XJciYpYYSZ31aaInDq5mD7KKJqLu+Rp+aOp71
LdKvIboQh72JxBfN5cYFXS9awP/fB7aPSrlfl9Z+uEAqpTzhBiyV8SSAwEDu
hAKpmC8RwWJAHGy+iCuQbMt3pHPM9nB8/P3gp2/p2H3u3uc3hNXJw+ngI2+l
+6nEBN2OwRrmLMb20iLa2LG9sy9bJ2LaWBVTw4mtxVZ5WU+yykxKxkMGGDlL
qxmUwaDeTrdWwX+t/Vj9N6rXERNuiGTK+ueC90XKe2CJWKBAEDlXLBNJN0HQ
dvhiycTaUFRT+Fkfs+MmZWY1Kcb5Eeopfj+GOd0MjXianm+Fn0sZgvMmaAn9
lEhihzeBVUVhEqb6Q2qaHYupKWOAhDu9m4KuhJj/06bbt//PrP2Jaj+DgMde
s6nyA75IyBMJ2DDv9T2gLwCXyARSZdkv9Y1P1bTzp5YUa4iQyKzSx0afDUy5
n4F1qY3RyY64Hv/8d09wqHhRt5w3j1SsD4a0N7tUNnpUDMa2UAuG1jFD9FQS
PW2UmjYeeSPs9gGNpx9atAeMgkYTKqtK8P9bfLDECEDF4cPgRqDmIJhAnQQy
yfrCIrm8ab6keblzUCaQbDAVY0ndRfeTEq9GZhjgKj2aUzQzba94FbnUdoUO
dIX0TiZP0fEMMLTWuldUu+GHwpvWM0aEuZT5iH7s04zUB5nxqhmOv4a+uBbN
4/H+kz7kf5D9WfxKonhN/jCXBzLIFcL7MRTKRDCPRSONcXrIbMoysiEFKiXu
WOsyxrbpFOY/xSRppGY8zfB+GJ3vUFnr0RZ5NzHkZmy9R3tfxECNe3WdZ2Wj
W3mfXwMzfXYiZCjqRpzLef/gm0meD1Juf2r5Z+7+g+F/lzKKCCL6gyvAzVzh
f14C2hWKBUI6W0ZlicVCuoy3JZKjXZxelfgp7fKaZwURV8PAvBBjlhf2JDnL
qMDtpwCXC/4O5zzr3NsafJqJUX3D8UN1zpUvrwS7fetlc8br2pvPtM843/+3
0+WPTUCz/4GKz1cG7D8R+zOn4CP4vzCD835vggOoNzlfDGgWmCF4Q4SK0CUL
XPVbllMquFoNbJEOLunSyxjdTP+7USkG2JjHWZZfOz88+SxXv6DUtmIgfqgj
rKvYvixbP9/tpyDPK9E339N9csbhzhk71X89B/wNnl5pYJQ99hrYf9e8siH/
B9g+KuAllGopEoPkyoViLswb6xlG29dod5MG3rFr+sSvR6+y63lNtXpank5G
zMNErG1VyYt2p599td/XrbOrrLQuafFvrvKsrfNrS9DKsfnO2/q8l8q7T1RO
Pblw6NbDfxjzEIlIIBby2BJQxkI+/FoU/1t9lBnjwWCDBa5sgB9QFZcLXoL6
hxFQlvylhdXekrYd7OieXlHnQWPsYTOyUUOPcfmsTWW1Vqb7eVfnyy8L3Tsx
lmW19hWUGNJAQFOeYUaeRX5zUF+CHi5KMzvqYUq8ZmqWYU6o6ssQtZe8Ge4r
BSrdklO5qzCoZcFrQhCIkNdbWeYgUACPcvEQ4HAQ5QmEEEDi8ZU4JSIxnc5c
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
    "], {{0, 67}, {50, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{50, 67},
  PlotRange->{{0, 50}, {0, 67}}]], "Output",
 CellChangeTimes->{3.4749875910634203`*^9, 3.474992612178363*^9, 
  3.4749990659839067`*^9, 3.4749995208279767`*^9, 3.4749997401601467`*^9, 
  3.4750008298621397`*^9, 3.4750014954412875`*^9, 3.475002705916361*^9, 
  3.525011807546398*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"67", ",", "50", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.4749875910634203`*^9, 3.474992612178363*^9, 
  3.4749990659839067`*^9, 3.4749995208279767`*^9, 3.4749997401601467`*^9, 
  3.4750008298621397`*^9, 3.4750014954412875`*^9, 3.475002705916361*^9, 
  3.525011807546398*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"processImageV2", "[", "img_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "w", ",", " ", "h", ",", " ", "j", ",", " ", "v", ",", " ", "reconIdx", 
      ",", "junk"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "junk", ",", " ", "reconIdx"}], "}"}], " ", "=",
       " ", 
      RowBox[{"uniqueImgRows", "[", "img", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"options", "[", "method", "]"}], " ", "\[Equal]", " ", 
        "\"\<nmf\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"options", "[", "verbose", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", "\"\<Deconvolving with nmf\>\"", "]"}]}], 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w", ",", "h"}], "}"}], "=", 
         RowBox[{"findWH", "[", "v", "]"}]}], ";"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"options", "[", "verbose", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "Print", "[", "\"\<Deconvolving with provided color basis\>\"", 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"w", " ", "=", " ", 
         RowBox[{"getW", "[", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"h", "=", 
         RowBox[{"findH", "[", 
          RowBox[{"v", ",", "w"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"options", "[", "verbose", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Color Basis: w:\>\"", ",", " ", 
         RowBox[{"w", "//", "MatrixForm"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"j", " ", "=", " ", 
      RowBox[{"reconIH", "[", 
       RowBox[{"img", ",", " ", "h", ",", " ", "reconIdx", ",", " ", "True"}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", " ", "[", 
      RowBox[{"{", 
       RowBox[{"h", ",", " ", "w", ",", " ", "j"}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.474978608133812*^9, 3.474978613241192*^9}, {
   3.474978719730852*^9, 3.474978901113138*^9}, {3.474978994915769*^9, 
   3.4749790273389444`*^9}, {3.47498658933843*^9, 3.474986638443299*^9}, {
   3.474986775173273*^9, 3.474986778213479*^9}, {3.474986921835929*^9, 
   3.4749870220609684`*^9}, {3.4749870848395944`*^9, 3.474987093665402*^9}, {
   3.474987200432727*^9, 3.474987206280215*^9}, 3.4749873867946825`*^9, {
   3.474993074621351*^9, 3.474993120966457*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "chnlWeights", ",", " ", "colorBasis", ",", " ", "deconvImgCalc"}], "}"}],
    "=", 
   RowBox[{"processImageV2", "[", "img", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.4749866589049597`*^9, 3.4749866924328976`*^9}, 
   3.4749867678144155`*^9, {3.474987113110247*^9, 3.4749871181312895`*^9}, {
   3.4749871830150113`*^9, 3.474987185977738*^9}, {3.4749993964345894`*^9, 
   3.474999397762077*^9}}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Deconvolving with nmf\"\>"], "Print",
 CellChangeTimes->{
  3.474992623195469*^9, 3.474992892004964*^9, 3.474993131341457*^9, 
   3.4749936641507025`*^9, 3.4749940122710023`*^9, 3.474994089816388*^9, 
   3.4749944877931223`*^9, 3.4749946236655135`*^9, 3.474994975440009*^9, {
   3.474995042813716*^9, 3.474995058938406*^9}, 3.4749952504191046`*^9, 
   3.4749953734323673`*^9, 3.4749957933305554`*^9, 3.474996371113863*^9, 
   3.474996522843975*^9, 3.474996601995294*^9, 3.474996644421692*^9, 
   3.4749968531527443`*^9, 3.474997538953307*^9, 3.4749976750120955`*^9, 
   3.4749990664524317`*^9, 3.4749995212808843`*^9, 3.4749997406130543`*^9, 
   3.4750008303000736`*^9, 3.475001495894717*^9, 3.4750027063541355`*^9, 
   3.5250118077491984`*^9}],

Cell[BoxData["\<\"Initializing w with published hue values for H&E\"\>"], \
"Print",
 CellChangeTimes->{
  3.474992623195469*^9, 3.474992892004964*^9, 3.474993131341457*^9, 
   3.4749936641507025`*^9, 3.4749940122710023`*^9, 3.474994089816388*^9, 
   3.4749944877931223`*^9, 3.4749946236655135`*^9, 3.474994975440009*^9, {
   3.474995042813716*^9, 3.474995058938406*^9}, 3.4749952504191046`*^9, 
   3.4749953734323673`*^9, 3.4749957933305554`*^9, 3.474996371113863*^9, 
   3.474996522843975*^9, 3.474996601995294*^9, 3.474996644421692*^9, 
   3.4749968531527443`*^9, 3.474997538953307*^9, 3.4749976750120955`*^9, 
   3.4749990664524317`*^9, 3.4749995212808843`*^9, 3.4749997406130543`*^9, 
   3.4750008303000736`*^9, 3.475001495894717*^9, 3.4750027063541355`*^9, 
   3.5250118077491984`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dimensions of w:\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}]}],
  SequenceForm["Dimensions of w:", {3, 2}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.474992623195469*^9, 3.474992892004964*^9, 3.474993131341457*^9, 
   3.4749936641507025`*^9, 3.4749940122710023`*^9, 3.474994089816388*^9, 
   3.4749944877931223`*^9, 3.4749946236655135`*^9, 3.474994975440009*^9, {
   3.474995042813716*^9, 3.474995058938406*^9}, 3.4749952504191046`*^9, 
   3.4749953734323673`*^9, 3.4749957933305554`*^9, 3.474996371113863*^9, 
   3.474996522843975*^9, 3.474996601995294*^9, 3.474996644421692*^9, 
   3.4749968531527443`*^9, 3.474997538953307*^9, 3.4749976750120955`*^9, 
   3.4749990664524317`*^9, 3.4749995212808843`*^9, 3.4749997406130543`*^9, 
   3.4750008303000736`*^9, 3.475001495894717*^9, 3.4750027063541355`*^9, 
   3.5250118077491984`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dimensions of v: rows: \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\", cols: \"\>", "\[InvisibleSpace]", "2884"}],
  SequenceForm["Dimensions of v: rows: ", 3, ", cols: ", 2884],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.474992623195469*^9, 3.474992892004964*^9, 3.474993131341457*^9, 
   3.4749936641507025`*^9, 3.4749940122710023`*^9, 3.474994089816388*^9, 
   3.4749944877931223`*^9, 3.4749946236655135`*^9, 3.474994975440009*^9, {
   3.474995042813716*^9, 3.474995058938406*^9}, 3.4749952504191046`*^9, 
   3.4749953734323673`*^9, 3.4749957933305554`*^9, 3.474996371113863*^9, 
   3.474996522843975*^9, 3.474996601995294*^9, 3.474996644421692*^9, 
   3.4749968531527443`*^9, 3.474997538953307*^9, 3.4749976750120955`*^9, 
   3.4749990664524317`*^9, 3.4749995212808843`*^9, 3.4749997406130543`*^9, 
   3.4750008303000736`*^9, 3.475001495894717*^9, 3.4750027063541355`*^9, 
   3.5250118077491984`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Dimensions of h:\"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2884"}], "}"}]}],
  SequenceForm["Dimensions of h:", {2, 2884}],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.474992623195469*^9, 3.474992892004964*^9, 3.474993131341457*^9, 
   3.4749936641507025`*^9, 3.4749940122710023`*^9, 3.474994089816388*^9, 
   3.4749944877931223`*^9, 3.4749946236655135`*^9, 3.474994975440009*^9, {
   3.474995042813716*^9, 3.474995058938406*^9}, 3.4749952504191046`*^9, 
   3.4749953734323673`*^9, 3.4749957933305554`*^9, 3.474996371113863*^9, 
   3.474996522843975*^9, 3.474996601995294*^9, 3.474996644421692*^9, 
   3.4749968531527443`*^9, 3.474997538953307*^9, 3.4749976750120955`*^9, 
   3.4749990664524317`*^9, 3.4749995212808843`*^9, 3.4749997406130543`*^9, 
   3.4750008303000736`*^9, 3.475001495894717*^9, 3.4750027063541355`*^9, 
   3.5250118077491984`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Color Basis: w:\"\>", "\[InvisibleSpace]", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.6013733760684945`", "0.0004017534770763544`"},
       {"0.3391839837649041`", "0.7325266530560308`"},
       {"0.239535187859373`", "0.4405494900520814`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}],
  SequenceForm["Color Basis: w:", 
   MatrixForm[{{0.6013733760684945, 0.0004017534770763544}, {
    0.3391839837649041, 0.7325266530560308}, {0.239535187859373, 
    0.4405494900520814}}]],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.474992623195469*^9, 3.474992892004964*^9, 3.474993131341457*^9, 
   3.4749936641507025`*^9, 3.4749940122710023`*^9, 3.474994089816388*^9, 
   3.4749944877931223`*^9, 3.4749946236655135`*^9, 3.474994975440009*^9, {
   3.474995042813716*^9, 3.474995058938406*^9}, 3.4749952504191046`*^9, 
   3.4749953734323673`*^9, 3.4749957933305554`*^9, 3.474996371113863*^9, 
   3.474996522843975*^9, 3.474996601995294*^9, 3.474996644421692*^9, 
   3.4749968531527443`*^9, 3.474997538953307*^9, 3.4749976750120955`*^9, 
   3.4749990664524317`*^9, 3.4749995212808843`*^9, 3.4749997406130543`*^9, 
   3.4750008303000736`*^9, 3.475001495894717*^9, 3.4750027063541355`*^9, 
   3.525011889961343*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["deconvImgCalc"], "Input",
 CellChangeTimes->{{3.4749867987153807`*^9, 3.474986804951701*^9}, {
  3.4749994012760143`*^9, 3.474999402134977*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJy9nQnMZtdZ30cUoQqhyhiXmOAGQymlohUNbRpCgJc2pVtKSxKapmmaVoi2
tEVgwmZCoEYI4aitMMEBlxhiQnDdyLLGY48z8TLx7rE9tmezZ8azfbPPeMbZ
E8fZ2u+e8/7O8f0998n7veNJjmTJOn59v3vP8j//5/8s59t/8ude/x//wrp1
616z+s/3rf4z/Pt3v+V37/30d2+dPfVkabN18/Z3Sts527untNZ/+O0X3fSP
Dz892/d0aa3/V09/18v/4o37Zy8trff/+P/6w5+98LdWZt9a2r7W/yOveOvt
//QbjswOHiit9T8zPOaSp2f795XW+i/53gPf+XW/+cDsJaXtbv1vetWtW355
8xPh+aud733p9z42u6S0/a3/63f/2WU/9PUPhf4fPPQvV9/03tkfldbf/6d/
79l3zF7x+Oza0vrvV1/+a77nd56avbW0g63/U1/cdfnp79o++yul9e/63G/8
1zt/8ff3zLZvG9pK6/+B4fXf+/TsEx8f2uHWf/HXvvEv/a0Nj83+pLSD4T39
/peX8d8a/u4X/u/Hd/zYT949+5bS9rb+a/730D40+9el9fH8Hz9z8vOr/8vs
LaXt13NWZiuHSmv9377+batDtD+sh3cNw/bWp2fX/OHQdmsctsxeX9qO1r/n
8efecPTP75h9U2k7NQ53zf6gtKda//8s73lveP+6fh4Jvz/65++5/9L1O2a7
nypN37VttmtnaWHed+4oTevtw/N53Nb6//kr3/n3/8Pxu2dXl7ZL83Jj+Lvv
GLbR228N67b+/s6w/v/m73zz3sefuy/8fuuf/uhtn/zi/WF+9z8/DPR9oZ/1
4Odcufr2277j0dllpfX1yb67ef3QVrQON8y+rbRD4fl/u7SVML8XlNb7N5V9
dFvYX2/6qVev/oUPhv6fWV09F3/tg7M3lLYzrAePP/P+b0rr4/CJ1be84E17
Z/+2tD4O/7BsgMOzf1da30c/d+Fv3f3Inx4P31WffyTsU/DzmtL2hPf3eqjz
dUvAYdbDnt2lhX3h57C//Pv3r6Le7j/bNnt6b2kBJz3O2byAGy8rrX9vm7fS
+veuPmR14e6e/Xxph/VdW2cH9pcW8M3rlv3yxtL6965u9jf/1KufCOfOt5Tx
ORDOl28sG/hgWP91fOI5BW77HGR9eh1uetlvn3ndps2zby4t4pVx6drV1fO2
n94ecPIfDNtx397ZH5Xx7uPAOfuvSuvrhPPIz2f/uv/s64Y3vSfsC3DD+4L9
7t/zHJ+bFQfWh/P6zWXcHgrf9SPl+e+bPbmrNI3nTclz4rr6Z99QVtzsF0o7
2tfnB4b3uSLsa77X5zLv499fUcb/2vC97Lvr3ju0jofsd58XjJvPu7rO7w/7
+hfKgfRkOBc++4YBgVZmhw6WFnHpj4d2QON2MpzjvzLAwIFj4TmMs+eLc9Dr
in6fy5yPXreMm+cd3LuotF3h956Xuo9uTs8Xfy/NeAg+3LJhaEcCnns8eZ8M
r/5yaf17yzK8YEvAh+3fsW91Je4P64r38TnyTyoRn725tP77AhvPHwx8rOHA
u4f2ZOj3/qr77vGAexv++KP/58HX7k72+0qYl8qHDwd+9c7CN/bNfF6wzr0O
4Wk+f8ETnyOcpxnuGW9r//bZte8ZWt9f8FjzHPiY5/HyMu/vD/z2mwb68KNP
hfPo54dj57IDcxzoePXZsq5uSPHqx0uLeGX+D0+wvcD3+jl8V11vWwIuVXx7
Ioy/13nFi4fD/HJ+mS/VeT8e3uf6Acbediqsh2o3PRP4aoGZbUcCP4FXGFc5
x82XwCuvH+wLzzvn1NW/P7S+zuv+2hjO0+8v7397OHfAPX9ve1+N56OF/+8K
uARem7+x73yOcE55HtkvtoPAGePDoCa85XePhP113UuHgTgc+O09jwwfcCCs
E+z6cL7M58vnAvaa3+dby/g/Gcb/18p6Pjbfpx3nqz5wMrxPXT9HwrjV/h1h
nOF74bwu+3pTOB9ZPx7nyuseDONW4OS2o4H/DF910U0n5885onk8HNYJ/NPj
CT/3eV359qGwbjnXjFfwAf9d5tF4Bb/y+ql22fawL9jXlxZ8/nDA/6tKuzu8
Z/19xzHwyjwEu8nrgfG0/rMKtqsn5ImAb58pQtupcI7U8/RkGE/Wlc938MF8
g33q34NjF5e2J6xDfxd2utct55rPWfiDz5cryu+vDnwD/c34+ROFsG4L9jv2
l/lJ3b+7gj0Ijr2rtL6P4FHG+SeGz33PsTA+zK/XPzzHzwFXbYeyPqe/a0tY
55y/nl90Ra//+wa4vfd44GOcg56vem4+Es5B5n2aH24Mdi7f5XFGRzKe/Pfh
cy8+FvhbpbHPzD75iaF1vKq6wcnAB2qL449eumN7aa3/hgdfuzoUK4EPYC8b
l/jezC72eNLMbyuu3hPsJvSBiwrfu6U/pwzQNfN1eENYD/X394XvrfZOtyvR
A9/1e0Pr41BxYFvYd5xrxqv//J+GdiKM/9f95rtfswrFs28srZ87nOM+B1nn
PpcZB+MVfHVa/98Y1jnnhXEMe9B/l+f4PAUPvf4zXZr1X8ft8TDOryutj389
d/YEPoN+ZZzhvPN7Ml/T+syRsG7LNnruaFi32DUeH/DT34uu633NOW77lO/y
ucb6cT+667Q/KPJt1on3He9jHICH1PVs3X5bwLdrfnYQfA+Hc63O46nZy0vr
67/qyadDf+XnxwIvQt/zd+H/Mv6jo/p90Dd8joADtmczXQ77MbOXK86sD3zg
gguH9r4wzpcUHfWOwGPreXFv68d+tL2JfeT9xe+9L15eFty+sM5fX4Dm1Hw9
9Hm5uiygI4F/4v/y+cK68rjBx7wfmRfjW/2uD6TnvvdRhlfgm/uZX+/fbDzZ
pz5H6vjsiPtrbpeZL7He/F3o8D5fyme9+2g4X/aVc/bo7N+X1nky+8J4BQ80
v6rzvieMJ/5u8zTsIOMSvMV2Fv5rn4PgpHlppj/gT7FugP3l70Lftv24t5xT
+wL+l2X1hqPB7uB89/cWer77aOBF+Hk976ugt7oingr7Bb3U+irredpPsTE8
n/H0d4FXHgfOhUsLTt6o8/2G2aWFB94U5sX2I+dg3Rd3h3VS33NLmK86bo9F
niw+hh1qe7PaQSsBl/A/er+gz3t8wCWvH+w176PMTsTvk+n82e99rmX4ybyY
V4CfPq8ZZ/OrjC9V/vZoGB+e73HAzjKPBX98vryvyG97Ap6wH40/2JX+fd0v
R0PcBfvO/IHzwvZFtQefDO/5Vwuw7grf1Xiv5pfzwvPFuvV3MQ5+//L67zgU
7C/G0/wEPdzrv9LGfeGc5Zyybsn717/bzzvsDu9H1pXxhPVpfp7ti7qurk/6
b0vxzfYg9uYlZRzuav3oJ7YH8eNX++UB4cm2+fs8qL+7bX5ePxSeU/nbo+F9
PJ70m2/Db+1P5/wyj+U9PT4833YZ57jXITqqz1/OF9uJ4KGfA0/zvFdCcGXw
78B/fI7Tb7wiLsXfC0+efp/bw/uDA163+HfMx/BDeX0+XOb9QMDDet4dDud4
bSvBTsHO9Xuir07z1W3BX4l94XOBeXE/dor5Fd9rPMF/Wuel87dvG5bPy44H
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
f+MJ8efW/9EVp+9rOJzUw4x2EPXrsvgu24PsU++7LN+QfE/bv1m8Peej/X3o
2NN1tO4M9UkYB48z9caN5/hrzEuzeAxwNeSFzf3O5nucO+bb4Ln91O1+GeF/
tv6XxbFl8Wph/xpxbFneldmV4IZxDHvNfIw8BfdncV8Zzrf+JO4i9Tsk9q9/
3/ie4sfA1TrOVwee5t8zPq6Pja5uHQMcsz31B4MV9/nTs7eV1s996stZVyc+
zTiAbuZ1jl/MvI79ax2SuujmCdiV7ufv+vn4y6y3ZHgFzng/woONA1l9debX
8bot3l74Bv5M19eN9xzBb8xzxvWj+vtwjpsH4mexP4t4VH8XPNa4d751pxdr
D36l8Wph/ySfuT68zyL9P8WrNY5Pln80vmcnjqd5HftinVrjmWUcrlzI04gD
DPrb6N6N+8I6NE+At1gnR6/2vVHsE+93/PLe1+hjxhNwaa3123mO+WSzj4Qz
1BdyfYyWby7cgEcZ3/DX2B6ET2b1Nl1XFtxwvif4b30bu9g8Cry1/zGLE8Z/
4eeD/+Z76GmOL8W/E+4jO0/22vnCq2XtwSx+bKF/c43v3/ITk3hU85Asf3zh
+Oj3md+z4aHj7efPWaeW8Tr4gO1B7D7XfW11YxRP2/KS5F9gPTtPnPw++9PR
x6yrg0v+PXq+9xH1/azTgj/WSYos/T0xDiF7DrqW+QB2a+WH2+J8KX8Hv1jm
X7PdRN0/xw/wHI9DVseSOhvGVeLufL5k98C2+0kn8+WjPV7dI2fCvWDwbeuf
4HOog5H40RbZL19p/+BXuz+zp5bFK/jMWsczyydamJeUfZd0tla3R/5N4gd8
/sITHNfd6rkpDh+7OOhy1P8XHyM+x/slqzNDnKR1FXR+8x/8ld5f4J7j/LmP
yXiF3eTzHV3F+4h+71/w37iBn9e8KLunFX/ZdN3IeP8R/NZ4CF5lfMlxX+iZ
5nvYxdN1emPcKf4O+w3Rzfwc/KeeL9a/+ck5231fZZw5Xzr/wjiKNdqhLX9Q
9lRmD47rejk+f+38cPz8q8P7TNun94W6r+Ct/YlNB1O9oIzXZTjMeDqPAL3C
ehf6mM9r7DLvC/J9rMOAb17/xEfZDuL53u/gRhb3ntVB9T4Fl8xnsNeMh5n/
lPgK98PHsjrV03UFNwe8JX/Q44D/1/7Nyg+Ph3MHv7DjFogDNI+Fjzmu73zZ
d+eKD1/t/oX+Tf1+Uf7jWvWxbJwbXomnLft3v3xeUtTz6XddIPiS67423Uzj
xnm9To08I79nm5/Set4lcaTW4clLclwQ+9f2HXFQ9utl9y98bHDjvzPe60oc
uHEsy+PDz+i/y/71vvvwEI7xnTG/m7wJ4xj4Y5zE7+Z7DPHTuR98M44Rt+/3
5Lvs/4WXOi631oV4NuTj/6MaaBLOoxLm/5oz4dx54NJC4JK6cNHPfs54ldk7
a8SHc8WfF2ufZt+V4cD5wufs+cv6N7PnZPZsu/9IvCuLmx3PV+dvWXw+zfOC
buY4n/E9EacCXt2yYWgdx1o8p/YXdlwWh+m/C175fEeftw6PXenfo3c5PoF8
bdebIp7Tdc+IX/JzuB/HOEOcue1N9B/b3cQ1mV8RF2p8Bq/Mb+FFxpmqK54N
+jnxqOZjBfYePBPsQfL6p+sERl03s18W1YFJ826WxbGvsD7/Ynnj+cKxZfEq
qy+R/d2snmFm54Jj/rvwwOk6aY8HHZ5mfQad9lOfHNpRfdf22a+W1uNUiev+
e6X1vCH4mM9rdCTjDHg4zQcOBPsRHHM/Or/tI/DE+g/+R78nfMNxm/Af8zd0
OcchkGdk3oVfwzyN5/s90ZeMV/Ao4xX1f8wnazzJ2cCv6Hd8bzE33/LRkG8F
nnu+Mt04y8cZ17VbH9d/Ft8oXFrEB9bqXztf+T6L4sn9XVl/Vv8q+33zJyY4
mdmVHv/s72b6P79f67iN/YkbtU52xLo6BSCuCrpK7b8ixC3gB7/j9qH1PKDx
PZ6n9F1bwz7ifWwnEp9p3ADHbHcQP287lLxF6zDEkdr+Iv8u08/N04hnMP60
fL3kHjTH2dJvP2NWvwu/RrjXaa5TGcfo97lAvHqo6z63o/0c9L3pew2i7gde
OQ+3TuRlgf+DS+vUiL+dPq83pfrJWnlRxgOX5UVZHdFFPCrFn6x/jfyzjU/C
P9fKDzNcyvyJGX4yv5lONZ0X8ECIi6A5bhCeVl7nBXlttE9+YmgvuHdvHi/h
uCnq25iHsB+9zvEfGK/w05lHce+D63HBi7K6grZDqZuX3WfkOhvo3s6vAccc
18TzHW+W1SmlboztSnQ/8zf4pP2P8GrjHnUAbIcyX75PB9xwHAjPsZ8Xf4Tj
itlHjgdrrezrXo+Futb+WauHLNzL6g+cLz1qWTzMdPhzxqs14lKWv5PhSVbH
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
xtn7fXx/XMQx4wx1MKrd1+Mo0N8cD8Z5V8+d3k+9+l8r7UzgXcZV/A7OR+Nc
8/1Q7ftU7y67V6vVx9P+JX7DOLCoDoP5GHG2/n1mD/I+1gMzf0R2f1CGhwv1
qASX1ppfmflHMr9G1p/5H5veNYnzN+T2vvBtfK/0Fq2flZAfx7q13s5zbD+S
v2wdHr5kOxFdPctz9PPJH7TehX00Hfe1NdQxa3qvdGnmxfEP8Jmsjpb9hvBb
j+e4nmr/PXGz5lHsr1eXdiZ8V33+2bB+zKPIL6jnwtkwX1/4/NDOhHn3+4zv
Bej94JjrABC3U/0jR7Teom627D1fWT74wjql0tuzeKcsfoN5dH/2/pm/MvNv
nmudsTQ+ZI14lcXFnWscXcYbw/1oyf1r6Or271M/0DiA3uU6BuhI03nZW8Jz
snxt7BHHS3CPtnUhcMz2IH4B263Yuc63gndVnHS8+k1Bzyee03oauGR/Inho
/wXxtM4vQCe0rs75aJ5D/Gr1a3T8GeeZngl/9+2lGceeDnYl93RbH6Oem/kV
PM3+BXDMflKa1y1xwv4dfMb9C+/TEV6N61DFe6jDvTbzFp6T9cP3Ev3c/z/6
g3+f2WXL3re7MB/hRcZFZP7ZRflcfp8xXr0vjJNxGD+77SDyE22vEU9u/2C7
31B4Ar6Zn4Anjtei3rufAx9w/Bjnvu1W8hCNG1k9avDTcRTEp9k/i7/Szyf+
33XDsAcdR0q+le8xx043bvBdP1Baxxn8xeZjrH/zIs4v4ySt+kO7fUr9avMo
dAb38z41b2siX1LrE9z27zJ+RQt24rxlfkzbI8yvz1/G2X4Hzjv7r2muI0p8
i+/NyfIIlq3n3HjLGnX4LD5kWR1s2fjVLE41+7sZ/tM8v8QX2R9HXanp+4N2
Bx6Fjmq7b7xfOv5Q98A8DX5lfEOHdz86tvkb+o/9nvhVvQ65B8TfRTy88RMc
czwVOGkeQrzc95fW+7mXx3EL6Pnupy69cYz8AvMxxv+LXxja2bB+rLez3i4v
LdZNynDPeRa06XqG0c6C97qf5vhh+LDzF8h3s3+Tur7ZfLl+FPqqv5d8E9e5
bd+b5CGG703qt2e4tPBe2qQ+xlrz3DM8yfIrM7t70f3d7s/q59Om3//6cJ9j
yxuSPgPvcr0d+LBxCf+14zCxBx3HRfy8cbLymZNB1+V9nEfJuZnVG7RdSRyC
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
    "], {{0, 67}, {50, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{50, 67},
  PlotRange->{{0, 50}, {0, 67}}]], "Output",
 CellChangeTimes->{3.474986806760234*^9, 3.474986938533675*^9, 
  3.474995112499878*^9, 3.4749953114023085`*^9, 3.4749954751491647`*^9, 
  3.474995850798202*^9, 3.474996422570026*^9, 3.4749965598280926`*^9, 
  3.4749966263859053`*^9, 3.4749967687827377`*^9, 3.47499690921245*^9, 
  3.474997592411667*^9, 3.4749977290326824`*^9, 3.474999113539194*^9, 
  3.474999567836652*^9, 3.4749997882308116`*^9, 3.475000877565665*^9, 
  3.475001542926301*^9, 3.475002753602501*^9, 3.525011890054943*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deconvImgsFromCalcW", "=", 
  RowBox[{"ColorSeparate", "[", "deconvImgCalc", "]"}]}]], "Input",
 CellChangeTimes->{{3.474986843897519*^9, 3.474986889282338*^9}, {
  3.4749993658867593`*^9, 3.474999376319249*^9}, {3.4749995469872894`*^9, 
  3.474999547736929*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyV3AvMZVdVB/BJQ4ghxGAlWpEgICIGDamGIKIetOKrokINaUhDDEFFJVCr
0YoVSwgBogZU0Coo5TXWZjKZTh+OpZZvpu92pv0603ZmOp123u8KPgsixnvP
Ob913f87J1+5yczJd+85++y9Hv/1X2s/XvTWd73xV85Zt27dBbN/3z/797JL
PrztP1+2vfuB/rOrO/ju5278qYOPdr9/8qXnf8OGx7pf/NO/eue57zvQvfaV
b7n5Z559qDs1//r5j3bPf8X+lzzzvXd0F7/6hrt/99YHutl/n3zeK3Z0z9r9
mUt/5Fl3dT/8xC/MntzWvf3Pnryie+X93ezhc17+gUe6//jaQ5effOmD3X+/
5zdu+Z2/2NP90PzxTz7anfeMN33j923eUc9d3r9/e/c///CvO1//1pXuqr+e
f/6p++N3HP/q7Kvx+wPdizZdNnvFY92fz1/zlkfHdu/u9tz/1EWHP/f5sd1/
7v6kf27b2P97u8Of+/jtL9ykndXq5zCeL3Q/96oP/dgvH10Z+7Ghu2Iulnff
MP59S/e9H/iWvfc/dVu3/VOvu+nfv3Z799hX5i++rfr7wdnTqy++r+Q0jGtz
/a5/W3q53NRd/LbXzO74x+4ds96f94w7q7/6+W+zp55z8d7uJ3oBHOzede77
Vu791NHx90OlP88P/bm++ksO5PPZmZZ2f2a19KYf5Lxu/My+nA10d+mDfshj
Jsw3v+01D3Tf1re/v/umXoCPj+0fKD0b35YXvP/0G7bcWuP7xKz3l739we7H
5+Lat7fsjr2Q35k3zJ/cWnImT98Pct3Uvbl/z13da/vfPz2+b+P4/e7uZ5/d
j6hbd+38/iurPfdf2b//EyUn8vSeYdy3d7/dG8zD3ZcvmmvgQOlheM/x7vfm
Yt1/pN7LrtK+vIee/D3I5brSC32QL327nz76YT3n7u7BF++bjeyx0sdPD47d
9WL+yuMlV9dBTvd3m//2i39/54W7y78Gfz3Yfai35301bn5D3uyNnIbrg+WX
/OXyvp+f7b55br6ve6T7rbmZXLq/+3I/jmuW9MFutacdevD+v+nt9p6yn6Gf
R7v1c7VcdmLEmVNdL/bVQ2XH7JI+4AO7GeRzY/eD/fM3l57o477e/x8a37+3
5JR2Q+5ztL3kw4e6q583b/hgt/XeeQP7C0f1Bx59e//+h7s/6Md7ZMTX42P/
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
9YFcV5JyTnlP5Yuey3UQZ1+vtmmpXpz14PwYt3q9+M1fyNG6hT49e//p7k19
QD5evIB/wBvj42e5H8J8Wu6z8Xfqlx/BVf01vpr3HnlmrqvMdTmZryWerJVX
Js6lPtI/p/wrr8UvxjwBDsnj8VP2aL+PeCDfsA6Cn8n36IOc7RMRt/EL7eNh
5h3FeXa/ll2pR2S9r12nsnVJPlPxgh8kzk3V61MfU/WxvJbeYj+FOAxX7JNS
vyJ38/C+x5PMc1k3ob5c6+9HufAH+vI73mdeVz/Ij/7xavos/jbiWq7Tatcj
ryzx0twH0u5v2LLEo9IvfL/WfFnqP694gDye/ZKjeUD2aj8Pnsyf5BPyRPEG
H2vXCW9dssPkIeK7vIh/qLvIL9mBvDV5JR6ZdXR6y/mMnNclZ/XPikPjNfcX
fr3zMvl97rfAd9U/xJHkrfAHrpn/E192bJ9/zlScEb/lny0vvLnkwC5zHw77
578tzzpQ9QF51hSuLX3G+8k992Ul3mW8yXWQU/qYyoOSJ7f7vxd8RF6njoJ3
WQcBX+CNfHGIL/9S9Y8BV05UnR+fTt5jfPQi74OP4oh8iP/qH7+Vn+IZLX49
XvMr5knx9ZzHadcpLvZBZVyYivOZj07hV+Je5kEZp9RX4IP6IntlZvzJvOxQ
Fz5TeKWOqF4CF9s66GJ+xN/ydPpWv7TuQR7T7nvYWfkjffIn/ddOu//3uqU4
p76R8xe5r34qz/F71rum/KOtd926FJfyPAfjhA/teqQdlZeoQ7FHeAe3xOV2
vd6Ch7Lz4b5jS/Oa+V56UVcWf3KdJD/BE9gRu8r1/Pjz1Lx7rvdp91ku9JHx
YorX5b6hNk9dX/7axsWVwm3j9L36IX8Qx9mn+lXyAv3XD/aurs8/zffIM1v5
bK/+qw/oj37ib/TS7mdZty7X/eS+ubQbftyeV7Ftsr6YekmcWisvavH86orj
5q/EE3GBnNQj4YV1kfSS5z608WRj5XstTm6ufFPcYl/yR3bhPs9bN2m+h9/Q
C33k+Qq53mTN9XPj7/y33Rf3+aX1DmvVM7OOk3mv1+Kd6lvybThBP+RtPp29
5n4R+UTmN/hYez7GYl0K3NQOPph1rxaPVgt33e93eq74MfHRP+9lT35v6zYr
S/O9U/Mn+fdU3ljrXUMv8gPzGNb7iotZp+Uf4nrGZTzOuop2XeTO0pt8yDoU
8d48vPqA95+9brV9Sd61/n30U99nPck8qv6Ij+oZnkv5TeXteV/OK2YdHZ7l
ejxxRn/4CX/FH+GV/N35O+5PP8Fr4Y18lZzwKDgk3nif+jW50X+ut0y91Hq2
8UNeyS/UD7Tf7mc/sOxX5qHiQy/k1e5vv2oJr7Jek/msdtmxerxxwnU4oM5s
flH+L8/kF+ry/EU/4BY9TOGJdenyqKzH0R/c8litax8/6v/iJT/UT3UhONrK
467Sk+fzvnZf48aQ72I+V1yjJ/dl/NcuPLfeVJzAP/TPehTrVqznwQvEV7gg
D8zznDIu+PjePAG78D0/y/2feN/QypdKfvid/slD9Vs+k/2Q/+oHvGYP7NT9
+LN+4aXeC68z36QH+mvr3dvKbsRv6+fYdXtu0m2VJ9uPwN/xYflK4nmLA/+v
PjL+rZ94bo7f++WD4t8wD/3k6Mena90zP/F85rPqCfgBnoN3wwd4zM7SruUV
8DHzb3wpz+UrPhG4iE/ye1f2kef4mVeR7/ELeZp6YeKj5+WVk/oaP/pvvLmv
2npMddDv6gsLZ2r/dsYVn7aesr5+x1P4p3jGTvOcl7a9xT5S8xB1zuDYb/fn
PEvqg3/SY+43og84ih+p64sbeBh8IE92CE/bfRCL9Urikvma3DeY8hMX1Nv4
hzhVdjzyy7YudusCL8aP8dOn+Ki/5tnU2UrBY9xLveND+E3Fk7C3Wv81fshf
XogH4Z/t+VS7q85FDnALXsEvchSn2nONFvUccUoc9z51+Kxn57j103vov90f
fe1SvaQ9X+6apXbhVe4rtK4HjuVzeFLuR5dXpJ+WH8e5lOQCd+ACP2z9ZmGP
1u3KC+GR95o/zn3seb5Pjqvd53Rp9ddz7KceaNZJfWSpzpf8M/M7/pLzmvAZ
zxGHxH/34X/0wB/E4RwnO6nzX5tzBhfzcfiefBZe+d26R+f7wS9xcSpvO7u8
V5bqWn7P/Bke8oM8B44f4QFZ/2j3US3qvjmfph/8Dq56X9aR2Klxa5eetQP3
2nOSFvsZ2zrmYn03fNR/cUR/6UuehS+rf7Xn7zy6dH4gHmieKs8VyXo+feCd
5GwervxixHHvz3lD1zYP2LB0TlXaDbwhT3bX7vde4Ei7HmAxH5F+zM4r7495
LPqlDziZ9SY8Wz0LH4C39JvnRMuT2nrTYj0EOyt8inU2tT4l1qMkbuW6t+RT
We9I+U/xMnib53SRv3XPWSeCm1V/jX12/Ei+BvfZMf6qrs0ezD/g/3gQu9Eu
3GS/8kH4KY6zL3y/zg2Kerr1D+wi59/wCDiSeFg8YNRjez7c9XH/6pL9wRH2
bJx5HkRrD3fUOoI8xxQuyHPz3B32neeTiU/kRO7yR/mx/BxOqkviB/gavbb1
qdWleYapcYqreU6mfplHc3/lP7Heq62zLubh6Z09J98kh1wPmP2EN7ku0HPs
Zmld4KgfdmEfQa5/05/2fL295R/km7wMX8n5P/eRb3s+/I2Lc8nj067Du6Hk
zA7hZz6X9Th4aPzGkfxB+/hRy8/uKP6a5xzJI3Peo12Ps+A74gz8giP2dxiX
/Vb8gL2wI3mc/Iuf4KPiJjxKOVnvk3Vw9U1+6/42Dl1X8TvPQYPv4hweAG+z
H+16wZUlvgx/4ZzxwAPyY7f6gafgDXnuvPef/dz1HdVf69nl3e05G7sqv8i6
q7hc8TV4hPw+10m2dnv1Yh/MKG/9oy/xgJ9kvbI9X2j90vmWUziY5955jvzE
WfpZ2lfVzHPsWM6rRnkk38j1Z94nnrNb8cT3cC/XN/KPxAVy8n2e30svKZ/M
l9kB+6r94aP/s+vym/i051su13V9D2fglPeQV7tP6a4u8znzNfgOvXk+18e2
64mvKfzU39xf5Qon8E31A3rAb/K86bY+vLnip98HeztS8lG3Ixf6xwPgUOUP
cW5+7v/BH+1DWopLo71qR/t5njh/h1Puy/xyqp5D3ngjnOPH7uO/8kx5D72y
a/Jj7+an4A898Wf35bnu/Bq+ivPkq5+e0468Utxv94ss6he5XgLPyzpeu27q
vtJbnuuoXk4PeU5gngMlDrT7B3YXjrZ5y2rxEOODS/87F8/5J2o9UI4rz01T
n+E3/Jj90dP/AW6OekA=
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyV3VnvXtdVBnCLTxBKAAMBwjeAMo/ngi8AZZ4lJK4p84y45NIUU0IxJUJV
FKEIOXbmOWmapm3aOoljO5PneUrnuYWcffZvnZ7n+PBPlmQdve//DHuv4VnP
Wnuf1z/w+3/4rj/4ll27dv38m//e+ea/Iy81GV4+1mR49ZUmw3c3eWX4niav
DsdfbzK89mqT4TubHK2/39LktTq+r8krw74mrw2/2+T48L1NXh+ePzTKyeEz
nx7l1PD+Jsfreud9V5OXh19rcnT47SavDSdPNKnx3vavoxwd3tXkheHbmrw4
vLfJkbre56NHmgyHX2wyvPhCkz6uQ8PeJofrPPM0f5+Nz9H3725ycrh7/ygn
h+9vcmL4wSYnh5uanCz9OP5Skxfr+b/R5OXht5q8OvxOk9frPvR2W5NjNV52
PXa0SX3v8ysvN1k9//uaHB9+vcmx4Y+anBpef61JzfNXmxwpP+Ef5u/Ir8zr
O5ocKTuw2/v+bZSXh19p8lL93TH14DM/44/u89LhJvW9efxJkzOlR37os/vd
/p+jnCh/4E/0yA9OHG8yvP8/Rnm9/NL3xpN+aJ7GeXOTwzUO/uF+7HXwwCin
63ns8e1NXir9mge/+M0mr1S8vPdfRnmp9MNOrjMO8cEfzIv/8Yu0575/H+XV
8nvjEp/8ZdLrbI9faHKy4h8e+H6az7PdPp+seRufeHC+8YpH/p3xYPzGufef
R3mx/I2fuF89r9tB/PAL44Ir9Es/4tN9PJ8fON/zJ72drvM9J5/LvzzXc/j/
9P3sP57HHzMenMcexk8Ptzb7Pj7safJE//zJ8mvjhf/swy88j3/yZ593Nzm2
mje/4x/8uezX8ZN/w6v3NHmh7O7+5u97uOY+5m18Fd89XoyHXxkP3PNc+hY/
n/3MKKfLXz3/heeblL+yA9zzPPEJZ25u8XSwz+vO/vmDHU8ODe/5p1GeLz1l
vHxrk1PlV/yQPejfvNnFefzN/OHm9JxPDL/Y5Pnyd3p3XeK7ebq/+9EjfONH
jvDFPOmJXqf5Hir78KMfanKqjuLAfdjf+Yl3/M38Jr3vH256xyj/NdzS8uLD
3R+eKjyjH3ow72m8pyr++Ifn0Bf7GA+9uJ9j2oNf0I94cJ/0j99rcqLsUfHR
nydu2AHu8CtxKE7grPvAL/ZPnBAHxpl8ht793X3c99Zmt7uGW1tc/U/h16SH
J/p1z/bnfLziBZ6xA324v/HTi+fnePgR+/Fj/ig+2Mv93Vdc8g/6Tv3jycVr
Oj64zn2Mz3jcx/Xwh3+bP7+T56bzPlH6Sp6TfI4+4NUt7b6PFl5N+PGhfv4z
3R8/3OPnY/U88Zx1SOm/45B58T+45XvjxE/4JXtUXPTzXW+e4sX82Itfwg3X
sS8+xg8cxQd9T+OY87d4klfZmT3EdfIPzzMefktP7AGfdrfzPtL95yPdf5/p
dn6y4ofdnN/g7h1zni3eiSd2PWa+rfqgj+eXmxyueTi6Dz2yK/u5Hi468lt+
4nv3oXd2oB/3FzfsMvGek1UviBff80v+4zn0YzzOc39+xR7TeJ7ucfixrq+P
Djc3e3+o8sr0+d6ebw4MNzU/ebLOV8+Yj+caR+Kmv7OfOJE32Ycd3Vf8wAPX
wRVH8eF5yR/YOeskdsJDMi+7P5524O5RTlVdBQfpeYqn52s88p77mP/upsf/
Lr/f3XDzw3UUF7ubH98355med/Ayfxc36hn683zxnTzfPI1f/uav4kiciQv2
cr386jn8IPNY8lp2wCfYV57JfCJ/yN/w69OfGmWuq8SVuDQ/94Nz7odX0fNk
n4f658f6PB+Z46I99+6yw+QPt9cx7Svv0Bt9iXc80zj5b+KqeKAv9p7s+lzZ
lb9lvc4u5i1e5J2MD89Jexin+4sHdhAn+A1960MkTrgP/L6pPf8DZQ96n85/
oPAML6bvuq6dd1sdp/P2lJ3Fjfxk3vT3ziany5/Fk/Myb9CTuhW+8n9+6X7s
TS/sRS/wSDzA+cwjcIZdMt/TP73j3Z7L/xx9776Vd5q+7gh/3z/nh36s+HFe
t0fpPb8XN/2z54gbvI1d8JfsUyT/pCd2wYvhe+Zb/ks/7p+8lb3ZWTyzM33x
Y+Pzd3aBX4mbxiOOsg41Dv5ex67XqksiT6QdKk6cF/cTN7u6lP173PBHemSX
7NfKH/w4++PL+nbWvz6buBEf9CVO8Gr3hSfsnP0v/MIxeZjP8pp40H9XR4ur
ssciH9+x/hz4lMfJDvsqHtgFPuHNcH5Zb+4vvmz+/Mf44T9coXf+i18t67Dj
dR/zxnfUH+ZP38nT+H/2MeUX9/H37A9lHPED8ZJ51HzT78seES9Lv74j4mhf
+b/7TPr7aOnnz5qcm+vFBR87WH0Z4+LXue5DL+zhe/gljvgz/JCX2Z196FG+
ch2/z/4BvHQ/z616otuZXbLvbP7FL3ocVZ7v+k2cT3ts/V1c7CqDjPIPxUe/
8PlRznW9Xep1xZnixS6b/O6ewg3+g0fCM/qlr+wf8m96dh2/oI/0y1zXynVQ
PC/XS8SL8bo/PYsT+T/7EdW/6Dxvy+/LHjvYSx5ZmONNfjXlhadqXhN+nS69
4dGVV/pzXccP4c0XvzDK+eFHm5zr+DKv8/JXehI3rtc3ZAf9cvjhyL7yzdZ6
ju+Ncxr36dV6Fv3Tu/h0xN/E0Za+t/LFZvyoYxb5ZH/VM9XXb3p6sOqY4mH4
Qb9uqjc+WHqd6oVL3d8ud1y+sNIbnKY3dlMXyPO5XizuxEfxr8AT+s26boqT
s5Wf4W2uXxpfrVsv8vixtZ7THhu8teJIHom6fYVjXdirnoNXL563p+yFD3z+
c6OcLbs8cP8oF4o3wgV1Hnss+xXzOgX9ZB9JPVDrFP37XNfAC5f9ttO1P2O5
/jrz5ewH+yy+V3Gw8NPbt+2ReZ091Cn03fW7aY+NOnOJhweqjwZ3zRMuiBN8
nr7lf3bi987Hj7O/kuujrsen9Av0tz2XvcVh7o8RT+K59gF0+2/h0soebzFO
qu6IeMlj2n2Lb1fd3567tz5bX4bL8OaPm5yuPE6v5i2Oct9O1nvJi+gr1zHU
o+yT9WPt9+jjFFf4jvuw06Y9NvBqR3uEXdLfyx5b91/UMTOPnuzwj/N9O57J
M/w299nkOgl95/q5eKP32gfV9cw+iYPWMbN/Ki7wr+x7iyf1Ib/Z8vsd88dW
/RjX02v5edT19RkfiHre9/Cq1ikX6zUPzutlnW/K4z7Ti7wJt8WJ7/nrFF+H
qn/Cv3N/mfvCLXYsXOv8i13hpX1A8p86JvWxE796q8fCmy17pF1uGJd7ip/x
P3V01fXG2+OFPtQDcJz/04+6nz34J71kfhAHuc6a9Qn7qFPEE7/IPrTva/0j
6r23fXybeX/VH478vvSHvYVv07yeKb5lPWCrLyCf8MfMF7luSp/sIq/TG3/P
PkDiV+6DcF/8jJ8kz1VHbeLTRt7Y8Rh+v+q7bOTrG/cz576YdQDrlFmHum7y
t+cqr6sD4FPyKHkh19dzv5k4Yxd2sy/LcZlX5rpQHapfyl/4iXyyaY+3iCub
+BZ5ecu+FR/Jz+Dc4nhX8WPxk31jvH/S68V5/2nXDzs4j3/K6z7jt9YzrNPk
/pzMG+KDfTM+5W/xkv3flT+H/67ssgMubcXZll3SHllPVvxs8Ad5Hb5/7rOj
nBn+qsml4ceanJ/7irF/Oflu9qlcp87L/XziRNy4Lu0h3sSH+lQ/x3iW/P4D
6/os+yBvM15W6yv0Gv3IymOen/4Qz4Ff+vhwHM99+KFRLvf7Xiy95LoRnIBr
cB3+5P6oXLdUd+Jd6k+f2YUf5L5a9f8yvz+yGf+rei31tFU3bly3FX+r+NrI
Q7nejwers9rpN5+tfbW5X9u8s19lvUSegGv4r76z/ki+/7C1boh/sRNcs98E
r8b71LHqFf3yJW/Zu9bjRlxs6Xnr74VXW/Xi4rw1jokTOK7PNeHOucob8Ize
4AN/hevyDbvoZ7E3PJMn2Cf3X4gzdqF/5+MR9M4uUxxd7uedXfUBC6fsK4l8
m/666l+9xby0+nvkneRn6pOK514X0iN/r/3Uvb8M1+RzvFecTDz1TPUH+St9
wytxs/TrQ1Un5X483+c+Gfs9/X3K69eGH29yofa11Tzhfou7+8tPs2+7yXvp
O/paq7gJPMp+1arOjDo+edhktwdW+5ByvUv+yPcQ7jk4ypnKt1lPytvT/Q/V
/ll8G56xh/hc4urhVb/lZ5pcHe69Z5Szlccyj0zX3xO4sSf6S7et88iGPVbH
xKPguxlnWX9s1ZWJh/QFT3I9G96zkyPckR/kazjEz/UN+DX7OU98yO/Vb1/0
eS/Uupg+0KqP1PWf+L6Kk+BLiUOrOIm8seJhW3yAXbb4dR9/9mlqv3jnR3in
vJF1u3pD3sk+B5xjJ/bGw+2ntT9dXOX7Dvr0k50vdPtfLP4u3uwbXcXBRt1X
fhn6XvGu0OeKF6edtuqcrI92qGOTJ4uPXNcTP/K28+Qn+cF5uU9+wqWnClem
eT9ReAnH1Il4h3rJfoMJJy/WPgR2ZBdxknx2lRduqNd9G3Xh3vkY9eKO/Zy3
en7UV1Nef2beF9z77PADfvFL9bO+MTxhBzys9pG0+3y81tPkX/FjXUQdCf8e
fGCUi7UO+tCDo1yqz1Ncny8+oV7J9b1cZ6q8Y//8Yh/qnStcuXFe3reuOyMe
V/rOuNmIX3xMHs390/ADXqkH8TZH8SFe5JllH/rB4HfPVD0iTtlDn+cnm8z2
cJzsfqnH7fnig/zCvhH4qw6Wh+C1uo1dVvvjF7i2f7U/dbOO2cFem/bF0/v+
POsq7JLvA6grxI96RR3jPPkEH5vw6ukar/Uz64qe63p6Zhd2mOx9ueqTr3x5
lEvdDpeHr35llMvdny5VHprqnHOFw/bp8osb7y/ZXzhbeBv1TuKi6zLektdt
4VvFi/F0fOc36uilf837V6wnOeZ7HPjSdN9DtT7g/ta58AD6wnPta6JP+YTe
J5y6WvXK5CfXhr9pcqXsqF9kf431pNRf+n/GyxKP9gxZX5S9on5c5a/4e+Kk
+xSedvtM43h29Xsf8CvrznyPQT6p95n7uow8jP/KS3iW56l7xMVPN7nS/361
4mLyg6vD1746ypU6f+KDl6uvOvGL06WP5MW53zr7Z1uyqkMCfxL/Nvtti8/7
53jt+Rc/pddct/C9+gQflgdyH5x+jvcj5Pvcp40/6A/I4/x+4hFXOy5eGf66
yYxj8ov4wA/wNvNMvdZ+k0UduWdVl9exx0fm/R351RYPTrts2BWuwCP8ir5z
HcP36hc4V+/Z9foQL8bv/N06i7rQvkx6/qkmc7yIA3ab+Nq5igvHqc9zdlVH
V3wETsEL/ocnFH/s64L2mWzV5TvysI28kv2FxEd8Ca7kexuJU+zjKH7wNPPK
fo16g1//RJOLxXMd2UW8fP1ro1ytfP6XTWbeXPuJNuyhftU/wM+Mx/qF+9Xv
FG3g2io+on984/W0vTvcb29db78XfNfPZ4f8HRB2k0ez7w/H8DTXTfa5VsfJ
3ldqf2y+b/3nTc4PX/7SKBdr3yZ8uv++Uc5XnhMH5c/dD/EQ7yGwp/jC5/QN
pjg/u/r9giWfvjf0vmdVl8srK/xc4OJdm3WTPOD3aOR5/mQ9DE/Cv9gRfqlX
2I29+Dk84p/6iniqvqQ+sD4kP4Zv9Ok5aY8lPz1ZPJk9fBan1gHwdP7oen5q
vlW/RF7Co4t3en++ze++wLP1e3ruJx/D+dw/bx8F+6hP1DPwTP4QF478+U+b
nK04qnl0/2C/Rx4e5UrxXjjGz+kPb1/y8Pn3NKwbyVvWj9zH/Pipetb58hi8
VEfV+549z5iHvgL+yT/V51V/dLuV38C9bg91rnUR81qu6837WeT33E9hHcr6
lDrS+goeUfsMgoeqa/A+/gzPlvM7UXmefSY9nBl+pMnZ6lsu+wtPlr78fgf8
cH849nNNrnc/uV580HP1IZZ93YPll/n+Mf0s+3/fxNsWfOvx+fcIvYce+4Ly
dxr4p/xt/y78k89XvLv3oZe/f/hc+U/1LXudKX793XtnxjPxuPk9GvZhN3qv
efd6bCv/y1vq0Wme16tOgpv6OpVf+H1fnzB/fE5cFX4t+MCcT+Bd7U/v/a78
fUk44P7qsdpn1e1k3RaOwUf5gn/hNXAcrk39nXPz+19dn8VL5NHe9zcOeY6e
zGN53f7Sx1a+5Y/ynL4bO0z+fqW+l/8qTrpdxGH15Tpf4I+r/lmsk4oz+Zk+
lutI8+9NwRG4X/OI38NSJ6pzJvvO+UG+N88vfXGUCxU/+mVb+qNn62WO8Kny
PJ7a4zXrv+yj8Ff+ZVziRn/HvJb13oGZB3Q+qc/AH8VR8mHP1e+wPgKn9Onz
/VG8Fu9Ul6gLxKs+Iz6AZ6kz/q7JteFnm1wbfrjJmaoz+Yt9KeyDZ1d+7f7m
vFXfNerk9MutOkGepk/24D/TfC9U/OMLeKE8ZL74gvovn8u/rJfLv+whv2ec
VJ3LP/p58iK7ul/+biM+h9+q2/GG7IPAKXwbDsArfGEVR/q1Me/l+tYav4g8
pZ+mv8av1LnqWvHw2KOjXCt/k3+MG57l/g35Lfdj6adk3ljWebM91HPyDZyE
m+JdHaMO0JfynjI+kHrh3/gPP8WPi/d2/7+xPb6pf5T7Hzr+1XU9ruhFvoBT
7GFe4gX+igt9OHFUv8NpPVQ90senz5jvNRX+dxxKvcMxeSb7J47mIX7pz3zk
E+fxgxvr9bGyx/9+Y5Tr5X/4bvZ7l32+A6v3bvM8fHP5u4jPll+aB/6rPr3v
3lHOVd7XH1U/8Uu8FW/MfRTL38s7Wn0c6xd4kro97ZG/46w+4a/85tFHRrla
fv23Ta6u4lrclF263vQpzffxx0a5Xn6Ir/G//z9fr/d36Seqf40Dj5Ynrdvw
I3rHa+QR/Y5cXzPOZX/hgXlfd8er5fuDJ8su8gh9yAP1fnM/skvuV4G3+h/s
k+tQ9PuNr49yrfJirSP1vK6fxQ6uEzf2SZhnxRc+lv3Hnv/VjeJWvoCn1gGM
13zkP/wCDsmP/E//jl9al1OPL8fz7qqP1ZX0nOvu+bu/uf+Bnyx/D2rG24kf
nS2+zN/wK+MX/7mOx3/ZY4rTNyqPWheufrT3a/r81JnsYr1ZPqYveDjhy/Ua
n7hmD7zLuPi9OjV5JLyGr/hbxqv1PriE37KPejd/7zV/90qfpfYxNh5wreKB
HfE9fRFx7zz9XP4m76of/77J9cI7/ix/whP4PcXLxeL//FJ/wN/ZY8KFN7o+
Zr4qf3ieo7jnF/LLXzSZeQy74Z8rvts/q9v4Fb+Xf/J3u/P9N/kjf392kjeK
74kHffXs88Fp+Aiv9CHpQx8Dn6F/+mEvenUe/Ibz+C57uJ4dfDZu9qVvfm88
/EO9W/9fA/vL4xt9+eV6/KHN3wPMfabOy9/rgKPiiN/LC/CeP8F7OKLvhv/q
f8A9OMXO+n304f7+Ps3yU4UvSxy8q/BQv0WecB94KG/AG/aXF4yPXfFOfCT3
vaz4fMdj61L5viDei7fCGbxWnZG/Xykulna7XDhMf/xMvaovLV7kUdfzU/hH
T+zML/3dc8QFnF++13dn9Q/gMf7KfvIZ/Tv6vuru3u+SP+QF/m4/tP2Cnoun
sJN6B55VHHfc9v6vvkTuE8Jrt/7/G3EtP9Kj9QXrjcu+zKwP/ug+cE+cwBW4
7yhe8DF80bzUnfBR/lXfwX35SJyLA3bmL673HoF8YV75u5TyNH3C58wT9fun
TZ6ef7egv0dgH1e+t4Z/5e/V/B/rk+MA
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztw0EJACAUBbCHTaxgBRsYQfhn+9+0hxus77OqJZnvCAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADwgwsHOQIh
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}]}], "}"}]], "Output",
 CellChangeTimes->{3.4749868931644473`*^9, 3.474986942836736*^9, 
  3.4749951198591113`*^9, 3.4749953167772055`*^9, 3.4749954830083885`*^9, 
  3.47499585976678*^9, 3.474996430063642*^9, 3.474996564792613*^9, 
  3.4749966296026773`*^9, 3.474996772311818*^9, 3.474996913569537*^9, 
  3.474997596191078*^9, 3.4749977305944223`*^9, 3.4749991135548115`*^9, 
  3.474999389781534*^9, 3.4749995678678865`*^9, 3.4749997882464294`*^9, 
  3.4750008775813055`*^9, 3.4750015429419365`*^9, 3.475002753618136*^9, 
  3.5250118900705433`*^9}]
}, Open  ]],

Cell[TextData[{
 "Comparing these images with those obtained from the fixed values for ",
 StyleBox["w", "Code"]
}], "Text",
 CellChangeTimes->{{3.4749987272403316`*^9, 3.4749987538213167`*^9}, 
   3.4750013642594423`*^9}],

Cell[CellGroupData[{

Cell[BoxData["deconvImgsFromFixedW"], "Input",
 CellChangeTimes->{{3.4749987596778793`*^9, 3.4749987665027266`*^9}, 
   3.4749993344955845`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyt3QvQp1MdB/BNRkipXEZlRJGuRjSVLh6TMqSLVBiNxrVikh2lC5KpBilT
kahUUia6sO5hhcXajbA3u8uy7+6794tLKgyZ/s//+X/OO+/3nTPvqszsnHn+
7/Oc55zf9/f7/i7nPMd2hx+3/1HrTZgwYc/ev116/8798m/O//fTQ82hjx30
8B/euriZeN6Ju5xy45Jm76unLNvjoqXNZjt/7S2PzllW2vPbP88ebh5vbz/+
oeYjtwxdMfnAB5tvfeDNX3jp9g+U6xf//IXfPWDegubXZ39x86uahc1FW7zj
Ra/401AzefY5jz948cPl2vu3eu9Pnjzmewua66ad8PpDH5vX/GDpTQ+8du78
Zs2H2w7nluuT2tefs6iZcsTXL7922tLSfuNdL+m9aknT9jppt6Fmh4fe8Nlv
7r6g2eM1H93zkt8+2Ny/5fX3rL/JyHvN9xMfm3rceScuLv0+9/TEV71/h4fK
+7p5319a4zNf991+9Ia9qcxrWqn8YqN5zefX26D9U7m/k+ecZrsZG/ckc3/z
qf5/c5r+5QHzSkte2uV7tCNe3Lz8TSv3etszw83PTr21N+Nlg35XNE+v3b83
g+VlHtPbnw96uIzv4MO+tO2MjR9sdm2n9/iIHC7b9QXfvvPvDxe55zg26CZW
xgHXE1q4Jo70C797199km7tOWjqY37LS3nzIqulPrV1ccICLcRp3J4+lTV9M
Wyxrdmvh3Hy44EG+9AEe5P/7HYev2/d986vzoXftXa+8+aHBuGY27+k6Ktfm
bb70nD67PvZHq3sjGdHDgz695N2b7byimf2yFqjVg/GsbM6c/6tNf7fdkvIc
HMgBHvRFSz+MT3vGrPYFi5rT99vnnWfOX1jkSE6bbt8iMzKuU3e/4LT99lle
9OSIfy2/7egNl5bnzGvSta1CDRU9c38n9xXluTf2Rn3BaUMFf7iQm9/Z4d3P
ndyzzMVlvPBhh/rr+p9T7KTT+5nFfuBmvOZLrubTU8JrPnjZcNO7uYfoiqaV
7jZ3rW7ObuG6Yk3TM87eEJYXfUh99h76RM/gkfZrnvjkyskH9jRhuMhz6zvW
3Hv6rKFmp/6LR+yWvrAb8qAXnmc/8GitZZdTVpdr+mD89B0u5MW+vLfDa3lz
8avbAQ4X/vM+/Zk/fMw/7SLlB4+cf6cmKwf2tbrpd7/lyuYfi97+nQ/dMDIP
dg0feOBX43FfJ4+5xZ68Fx700O/s43Vzf9pj1JXNvjd8vHfLisJbLXsefNhw
mQe+ND/63PHsqgEvjeBBLuyZ3tMX7/G89qhnv3LpjsPLi59dcPEvv79wp6WF
Z5PX4NFaeW9ARX/Iy/WPe9re66mMm7w7Xlla5t/1s7Lopef0R85wyGvjgFu+
33vpGb7i5+gleZ61cKd/HvnssmLXxg/nfA88yZddwYMfgucDLT1/cnG5H29v
1Bf4ymKv5LR+r5et915S5kEuKR98aFwZF3g/faRneAkPP/NE+6JVBR96TM7e
473s3jzTfsQF9LgdxWeOXVRavJN82hPSzLMOH/Hr9BOO/PVNrbltNlTiBnEj
/0Ee7Nw42Y378JXn6QP9YBd79QW5uNgVu0h54LH0W95PP1MOeI6fwmN4C3+y
75rc+TG/w49epN9k7xnP0X/zhg975Rf4/SdbcZ67pMxH3ELvMn4yX/3rVz/k
Lk9gP/TW8/yzeE2Lr+BEXu43P/PHD8ZrHvQMLnBIXmFnxkcvxFN4AT4Z/7ET
PJLxmvH7u3gPb3XzXFHwIDd8B1/yMA5xIn3UL/0TJ2v5M3KiL/SNHOiXedBD
+kce5C8+hzM7zRYucDR+dmW+8CVXegEPv7OnjAP0q5/kE/cbP7nwq+JCuMhz
xW/w15IjfaNn4gp8pZ/Eh16Qs/myN3JJHk39Zbfs3fuN23y9j9zZIzmRK3tI
fUi+8l446yfzfXzvffCAm/eQF3uQz+IZ79Nfl9fPLvGe8Zln8lLWK+DSetMn
Fi0p84RvJ8dZhRf0y061/B39NB92AT9xAf0kD3JnX8bhmly1mR9p4U1v6Ac+
gkvaX+az4n28Qv70llzNh77AQf5Dbt5DXnDt/NuIvbFH+qtfdiH/02/GS+Ii
8Tl5ZX0DH8HJvOkj/U6eh4ffM/80bvoAD/gkL6XdZx2FPuN5/aVfp8fea34Z
T5CX8YpX8ZL8Vx4ormI/4kvy4pdyHl1/9xdcRudDD4xps+7hd/FP1tfICY/k
Nb9b0+Oan/XerOMlX+E7chH3Zl5CH/EWPcBf9Jtfxhfi27S75C92SC/oJzzE
U51fmlXiWvMwP797LvHxe9bZEv9avADfrM+oy8orxafkUKv7Jl/iVzwiP1NP
gAte0L8Wj8Eh6x30BQ78FPtxzY+YF79L3vS4s9NZZT45v5Sn39mv3z1Xa/EH
+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
U34Hz67sb5SndPpyX/l+ml3pR/1A6/3+nvvWcx+K9+a+lFpb2yeZ9pH1sIxT
cn8/fRUHkY/4U/1DnVEdV14uTha3qdPon36IG9RVxF/0ZpO+Xd1d6g3k3h/G
xL8OePS25uQ+TreX+Iz+sG/yN8/cL59xUm3ffMa7+T3kuuYz6Zcyj8x1Ljyb
32eIA/Kch1znsh4sPhBHsxNyEDeId8VR9JH8n+rP986CD/l3455W4gDf/5hP
+glt5uH5e/rnzG9c19a5xovP0j5ynLlfCd/DQ/0c/+R+BPLGdxmvZR0L3lkf
Th63n3D7Pn53Fzw6Od41sLd7Cq+YR+r36Px/3pjvpcgz19PTf9TyxeSdWjxX
i4Nr9c98L/nJG/F8fgef35WpT+Z3c+woeR2emW/z08aT38HBhT/p7O+eMbyf
6355HkQtj+NvxDP5PXDiOF6eUas3p13W7MZz5M5vsJOsZ8nX4KHuzq+wF/4e
TqO/Zxg5zwjv82fiXes78OjGf1dzRl/c9w7qLzPGxM/wyPN9yJW9m0fG6eQh
jk+/UvvOIesGKd/cp1Or8+iXfuR3B+7P84Pk+/IV/p298BfsbfT31FObzfvT
n1rydfJT5zLuPDcg46b0t66zfgs3cW6eEyE+Z6953kWuZ6U9wsU48vyptKfM
azOOM2/yYCfsI79HE9fkOpc6i5b9sCfxEn33fus4OW744an8Tri2X8r4avtH
8rty8k85577E/A478SLHrEvzC96b8XPWC4wz9817f8YD+AsPyUvse7c/IteJ
1dv5cfqYftr5Wfy5eKvrd3rx+/Axf/UW342JI/KcOXLiJ/EYubAn+KhLaz2f
+03yfDT+Vlya64W5ru85+iPekzfk+WnpF3P/Ozzkk+yCP8H75J32Cxf+A27s
nzz4d/elX1PXwaOj9zWPrYdk3oE/+aXu/dc0Q319uWTg72aM2VeY+SK/yA8Y
J71PuZo/HqKf9AZfsVctHI2bPSUe6gDywYwjXXuP33Od0fvIh/6yD/NiB3AR
Z7jOeljtPKiMs+b17fQvBRdxBrnj+fTf+sv109xXmOfuqFOIf9S95CGu8zw7
6yPp3+3D59fJhR7yn/SMvdAH48/9eJlPsA/24375UH5Xl/XKxIMc4QB3ciYf
dmv8+f1J1k/0k+ejZLyb5zuSR547med14k94kL91YLiwG/6D/OBBz7p469pB
neSGkpdn3JPzzDwh9Tz3g/g98cjzmOhprqvk+YbiRPxJX5MHjBN+5sNeMs/J
7+Dz+948fyj9oXV4+6zwlTr+6O/cZxd7FO/y8931lAGOdxRczIMczI/cMh8W
d5J3xm+ZR5h3no9j/lk3IU96JM7AI8ZBf9WFOv/z53J/2qf3sYPauo04K/dV
82PWs9I+4CDeg4P56J+f569dw4Hc2Tv54c08NzT3edKj/F4g46M8Nw1fk4d1
HfE6ezbejGfVP9P+xY1pz5nHJo9q2YH7zI8fVo/kR8Q38sf013leWK7bkCe9
zHPiMj/AG+Ti+3dyFGfS/1zHyjgvzzcmX35OPTrrnPCid+xbHOB+9oIvzDf3
QeV6r3mI0+BC/uIZdVx2Iu4n99Fx2JzCH+Qnn2AfeCnXdWp83OUnVzdH9vu9
o/gpck67yvVJ8q+dT5x5fZ4bS9/Vc9iFv7v2/tz3q78814X/y3Os1AnhgYfs
AxbfqxPzG3leM33Bn/S607ebB/jfUvI/+OQ6Br2FKz7o5n3LmHq8eZK3v/ud
3mhz3TLPtWPX9EEdgV2wz4yvjDfPizYf/WaelOdzqGfJf/EGO1FfgYu4Ck9p
yV/9Q9zI3q2D0PfO/m4bs+6d56zDEy7WFfm3/B4v6395nhx55vqYeI8+4y3x
CL339zy3gv3SOzi6Hx5ZlyRv+YO8jrzz3CD2oz4CD/exN+83X++nR+QMN/dn
fZDdk4/5rejL78rC03kecvJSnm8pHkj5pT+mN+xdvEtv2EnyEvvt+Hly6cff
8XB+3wwP67T5fTt5W5dnJ/hLHsae3EeP2Wv6B35bHGxe+tdP1lPNj9zwOf+U
+/DwmP7oAV7BI+SnTtLxyo1l/SzXmbM1D3jRH8/Ry6yXZH0ZHnhIfmF/ifqH
Ojp/zo608kVxYzeOy4vfo6f2heDrrBtmvGOc+A6/Tejz+a2F10evz9886P/i
UmfO9XP988PqJPCWv8INvqPraVMHdjplzPo//cv1gsw7xD/sVHyV51Sr47IT
/oX88zwafkP/o9dlJzeT+uO9quiz+/J8avJNnhBHbtvX4wsLX13SH+/1pf9O
zycN9pNNmKCfPKcvz/uEt/70w6/RK/wKP/4E74hP6WXuv6AHeS6GccGjtm+L
v7A/RXyb58eJx0afLz014qFJxf/m90T4GL+ZP1zxCbvTshPyYT/0lf/MfQt+
F1/AYzTPTx1TPyB/9/H/mSdmnkP+uS+H31B3g0Oeg2G/ltb9+d0ifOSDnme3
9JY+G7dx8r/494f9eUwPHO4r/hau/C19JTf4kG/m8fn/AcDrxpV+Ag5Z3xE3
sme8Bge8nHFJfs8uX6D//IQ6tfg38WR/cJMPauGq/Q8dIb2J
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
o3Uukc/Hcx+kz8WDL/8Dq07eJw==
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztw0EJACAUBbCHTaxgBRsYQfhn+9+0hxus77OqJZnvCAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADwgwsHOQIh
      "], {{0, 67}, {50, 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real", ColorSpace -> "Grayscale", Interleaving -> None],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSizeRaw->{50, 67},
    PlotRange->{{0, 50}, {0, 67}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.474998769704314*^9, 3.4749991135860467`*^9, {3.474999336822592*^9, 
   3.474999358515299*^9}, 3.4749995678991213`*^9, 3.4749996799234495`*^9, 
   3.474999788277664*^9, 3.4750008776125865`*^9, 3.475001542957572*^9, 
   3.4750027536494055`*^9, 3.5250118900861435`*^9}]
}, Open  ]],

Cell["\<\
produces surprisingly different images for the first channel and similar \
images for the second channel. Surprising because the fixed color basis \
values obtained from the file differed significantly from those calculated \
and were supposedly for hematoxylin and DAB staining, not H&E. The results \
for the first channel, both supposedly hematoxylin, are very different while \
the results for the second channel, eosin or DAB are so similar.\
\>", "Text",
 CellChangeTimes->{{3.474998904639514*^9, 3.474999008839474*^9}, {
  3.474999215802584*^9, 3.474999320845889*^9}}],

Cell[CellGroupData[{

Cell["Some Observations", "Subsubsection",
 CellChangeTimes->{{3.4749969400868635`*^9, 3.4749969461617985`*^9}}],

Cell[TextData[{
 "In ",
 StyleBox["findWH()", "Code"],
 ", when initializing the guess at the color basis with random values, the \
channels do not always come out in the same order. For example, sometimes the \
color basis for hematoxylin is in the first column, sometimes in the second."
}], "Text",
 CellChangeTimes->{{3.474996979628601*^9, 3.4749970880872774`*^9}, {
  3.4749977419638896`*^9, 3.4749977419951243`*^9}}],

Cell[TextData[{
 "Also, even when the correct channels show up in the correct columns, the \
final values can vary considerably, even after the full 5,000 iterations. \
This behavior was noted by Macenko, ",
 StyleBox["et al",
  FontSlant->"Italic"],
 ". as well and attributed it to the use of spectral data rather than RGB \
data. (A characteristic which their method supposedly corrects.)"
}], "Text",
 CellChangeTimes->{{3.4749977428696985`*^9, 3.47499779614065*^9}, {
  3.4750024714412656`*^9, 3.4750024966758327`*^9}, {3.4750028980211487`*^9, 
  3.4750028980367837`*^9}, {3.4750031649384546`*^9, 3.475003200773416*^9}}],

Cell["\<\
It seems that this method could be made to work across multiple slide types \
-- H&E, DAB, Special Stains -- but would work best if good initial guesses \
are provided for the color basis matrix. This is certainly no more difficult \
than the current method based on Ruifrok that requires the basis values \
anyway. What is not yet clear is whether certain images will cause the \
algorithm to mis-assign channels, even when giving good initial guesses. For \
example will some images cause the system to converge with hematoxylin in the \
second channel? That is a question that should be answered before putting \
this method into production.\
\>", "Text",
 CellChangeTimes->{{3.475002898927967*^9, 3.4750031455356674`*^9}}],

Cell[TextData[{
 "As mentioned somewhere above, an additional nicety would be for the ",
 StyleBox["reconIH[]", "Code"],
 " function to output actual images for each channel. Images with an indexed \
palette with different intensity values of the hue in the corresponding \
channel of the color basis matrix would be intuitive."
}], "Text",
 CellChangeTimes->{{3.475002497989156*^9, 3.475002620612892*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowToolbars->{"RulerBar", "EditBar"},
WindowSize->{987, 1044},
WindowMargins->{{194, Automatic}, {Automatic, 3}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
ShowSelection->True,
Magnification:>FEPrivate`If[
  FEPrivate`Equal[FEPrivate`$VersionNumber, 6.], 1.25, 1.25 Inherited],
FrontEndVersion->"8.0 for Microsoft Windows (64-bit) (February 23, 2011)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Article"}, "JournalArticle.nb", CharacterEncoding -> 
       "WindowsANSI"]]], 
   Cell[
    StyleData["Text"], TextAlignment -> Left, TextJustification -> 0., 
    FontFamily -> "Cambria", FontSize -> 12, FontWeight -> "Plain", FontSlant -> 
    "Plain", FontVariations -> {
     "StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Item1"], CellGroupingRules -> "NormalGrouping", FontFamily -> 
    "Cambria", FontSize -> 13, FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Item1Paragraph"], FontFamily -> "Cambria", FontSize -> 12, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Section"], TextAlignment -> Left, FontFamily -> "Calibri", 
    FontSize -> 16, FontWeight -> "Bold", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Subsection"], TextAlignment -> Left, FontFamily -> "Calibri", 
    FontSize -> 14, FontWeight -> "Bold", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Subsubsection"], TextAlignment -> Left, TextJustification -> 
    0., FontFamily -> "Calibri", FontSize -> 13, FontWeight -> "Bold", 
    FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Title"], TextAlignment -> Left, TextJustification -> 0., 
    FontFamily -> "Calibri", FontSize -> 22, FontWeight -> "Bold", FontSlant -> 
    "Plain", FontVariations -> {
     "StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Code"], FontFamily -> "Consolas", FontSize -> 12, FontWeight -> 
    "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Program"], CellFrame -> 0.5, 
    CellMargins -> {{75, 50}, {10, 10}}, LineSpacing -> {1, 1}, FontFamily -> 
    "Consolas", FontSize -> 10, FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}, 
    Background -> RGBColor[0.87, 0.94, 1]]}, Visible -> False, 
  FrontEndVersion -> "8.0 for Microsoft Windows (64-bit) (February 23, 2011)",
   StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3524986524-6554518"->{
  Cell[189129, 4150, 126, 2, 50, "Print",
   CellTags->"Info3524986524-6554518"],
  Cell[189258, 4154, 1438, 46, 249, "Print",
   CellTags->"Info3524986524-6554518"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3524986524-6554518", 301422, 6292}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 322, 6, 123, "Title"],
Cell[892, 30, 705, 15, 69, "Text"],
Cell[1600, 47, 2233, 53, 110, "Text"],
Cell[CellGroupData[{
Cell[3858, 104, 167, 4, 57, "Section"],
Cell[4028, 110, 537, 10, 69, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4602, 125, 227, 5, 57, "Section"],
Cell[4832, 132, 581, 9, 90, "Text"],
Cell[5416, 143, 368, 10, 191, "Program"],
Cell[5787, 155, 231, 5, 27, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6055, 165, 553, 7, 57, "Section"],
Cell[CellGroupData[{
Cell[6633, 176, 395, 8, 40, "Subsection"],
Cell[7031, 186, 453, 7, 48, "Text"],
Cell[CellGroupData[{
Cell[7509, 197, 121, 2, 30, "Subsubsection"],
Cell[7633, 201, 612, 11, 56, "Item1Paragraph"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8282, 217, 102, 1, 30, "Subsubsection"],
Cell[CellGroupData[{
Cell[8409, 222, 788, 11, 56, "Item1Paragraph"],
Cell[9200, 235, 708, 11, 38, "Item1Paragraph"]
}, Open  ]],
Cell[9923, 249, 304, 8, 35, "Input"],
Cell[CellGroupData[{
Cell[10252, 261, 325, 7, 35, "Input"],
Cell[10580, 270, 1936, 35, 40, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12553, 310, 268, 6, 35, "Input"],
Cell[12824, 318, 1109, 17, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13970, 340, 234, 5, 35, "Input"],
Cell[14207, 347, 1049, 15, 35, "Output"]
}, Open  ]],
Cell[15271, 365, 457, 8, 38, "Item1Paragraph"],
Cell[CellGroupData[{
Cell[15753, 377, 370, 9, 35, "Input"],
Cell[16126, 388, 2257, 47, 97, "Output"]
}, Open  ]],
Cell[18398, 438, 467, 10, 20, "Item1Paragraph"],
Cell[CellGroupData[{
Cell[18890, 452, 519, 12, 35, "Input"],
Cell[19412, 466, 2011, 42, 75, "Output"]
}, Open  ]],
Cell[21438, 511, 510, 9, 19, "Item1Paragraph"],
Cell[CellGroupData[{
Cell[21973, 524, 750, 15, 35, "Input"],
Cell[22726, 541, 1692, 34, 103, "Output"]
}, Open  ]],
Cell[24433, 578, 657, 11, 39, "Item1Paragraph"],
Cell[25093, 591, 602, 14, 35, "Input"],
Cell[CellGroupData[{
Cell[25720, 609, 176, 4, 35, "Input"],
Cell[25899, 615, 1678, 34, 103, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[27626, 655, 154, 2, 30, "Subsubsection"],
Cell[27783, 659, 743, 15, 38, "Item1Paragraph"],
Cell[28529, 676, 3506, 62, 1004, "Program"],
Cell[CellGroupData[{
Cell[32060, 742, 579, 14, 39, "Item1Paragraph"],
Cell[32642, 758, 1074, 21, 56, "Item1Paragraph"]
}, Open  ]],
Cell[33731, 782, 883, 29, 468, "Program"],
Cell[34617, 813, 357, 6, 19, "Item1Paragraph"],
Cell[34977, 821, 1630, 33, 124, "Input"],
Cell[36610, 856, 228, 4, 19, "Item1Paragraph"],
Cell[CellGroupData[{
Cell[36863, 864, 299, 7, 35, "Input"],
Cell[37165, 873, 1530, 24, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38732, 902, 427, 8, 35, "Input"],
Cell[39162, 912, 2024, 36, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41223, 953, 69, 1, 35, "Input"],
Cell[41295, 956, 1446, 23, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42778, 984, 69, 1, 35, "Input"],
Cell[42850, 987, 1445, 23, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44332, 1015, 69, 1, 35, "Input"],
Cell[44404, 1018, 1480, 23, 35, "Output"]
}, Open  ]],
Cell[45899, 1044, 263, 5, 27, "Text"],
Cell[CellGroupData[{
Cell[46187, 1053, 208, 6, 35, "Input"],
Cell[46398, 1061, 1202, 19, 35, "Output"]
}, Open  ]],
Cell[47615, 1083, 164, 3, 27, "Text"],
Cell[CellGroupData[{
Cell[47804, 1090, 190, 5, 35, "Input"],
Cell[47997, 1097, 1188, 19, 35, "Output"]
}, Open  ]],
Cell[49200, 1119, 701, 13, 71, "Text"],
Cell[49904, 1134, 2239, 47, 146, "Input"],
Cell[CellGroupData[{
Cell[52168, 1185, 391, 7, 35, "Input"],
Cell[52562, 1194, 5387, 82, 234, "Output"]
}, Open  ]],
Cell[57964, 1279, 297, 6, 27, "Text"],
Cell[CellGroupData[{
Cell[58286, 1289, 635, 16, 35, "Input"],
Cell[58924, 1307, 1037, 14, 35, "Output"]
}, Open  ]],
Cell[59976, 1324, 305, 6, 27, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60330, 1336, 347, 4, 40, "Subsection"],
Cell[60680, 1342, 1419, 32, 157, "Text"],
Cell[62102, 1376, 2053, 79, 1296, "Program"],
Cell[64158, 1457, 408, 7, 48, "Text"],
Cell[64569, 1466, 302, 7, 28, "Text"],
Cell[64874, 1475, 300, 8, 35, "Input"],
Cell[CellGroupData[{
Cell[65199, 1487, 266, 5, 35, "Input"],
Cell[65468, 1494, 1541, 27, 35, "Output"]
}, Open  ]],
Cell[67024, 1524, 474, 7, 48, "Text"],
Cell[CellGroupData[{
Cell[67523, 1535, 198, 4, 35, "Input"],
Cell[67724, 1541, 1478, 25, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69239, 1571, 133, 2, 35, "Input"],
Cell[69375, 1575, 1763, 33, 85, "Output"]
}, Open  ]],
Cell[71153, 1611, 199, 5, 28, "Text"],
Cell[71355, 1618, 661, 17, 102, "Input"],
Cell[CellGroupData[{
Cell[72041, 1639, 195, 4, 35, "Input"],
Cell[72239, 1645, 1015, 19, 35, "Output"]
}, Open  ]],
Cell[73269, 1667, 1697, 35, 136, "Text"],
Cell[74969, 1704, 373, 8, 28, "Text"],
Cell[75345, 1714, 350, 8, 35, "Input"],
Cell[75698, 1724, 143, 1, 27, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75878, 1730, 221, 3, 40, "Subsection"],
Cell[76102, 1735, 460, 10, 49, "Text"],
Cell[76565, 1747, 501, 18, 289, "Program"],
Cell[77069, 1767, 646, 14, 50, "Text"],
Cell[77718, 1783, 349, 8, 35, "Input"],
Cell[CellGroupData[{
Cell[78092, 1795, 133, 2, 35, "Input"],
Cell[78228, 1799, 1814, 36, 103, "Output"]
}, Open  ]],
Cell[80057, 1838, 153, 3, 27, "Text"],
Cell[CellGroupData[{
Cell[80235, 1845, 239, 5, 35, "Input"],
Cell[80477, 1852, 1468, 26, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81982, 1883, 231, 5, 35, "Input"],
Cell[82216, 1890, 1460, 26, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83713, 1921, 164, 3, 35, "Input"],
Cell[83880, 1926, 1427, 26, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85344, 1957, 159, 3, 35, "Input"],
Cell[85506, 1962, 1329, 25, 35, "Output"]
}, Open  ]],
Cell[86850, 1990, 127, 1, 27, "Text"],
Cell[86980, 1993, 1256, 30, 168, "Input"],
Cell[CellGroupData[{
Cell[88261, 2027, 188, 4, 35, "Input"],
Cell[88452, 2033, 424, 9, 27, "Print"],
Cell[88879, 2044, 1408, 26, 35, "Output"]
}, Open  ]],
Cell[90302, 2073, 366, 11, 28, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90705, 2089, 735, 9, 40, "Subsection"],
Cell[91443, 2100, 2179, 47, 136, "Text"],
Cell[93625, 2149, 845, 44, 711, "Program"],
Cell[94473, 2195, 968, 18, 92, "Text"],
Cell[95444, 2215, 399, 9, 28, "Text"],
Cell[95846, 2226, 353, 9, 35, "Input"],
Cell[96202, 2237, 313, 6, 27, "Text"],
Cell[96518, 2245, 722, 19, 35, "Input"],
Cell[97243, 2266, 616, 12, 49, "Text"],
Cell[97862, 2280, 315, 6, 27, "Text"],
Cell[98180, 2288, 830, 17, 35, "Input"],
Cell[99013, 2307, 116, 1, 27, "Text"],
Cell[CellGroupData[{
Cell[99154, 2312, 131, 2, 35, "Input"],
Cell[99288, 2316, 1220, 18, 35, "Output"]
}, Open  ]],
Cell[100523, 2337, 204, 2, 27, "Text"],
Cell[CellGroupData[{
Cell[100752, 2343, 240, 5, 35, "Input"],
Cell[100995, 2350, 1659, 30, 38, "Output"]
}, Open  ]],
Cell[102669, 2383, 141, 1, 27, "Text"],
Cell[CellGroupData[{
Cell[102835, 2388, 170, 3, 35, "Input"],
Cell[103008, 2393, 2335, 49, 40, "Output"]
}, Open  ]],
Cell[105358, 2445, 190, 4, 27, "Text"],
Cell[105551, 2451, 268, 3, 27, "Text"],
Cell[105822, 2456, 5836, 132, 388, "Input"],
Cell[111661, 2590, 243, 6, 28, "Text"],
Cell[CellGroupData[{
Cell[111929, 2600, 329, 5, 35, "Input"],
Cell[112261, 2607, 2020, 35, 38, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114318, 2647, 170, 3, 35, "Input"],
Cell[114491, 2652, 2547, 52, 40, "Output"]
}, Open  ]],
Cell[117053, 2707, 231, 6, 28, "Text"],
Cell[117287, 2715, 210, 4, 27, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117534, 2724, 166, 2, 40, "Subsection"],
Cell[117703, 2728, 351, 10, 28, "Text"],
Cell[118057, 2740, 1742, 37, 168, "Input"],
Cell[119802, 2779, 268, 6, 28, "Text"],
Cell[CellGroupData[{
Cell[120095, 2789, 500, 11, 35, "Input"],
Cell[120598, 2802, 422, 9, 27, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121057, 2816, 194, 3, 35, "Input"],
Cell[121254, 2821, 1823, 36, 103, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123114, 2862, 191, 3, 35, "Input"],
Cell[123308, 2867, 1906, 35, 85, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125251, 2907, 243, 4, 35, "Input"],
Cell[125497, 2913, 2557, 52, 40, "Output"]
}, Open  ]],
Cell[128069, 2968, 112, 1, 27, "Text"],
Cell[128184, 2971, 255, 7, 35, "Input"],
Cell[CellGroupData[{
Cell[128464, 2982, 142, 3, 35, "Input"],
Cell[128609, 2987, 14018, 232, 102, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142664, 3224, 169, 3, 35, "Input"],
Cell[142836, 3229, 1091, 17, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143964, 3251, 508, 11, 35, "Input"],
Cell[144475, 3264, 432, 9, 27, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144944, 3278, 161, 2, 35, "Input"],
Cell[145108, 3282, 19008, 314, 102, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164153, 3601, 231, 4, 35, "Input"],
Cell[164387, 3607, 1122, 17, 35, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165546, 3629, 363, 6, 35, "Input"],
Cell[165912, 3637, 16497, 284, 104, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[182458, 3927, 763, 10, 40, "Subsection"],
Cell[183224, 3939, 472, 11, 49, "Text"],
Cell[183699, 3952, 3719, 147, 2401, "Program"],
Cell[187421, 4101, 121, 1, 27, "Text"],
Cell[187545, 4104, 1416, 36, 168, "Input"],
Cell[CellGroupData[{
Cell[188986, 4144, 118, 2, 35, "Input"],
Cell[CellGroupData[{
Cell[189129, 4150, 126, 2, 50, "Print",
 CellTags->"Info3524986524-6554518"],
Cell[189258, 4154, 1438, 46, 249, "Print",
 CellTags->"Info3524986524-6554518"]
}, Open  ]]
}, Open  ]],
Cell[190723, 4204, 966, 20, 93, "Text"],
Cell[191692, 4226, 848, 15, 91, "Text"],
Cell[192543, 4243, 294, 6, 48, "Text"],
Cell[192840, 4251, 14308, 314, 1554, "Input"],
Cell[207151, 4567, 265, 6, 35, "Input"],
Cell[CellGroupData[{
Cell[207441, 4577, 396, 9, 35, "Input"],
Cell[CellGroupData[{
Cell[207862, 4590, 1715, 24, 27, "Print"],
Cell[209580, 4616, 1855, 29, 27, "Print"],
Cell[211438, 4647, 1907, 28, 27, "Print"],
Cell[213348, 4677, 1861, 29, 27, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[215258, 4712, 127, 2, 35, "Input"],
Cell[215388, 4716, 1372, 28, 85, "Output"]
}, Open  ]],
Cell[216775, 4747, 240, 7, 28, "Text"],
Cell[CellGroupData[{
Cell[217040, 4758, 428, 11, 80, "Input"],
Cell[217471, 4771, 13138, 220, 102, "Output"],
Cell[230612, 4993, 324, 6, 35, "Output"]
}, Open  ]],
Cell[230951, 5002, 2941, 69, 388, "Input"],
Cell[CellGroupData[{
Cell[233917, 5075, 470, 11, 35, "Input"],
Cell[CellGroupData[{
Cell[234412, 5090, 762, 11, 27, "Print"],
Cell[235177, 5103, 791, 12, 27, "Print"],
Cell[235971, 5117, 929, 17, 27, "Print"],
Cell[236903, 5136, 981, 16, 27, "Print"],
Cell[237887, 5154, 935, 17, 27, "Print"],
Cell[238825, 5173, 1744, 36, 60, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[240618, 5215, 158, 2, 35, "Input"],
Cell[240779, 5219, 19495, 323, 102, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260311, 5547, 287, 5, 35, "Input"],
Cell[260601, 5554, 17835, 305, 104, "Output"]
}, Open  ]],
Cell[278451, 5862, 222, 5, 28, "Text"],
Cell[CellGroupData[{
Cell[278698, 5871, 144, 2, 35, "Input"],
Cell[278845, 5875, 16526, 284, 104, "Output"]
}, Open  ]],
Cell[295386, 6162, 585, 9, 69, "Text"],
Cell[CellGroupData[{
Cell[295996, 6175, 112, 1, 30, "Subsubsection"],
Cell[296111, 6178, 422, 8, 49, "Text"],
Cell[296536, 6188, 625, 11, 69, "Text"],
Cell[297164, 6201, 736, 11, 110, "Text"],
Cell[297903, 6214, 406, 7, 49, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
