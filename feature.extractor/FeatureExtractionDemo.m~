% This is the main script for running feature extraction

% Author: Nicholas McCarthy (nicholas.mccarthy@gmail.com)
% Created: 27-05-2013
% Updated: 27-05-2013


%% Setup 
%--------
% Sets env vars, any other odds and ends

[data.images data.masks ] = get_image_files(env.image_dir); % env should be declared ..


%% Init
%--------
% Init vars for run

% Load classifier model (??? Not sure on best implementation of this. Think
% it would be wise to start with an assumption of parallel models

% Set tilesize for blockproc command

image_tilesize = [256 256];
mask_tilesize = [16 16];

% matlabpool local 3;     % Open matlab pool for parallel processing
disp('Ready!');

%% EXTRACT CLASS LABELS

% Gets label and percentage coverage of annotation region. 
func_labels = @(block_struct) shiftdim(block_get_class_label(block_struct), -1);

idx_labels = [];        % Assigned label
idx_coverage = [];      % Coverage of label
idx_filenames = {};     % Filename of obs.

for i = 1 %:20 
    
    disp(i); tic;
    mask_filepath = strcat(env.image_dir, data.masks(i).name); % Get mask filepath

    % Blockproc mask image to get class labels
    G = blockproc(mask_filepath, mask_tilesize, func_labels, 'PadPartialBlocks', true); 
   
    [X Y Z] = size(G);
    G = reshape(G, X*Y, Z);
     
    idx_labels = vertcat(idx_labels, G(:,1));   % grayscale int8 values for each class
    idx_coverage = vertcat(idx_coverage, G(:,2));
    idx_filenames = vertcat(idx_filenames, cellstr(repmat(mask_filepath, length(G(:,1)), 1)));
    
    toc
    
    % convert class num values to labels  
end

%%
intervals = [0;28;56;85;113;141;170;198;255]
interval = (255/8);

idx_labelsr = idx_labels ./ interval;

idx_labelsr = num2str(idx_labelsr);

idx_labelsr = cellstr(idx_labelsr);

idx_labelsr = regexprep(idx_labelsr, '6', 'ART');
idx_labelsr = regexprep(idx_labelsr, '7', 'TIS');
idx_labelsr = regexprep(idx_labelsr, '8', 'NON');
idx_labelsr = regexprep(idx_labelsr, '5', 'INF');
idx_labelsr = regexprep(idx_labelsr, '3', 'G45');
idx_labelsr = regexprep(idx_labelsr, '4', 'G5');
idx_labelsr = regexprep(idx_labelsr, '2', 'G4');
idx_labelsr = regexprep(idx_labelsr, '1', 'G34');
idx_labelsr = regexprep(idx_labelsr, '0', 'G3');

%% Creating class label dataset

D = dataset( {idx_filenames, 'Filename'}, {idx_coverage, 'Coverage'}, {labels, 'label'})


%%

% Convert from uint8 values to string labels
labels = cell(length(labels_idx), 1);

labels_str = labels_idx;
labels_str = num2str(labels_str);

for i = 1:length(labels_idx)
    labels{i} = labels_str(i);
end

labels = regexprep(labels, '0', 'G3');
labels = regexprep(labels, '28', 'G34');
labels = regexprep(labels, '56', 'G4');
labels = regexprep(labels, '85', 'G45');
labels = regexprep(labels, '113', 'G5');
labels = regexprep(labels, '141', 'INF');
labels = regexprep(labels, '170', 'ART');
labels = regexprep(labels, '192', 'TIS');
labels = regexprep(labels, '255', 'NON');

save 'get_class_labels' lresults

%%

% load('get_class_labels.mat');

labels_idx = [];
filenames_idx = {};
 % move this to loop above after this is done
for i = 1:20
    labels_idx = vertcat(labels_idx, lresults(i).labelrows);   
    fn = {lresults(i).mask};
    filenames_idx = vertcat(filenames_idx, repmat(fn, length(lresults(i).labelrows), 1));
end


%% Converting class num values to labels

U = unique(labels_idx);
U_vals = U ./ (255/8);

labels_str = labels_idx;

labels_str = labels_str ./ (255/8);

labels_str = num2str(labels_str);

labels_str = mat2cell(labels_str);

labels = cell(length(labels_str), 1)

for i = 1:length(labels_str)
    labels{i} = labels_str(1);
end

labels = regexprep(labels, '0', 'G3');
labels = regexprep(labels, '28', 'G34');
labels = regexprep(labels, '56', 'G4');
labels = regexprep(labels, '85', 'G45');
labels = regexprep(labels, '113', 'G5');
labels = regexprep(labels, '141', 'INF');
labels = regexprep(labels, '170', 'ART');
labels = regexprep(labels, '192', 'TIS');
labels = regexprep(labels, '255', 'NON');

% A = num2str(labels);


%% EXTRACT HARALICK FEATURES

func_haralick = @(block_struct) shiftdim(extract_haralick_features(block_struct.data, 8), -1)

fresults = struct();

for i = 1:19 %length(images); % Last image and mask need to be added and processed
   
    image_filepath = strcat(env.image_dir, data.images(i).name);
    %mask_filepath = strcat(env.image_dir, data.masks(i).name);

    disp(image_filepath);
    G = blockproc(image_filepath, image_tilesize, func_cicm, 'PadPartialBlocks', true); 
    
    [X Y Z] = size(G);       % Get image feature vector dimensions ..
    
    G = reshape(G, X*Y, Z);  % Reshape to feature vector format .. 
    
    fresults(i).image = image_filepath;
    fresults(i).rows = G;
    toc
end

save 'get_cicm_features' fresults

%% EXTRACT SHAPE / CICM FEATURES

PC = PixelClassifier();
func_cicm = @(block_struct) shiftdim(PC.CICMFeatures(block_struct.data), -1)


%% EXTRACT GABOR FEATURES


%% Tidy
%--------
% Post processing clean up





%% Roughwork area



