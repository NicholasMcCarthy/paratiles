function feature_vector = extract_haralick_features( varargin )
% Constructs GLCMs from each channel of an input image and extracts
% haralick features.

% Author: Nicholas McCarthy (nicholas.mccarthy@gmail.com)
% Created: 20-05-2013
% Updated: 20-05-2013

% Example: 
% >> I = imread('pout.tif');
% >> numlevels = [8 16 32 64]
% >> distances = [1 2 4 8]
% >> feature_vector = extract_haralick_features(I, numlevels, distances)

%% PARSE INPUTS

inputs = ParseInputs(varargin{:});


%% CONSTRUCT GLCMS & EXTRACT FEATURES

feature_matrix = zeros(inputs.NumGLCMs,13);

c = 1;                                                  % feature_matrix row index
for z = 1:size(inputs.Image,3);                         % for each channel in the input image
    
    for nl = inputs.NumLevels                           % for each NumLevel specified in parameter
    
        for d = inputs.Distances                            % for each distance specified in parameter ..
    
            offsets = [0 d; -d d; -d 0; -d -d];              % Offset vector: 0, 45, 90, 135 degrees
            
            GLCM = im2glcm(inputs.Image(:,:,z), nl, offsets);        % Creates a total-adjacency GLCM

            feature_matrix(c,:) = haralick_features(GLCM);  % Extract features and add to feature_matrix

            c = c + 1;
        end
    end
end

% Reshape results matrix to feature vector format. 
% There are 13 features calculated for each GLCM(z, nl, d). 
feature_vector = reshape(feature_matrix', 1, 13*inputs.NumGLCMs);

function PI = ParseInputs(varargin)
% Basically a wrapper for inputParser

% Anonymous functions for parser
check_image_dimensions = @(x) length(size(x)) == 2 || size(x, 3) == 3 ;    % Need better image checks here
check_numlevels_vector = @(x) isscalar(x) || isvector(x);                  % Checks if 'NumLevels' is scalar or a vector 
check_distances_vector = @(x) isscalar(x) || isvector(x);                  % Checks if 'Distances' is scalar or vector ..

p = inputParser;
p.addRequired('Image', check_image_dimensions);             % Must input an image
p.addOptional('NumLevels', 256, check_numlevels_vector);    % Defaults to GLCM with 256 bins
p.addOptional('Distances', 1, check_distances_vector);      % Defaults to pixel distance 1

p.parse(varargin{:});                                       % Parse the results

% Calculate number of GLCMs there will be here (for neatness)
NumGLCMs = length(p.Results.NumLevels) * length(p.Results.Distances) * size(p.Results.Image, 3); % Number of bins * number of channels GLCMs can be calculated on.
                                                            % Note: No check for alpha channel
PI.Image = p.Results.Image;
PI.Distances = p.Results.Distances;
PI.NumLevels = p.Results.NumLevels;
PI.NumGLCMs = NumGLCMs;


